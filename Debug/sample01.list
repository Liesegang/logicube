
sample01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b78  08000258  08000258  00010258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014c0  08007dd0  08007dd0  00017dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009290  08009290  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08009290  08009290  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009290  08009290  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009290  08009290  00019290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009294  08009294  00019294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  2000008c  08009324  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08009324  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f5c  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b51  00000000  00000000  00035061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  00037bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9d  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c54  00000000  00000000  00039d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f10  00000000  00000000  0005c9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d79b4  00000000  00000000  000728c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005914  00000000  00000000  0014a280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014fb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000008c 	.word	0x2000008c
 8000274:	00000000 	.word	0x00000000
 8000278:	08007db8 	.word	0x08007db8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000090 	.word	0x20000090
 8000294:	08007db8 	.word	0x08007db8

08000298 <Button_Init>:
#define BTN_LONG_PRESS_TIME(x) (this->instance[x].long_press_time_ms / this->process_time_ms)

static btn_init_t *this = NULL;

int8_t Button_Init(btn_init_t *init, btn_instance_t *instance, uint8_t count)
{
 8000298:	b480      	push	{r7}
 800029a:	b087      	sub	sp, #28
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	4613      	mov	r3, r2
 80002a4:	71fb      	strb	r3, [r7, #7]
  if ((NULL == init) || (NULL == instance) || (NULL == init->port_read) || (0 == count))
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d009      	beq.n	80002c0 <Button_Init+0x28>
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d006      	beq.n	80002c0 <Button_Init+0x28>
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d002      	beq.n	80002c0 <Button_Init+0x28>
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d102      	bne.n	80002c6 <Button_Init+0x2e>
  {
    return -1;
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	e07c      	b.n	80003c0 <Button_Init+0x128>
  }
  // link internal objects
  this = init;
 80002c6:	4a41      	ldr	r2, [pc, #260]	; (80003cc <Button_Init+0x134>)
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	6013      	str	r3, [r2, #0]
  this->instance = instance;
 80002cc:	4b3f      	ldr	r3, [pc, #252]	; (80003cc <Button_Init+0x134>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	68ba      	ldr	r2, [r7, #8]
 80002d2:	601a      	str	r2, [r3, #0]

 // init internal variables, set defaults
  this->count = count;
 80002d4:	4b3d      	ldr	r3, [pc, #244]	; (80003cc <Button_Init+0x134>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	79fa      	ldrb	r2, [r7, #7]
 80002da:	711a      	strb	r2, [r3, #4]
  this->process_time_ms = (this->process_time_ms) ? this->process_time_ms  : BTN_PROCESS_DEF;
 80002dc:	4b3b      	ldr	r3, [pc, #236]	; (80003cc <Button_Init+0x134>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	795b      	ldrb	r3, [r3, #5]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d003      	beq.n	80002ee <Button_Init+0x56>
 80002e6:	4b39      	ldr	r3, [pc, #228]	; (80003cc <Button_Init+0x134>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	795a      	ldrb	r2, [r3, #5]
 80002ec:	e000      	b.n	80002f0 <Button_Init+0x58>
 80002ee:	220a      	movs	r2, #10
 80002f0:	4b36      	ldr	r3, [pc, #216]	; (80003cc <Button_Init+0x134>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	715a      	strb	r2, [r3, #5]
  this->debounce_time_ms = (this->debounce_time_ms) ? this->debounce_time_ms : BTN_DEBOUNCE_DEF;
 80002f6:	4b35      	ldr	r3, [pc, #212]	; (80003cc <Button_Init+0x134>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	799b      	ldrb	r3, [r3, #6]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d003      	beq.n	8000308 <Button_Init+0x70>
 8000300:	4b32      	ldr	r3, [pc, #200]	; (80003cc <Button_Init+0x134>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	799a      	ldrb	r2, [r3, #6]
 8000306:	e000      	b.n	800030a <Button_Init+0x72>
 8000308:	2214      	movs	r2, #20
 800030a:	4b30      	ldr	r3, [pc, #192]	; (80003cc <Button_Init+0x134>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	719a      	strb	r2, [r3, #6]
  this->long_press_def_ms = (this->long_press_def_ms) ? this->long_press_def_ms : BTN_LONG_PRESS_DEF; 
 8000310:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <Button_Init+0x134>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	891b      	ldrh	r3, [r3, #8]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d003      	beq.n	8000322 <Button_Init+0x8a>
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <Button_Init+0x134>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	891a      	ldrh	r2, [r3, #8]
 8000320:	e001      	b.n	8000326 <Button_Init+0x8e>
 8000322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000326:	4b29      	ldr	r3, [pc, #164]	; (80003cc <Button_Init+0x134>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	811a      	strh	r2, [r3, #8]

  for(uint8_t i = 0; i < count; i++)
 800032c:	2300      	movs	r3, #0
 800032e:	75fb      	strb	r3, [r7, #23]
 8000330:	e041      	b.n	80003b6 <Button_Init+0x11e>
  {
    this->instance[i].state.locked = 0;
 8000332:	4b26      	ldr	r3, [pc, #152]	; (80003cc <Button_Init+0x134>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	7dfb      	ldrb	r3, [r7, #23]
 800033a:	011b      	lsls	r3, r3, #4
 800033c:	441a      	add	r2, r3
 800033e:	7813      	ldrb	r3, [r2, #0]
 8000340:	f36f 1304 	bfc	r3, #4, #1
 8000344:	7013      	strb	r3, [r2, #0]
    this->instance[i].state.prew = BTN_STATE_NONE;
 8000346:	4b21      	ldr	r3, [pc, #132]	; (80003cc <Button_Init+0x134>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	7dfb      	ldrb	r3, [r7, #23]
 800034e:	011b      	lsls	r3, r3, #4
 8000350:	441a      	add	r2, r3
 8000352:	7813      	ldrb	r3, [r2, #0]
 8000354:	f36f 0383 	bfc	r3, #2, #2
 8000358:	7013      	strb	r3, [r2, #0]
    this->instance[i].long_count = 0;
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <Button_Init+0x134>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	7dfb      	ldrb	r3, [r7, #23]
 8000362:	011b      	lsls	r3, r3, #4
 8000364:	4413      	add	r3, r2
 8000366:	2200      	movs	r2, #0
 8000368:	805a      	strh	r2, [r3, #2]
    this->instance[i].lock_count = 0;
 800036a:	4b18      	ldr	r3, [pc, #96]	; (80003cc <Button_Init+0x134>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	7dfb      	ldrb	r3, [r7, #23]
 8000372:	011b      	lsls	r3, r3, #4
 8000374:	4413      	add	r3, r2
 8000376:	2200      	movs	r2, #0
 8000378:	705a      	strb	r2, [r3, #1]
    this->instance[i].long_press_time_ms = (this->instance[i].long_press_time_ms) ? this->instance[i].long_press_time_ms : this->long_press_def_ms;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <Button_Init+0x134>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	7dfb      	ldrb	r3, [r7, #23]
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	4413      	add	r3, r2
 8000386:	889b      	ldrh	r3, [r3, #4]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d007      	beq.n	800039c <Button_Init+0x104>
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <Button_Init+0x134>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	7dfb      	ldrb	r3, [r7, #23]
 8000394:	011b      	lsls	r3, r3, #4
 8000396:	4413      	add	r3, r2
 8000398:	889b      	ldrh	r3, [r3, #4]
 800039a:	e002      	b.n	80003a2 <Button_Init+0x10a>
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <Button_Init+0x134>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	891b      	ldrh	r3, [r3, #8]
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <Button_Init+0x134>)
 80003a4:	6812      	ldr	r2, [r2, #0]
 80003a6:	6811      	ldr	r1, [r2, #0]
 80003a8:	7dfa      	ldrb	r2, [r7, #23]
 80003aa:	0112      	lsls	r2, r2, #4
 80003ac:	440a      	add	r2, r1
 80003ae:	8093      	strh	r3, [r2, #4]
  for(uint8_t i = 0; i < count; i++)
 80003b0:	7dfb      	ldrb	r3, [r7, #23]
 80003b2:	3301      	adds	r3, #1
 80003b4:	75fb      	strb	r3, [r7, #23]
 80003b6:	7dfa      	ldrb	r2, [r7, #23]
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d3b9      	bcc.n	8000332 <Button_Init+0x9a>
  }
  return 0;
 80003be:	2300      	movs	r3, #0
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	371c      	adds	r7, #28
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	200000a8 	.word	0x200000a8

080003d0 <Button_Update>:


void Button_Update(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
  uint8_t key = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	73fb      	strb	r3, [r7, #15]

  while(key < this->count)
 80003da:	e130      	b.n	800063e <Button_Update+0x26e>
  {

    btn_state_t now_pressed = BTN_STATE_NONE;
 80003dc:	2300      	movs	r3, #0
 80003de:	73bb      	strb	r3, [r7, #14]
    const GPIO_TypeDef *port = this->instance[key].port;
 80003e0:	4b90      	ldr	r3, [pc, #576]	; (8000624 <Button_Update+0x254>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	011b      	lsls	r3, r3, #4
 80003ea:	4413      	add	r3, r2
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	60bb      	str	r3, [r7, #8]
    const uint32_t pin = this->instance[key].pin;
 80003f0:	4b8c      	ldr	r3, [pc, #560]	; (8000624 <Button_Update+0x254>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
 80003f8:	011b      	lsls	r3, r3, #4
 80003fa:	4413      	add	r3, r2
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	607b      	str	r3, [r7, #4]

    now_pressed = (this->port_read(port, pin) ? BTN_STATE_SHORT : BTN_STATE_NONE);
 8000400:	4b88      	ldr	r3, [pc, #544]	; (8000624 <Button_Update+0x254>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	6879      	ldr	r1, [r7, #4]
 8000408:	68b8      	ldr	r0, [r7, #8]
 800040a:	4798      	blx	r3
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	bf14      	ite	ne
 8000412:	2301      	movne	r3, #1
 8000414:	2300      	moveq	r3, #0
 8000416:	b2db      	uxtb	r3, r3
 8000418:	73bb      	strb	r3, [r7, #14]
    if (BTN_STATE_SHORT == now_pressed)                 // Button pressed
 800041a:	7bbb      	ldrb	r3, [r7, #14]
 800041c:	2b01      	cmp	r3, #1
 800041e:	f040 8084 	bne.w	800052a <Button_Update+0x15a>
    {
      if (!this->instance[key].state.locked)
 8000422:	4b80      	ldr	r3, [pc, #512]	; (8000624 <Button_Update+0x254>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	011b      	lsls	r3, r3, #4
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b00      	cmp	r3, #0
 8000438:	d11f      	bne.n	800047a <Button_Update+0xaa>
      {
        if (++this->instance[key].lock_count >= BTN_DEBOUNCE_TIME) // Debounce time
 800043a:	4b7a      	ldr	r3, [pc, #488]	; (8000624 <Button_Update+0x254>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	011b      	lsls	r3, r3, #4
 8000444:	4413      	add	r3, r2
 8000446:	785a      	ldrb	r2, [r3, #1]
 8000448:	3201      	adds	r2, #1
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	705a      	strb	r2, [r3, #1]
 800044e:	785a      	ldrb	r2, [r3, #1]
 8000450:	4b74      	ldr	r3, [pc, #464]	; (8000624 <Button_Update+0x254>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	7999      	ldrb	r1, [r3, #6]
 8000456:	4b73      	ldr	r3, [pc, #460]	; (8000624 <Button_Update+0x254>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	429a      	cmp	r2, r3
 8000464:	d309      	bcc.n	800047a <Button_Update+0xaa>
        {
          this->instance[key].state.locked = 1;
 8000466:	4b6f      	ldr	r3, [pc, #444]	; (8000624 <Button_Update+0x254>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	441a      	add	r2, r3
 8000472:	7813      	ldrb	r3, [r2, #0]
 8000474:	f043 0310 	orr.w	r3, r3, #16
 8000478:	7013      	strb	r3, [r2, #0]
        }
      }

      if ((this->instance[key].state.locked) && 
 800047a:	4b6a      	ldr	r3, [pc, #424]	; (8000624 <Button_Update+0x254>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	4413      	add	r3, r2
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b00      	cmp	r3, #0
 8000490:	d03c      	beq.n	800050c <Button_Update+0x13c>
          (BTN_STATE_SHORT == this->instance[key].state.prew))
 8000492:	4b64      	ldr	r3, [pc, #400]	; (8000624 <Button_Update+0x254>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	011b      	lsls	r3, r3, #4
 800049c:	4413      	add	r3, r2
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	f003 030c 	and.w	r3, r3, #12
 80004a4:	b2db      	uxtb	r3, r3
      if ((this->instance[key].state.locked) && 
 80004a6:	2b04      	cmp	r3, #4
 80004a8:	d130      	bne.n	800050c <Button_Update+0x13c>
      {
        if (++this->instance[key].long_count >= BTN_LONG_PRESS_TIME(key))
 80004aa:	4b5e      	ldr	r3, [pc, #376]	; (8000624 <Button_Update+0x254>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	011b      	lsls	r3, r3, #4
 80004b4:	4413      	add	r3, r2
 80004b6:	885a      	ldrh	r2, [r3, #2]
 80004b8:	3201      	adds	r2, #1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	805a      	strh	r2, [r3, #2]
 80004be:	885b      	ldrh	r3, [r3, #2]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4b58      	ldr	r3, [pc, #352]	; (8000624 <Button_Update+0x254>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	4413      	add	r3, r2
 80004ce:	889b      	ldrh	r3, [r3, #4]
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b54      	ldr	r3, [pc, #336]	; (8000624 <Button_Update+0x254>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004dc:	4299      	cmp	r1, r3
 80004de:	db15      	blt.n	800050c <Button_Update+0x13c>
        {
          this->instance[key].state.act = BTN_STATE_LONG;
 80004e0:	4b50      	ldr	r3, [pc, #320]	; (8000624 <Button_Update+0x254>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	011b      	lsls	r3, r3, #4
 80004ea:	441a      	add	r2, r3
 80004ec:	7813      	ldrb	r3, [r2, #0]
 80004ee:	2102      	movs	r1, #2
 80004f0:	f361 0301 	bfi	r3, r1, #0, #2
 80004f4:	7013      	strb	r3, [r2, #0]
          if (NULL != this->long_press) this->long_press(key);
 80004f6:	4b4b      	ldr	r3, [pc, #300]	; (8000624 <Button_Update+0x254>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d005      	beq.n	800050c <Button_Update+0x13c>
 8000500:	4b48      	ldr	r3, [pc, #288]	; (8000624 <Button_Update+0x254>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	7bfa      	ldrb	r2, [r7, #15]
 8000508:	4610      	mov	r0, r2
 800050a:	4798      	blx	r3
        }
      }
      this->instance[key].state.prew = now_pressed;
 800050c:	4b45      	ldr	r3, [pc, #276]	; (8000624 <Button_Update+0x254>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	441a      	add	r2, r3
 8000518:	7bbb      	ldrb	r3, [r7, #14]
 800051a:	f003 0303 	and.w	r3, r3, #3
 800051e:	b2d9      	uxtb	r1, r3
 8000520:	7813      	ldrb	r3, [r2, #0]
 8000522:	f361 0383 	bfi	r3, r1, #2, #2
 8000526:	7013      	strb	r3, [r2, #0]
 8000528:	e086      	b.n	8000638 <Button_Update+0x268>
    }
    else if (BTN_STATE_NONE == now_pressed)            // Button released
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	2b00      	cmp	r3, #0
 800052e:	f040 8083 	bne.w	8000638 <Button_Update+0x268>
    {
      if (this->instance[key].state.locked)
 8000532:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <Button_Update+0x254>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	4413      	add	r3, r2
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	f003 0310 	and.w	r3, r3, #16
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d06e      	beq.n	8000628 <Button_Update+0x258>
      {
        if (this->instance[key].lock_count)
 800054a:	4b36      	ldr	r3, [pc, #216]	; (8000624 <Button_Update+0x254>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	4413      	add	r3, r2
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00a      	beq.n	8000572 <Button_Update+0x1a2>
        { 
          this->instance[key].lock_count--;
 800055c:	4b31      	ldr	r3, [pc, #196]	; (8000624 <Button_Update+0x254>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	011b      	lsls	r3, r3, #4
 8000566:	4413      	add	r3, r2
 8000568:	785a      	ldrb	r2, [r3, #1]
 800056a:	3a01      	subs	r2, #1
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	705a      	strb	r2, [r3, #1]
 8000570:	e062      	b.n	8000638 <Button_Update+0x268>
        }
        else
        {
          this->instance[key].state.locked = 0;
 8000572:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <Button_Update+0x254>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	441a      	add	r2, r3
 800057e:	7813      	ldrb	r3, [r2, #0]
 8000580:	f36f 1304 	bfc	r3, #4, #1
 8000584:	7013      	strb	r3, [r2, #0]
          if (this->instance[key].long_count < BTN_LONG_PRESS_TIME(key))
 8000586:	4b27      	ldr	r3, [pc, #156]	; (8000624 <Button_Update+0x254>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4413      	add	r3, r2
 8000592:	885b      	ldrh	r3, [r3, #2]
 8000594:	4619      	mov	r1, r3
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <Button_Update+0x254>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	4413      	add	r3, r2
 80005a2:	889b      	ldrh	r3, [r3, #4]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <Button_Update+0x254>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	795b      	ldrb	r3, [r3, #5]
 80005ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80005b0:	4299      	cmp	r1, r3
 80005b2:	da1f      	bge.n	80005f4 <Button_Update+0x224>
          {
            if (0 == this->instance[key].lock_count)
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <Button_Update+0x254>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	011b      	lsls	r3, r3, #4
 80005be:	4413      	add	r3, r2
 80005c0:	785b      	ldrb	r3, [r3, #1]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d138      	bne.n	8000638 <Button_Update+0x268>
            {
              this->instance[key].state.act = BTN_STATE_SHORT;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <Button_Update+0x254>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	441a      	add	r2, r3
 80005d2:	7813      	ldrb	r3, [r2, #0]
 80005d4:	2101      	movs	r1, #1
 80005d6:	f361 0301 	bfi	r3, r1, #0, #2
 80005da:	7013      	strb	r3, [r2, #0]
              if (NULL != this->short_release) this->short_release(key);
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <Button_Update+0x254>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d028      	beq.n	8000638 <Button_Update+0x268>
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <Button_Update+0x254>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	7bfa      	ldrb	r2, [r7, #15]
 80005ee:	4610      	mov	r0, r2
 80005f0:	4798      	blx	r3
 80005f2:	e021      	b.n	8000638 <Button_Update+0x268>
            }
          }
          else
          {
            if (BTN_STATE_LONG == this->instance[key].state.act)
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <Button_Update+0x254>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	011b      	lsls	r3, r3, #4
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f003 0303 	and.w	r3, r3, #3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b02      	cmp	r3, #2
 800060a:	d115      	bne.n	8000638 <Button_Update+0x268>
            {
              if (NULL != this->long_release) this->long_release(key);
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <Button_Update+0x254>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d010      	beq.n	8000638 <Button_Update+0x268>
 8000616:	4b03      	ldr	r3, [pc, #12]	; (8000624 <Button_Update+0x254>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	7bfa      	ldrb	r2, [r7, #15]
 800061e:	4610      	mov	r0, r2
 8000620:	4798      	blx	r3
 8000622:	e009      	b.n	8000638 <Button_Update+0x268>
 8000624:	200000a8 	.word	0x200000a8
          }
        }
      }
      else
      {
        this->instance[key].long_count = 0;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <Button_Update+0x288>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	4413      	add	r3, r2
 8000634:	2200      	movs	r2, #0
 8000636:	805a      	strh	r2, [r3, #2]
      }
    }
    key++;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	3301      	adds	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
  while(key < this->count)
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <Button_Update+0x288>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	7bfa      	ldrb	r2, [r7, #15]
 8000646:	429a      	cmp	r2, r3
 8000648:	f4ff aec8 	bcc.w	80003dc <Button_Update+0xc>
  }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000a8 	.word	0x200000a8

0800065c <HAL_IRDA_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	if (huart->Instance == hirda1.Instance) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <HAL_IRDA_RxCpltCallback+0xac>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d120      	bne.n	80006b2 <HAL_IRDA_RxCpltCallback+0x56>
		if (memcmp(buff_a, code_false, code_len) == 0) {
 8000670:	2301      	movs	r3, #1
 8000672:	461a      	mov	r2, r3
 8000674:	4925      	ldr	r1, [pc, #148]	; (800070c <HAL_IRDA_RxCpltCallback+0xb0>)
 8000676:	4826      	ldr	r0, [pc, #152]	; (8000710 <HAL_IRDA_RxCpltCallback+0xb4>)
 8000678:	f006 fe0d 	bl	8007296 <memcmp>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d103      	bne.n	800068a <HAL_IRDA_RxCpltCallback+0x2e>
			 a = false;
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <HAL_IRDA_RxCpltCallback+0xb8>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e00b      	b.n	80006a2 <HAL_IRDA_RxCpltCallback+0x46>
		} else if(memcmp(buff_a, code_true, code_len) == 0) {
 800068a:	2301      	movs	r3, #1
 800068c:	461a      	mov	r2, r3
 800068e:	4922      	ldr	r1, [pc, #136]	; (8000718 <HAL_IRDA_RxCpltCallback+0xbc>)
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <HAL_IRDA_RxCpltCallback+0xb4>)
 8000692:	f006 fe00 	bl	8007296 <memcmp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <HAL_IRDA_RxCpltCallback+0x46>
			 a = true;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <HAL_IRDA_RxCpltCallback+0xb8>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
		}
		HAL_IRDA_Receive_IT(&hirda1, buff_a, code_len);
 80006a2:	2301      	movs	r3, #1
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	461a      	mov	r2, r3
 80006a8:	4919      	ldr	r1, [pc, #100]	; (8000710 <HAL_IRDA_RxCpltCallback+0xb4>)
 80006aa:	4817      	ldr	r0, [pc, #92]	; (8000708 <HAL_IRDA_RxCpltCallback+0xac>)
 80006ac:	f002 fe37 	bl	800331e <HAL_IRDA_Receive_IT>
		} else if(memcmp(buff_a, code_true, code_len) == 0) {
			 b = true;
		}
		HAL_IRDA_Receive_IT(&hirda2, buff_b, code_len);
	}
}
 80006b0:	e025      	b.n	80006fe <HAL_IRDA_RxCpltCallback+0xa2>
	} else if (huart->Instance == hirda2.Instance) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_IRDA_RxCpltCallback+0xc0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d11f      	bne.n	80006fe <HAL_IRDA_RxCpltCallback+0xa2>
		if (memcmp(buff_b, code_false, code_len) == 0) {
 80006be:	2301      	movs	r3, #1
 80006c0:	461a      	mov	r2, r3
 80006c2:	4912      	ldr	r1, [pc, #72]	; (800070c <HAL_IRDA_RxCpltCallback+0xb0>)
 80006c4:	4816      	ldr	r0, [pc, #88]	; (8000720 <HAL_IRDA_RxCpltCallback+0xc4>)
 80006c6:	f006 fde6 	bl	8007296 <memcmp>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d103      	bne.n	80006d8 <HAL_IRDA_RxCpltCallback+0x7c>
			 b = false;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_IRDA_RxCpltCallback+0xc8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e00b      	b.n	80006f0 <HAL_IRDA_RxCpltCallback+0x94>
		} else if(memcmp(buff_a, code_true, code_len) == 0) {
 80006d8:	2301      	movs	r3, #1
 80006da:	461a      	mov	r2, r3
 80006dc:	490e      	ldr	r1, [pc, #56]	; (8000718 <HAL_IRDA_RxCpltCallback+0xbc>)
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <HAL_IRDA_RxCpltCallback+0xb4>)
 80006e0:	f006 fdd9 	bl	8007296 <memcmp>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <HAL_IRDA_RxCpltCallback+0x94>
			 b = true;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_IRDA_RxCpltCallback+0xc8>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
		HAL_IRDA_Receive_IT(&hirda2, buff_b, code_len);
 80006f0:	2301      	movs	r3, #1
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	490a      	ldr	r1, [pc, #40]	; (8000720 <HAL_IRDA_RxCpltCallback+0xc4>)
 80006f8:	4808      	ldr	r0, [pc, #32]	; (800071c <HAL_IRDA_RxCpltCallback+0xc0>)
 80006fa:	f002 fe10 	bl	800331e <HAL_IRDA_Receive_IT>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000024c 	.word	0x2000024c
 800070c:	080091ac 	.word	0x080091ac
 8000710:	2000001c 	.word	0x2000001c
 8000714:	2000039c 	.word	0x2000039c
 8000718:	080091b0 	.word	0x080091b0
 800071c:	20000294 	.word	0x20000294
 8000720:	20000020 	.word	0x20000020
 8000724:	2000039d 	.word	0x2000039d

08000728 <transmit>:

void transmit(bool c) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	if (c) {
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d007      	beq.n	8000748 <transmit+0x20>
		HAL_IRDA_Transmit(&hirda3, code_true, code_len, 100);
 8000738:	2301      	movs	r3, #1
 800073a:	b29a      	uxth	r2, r3
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <transmit+0x38>)
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <transmit+0x3c>)
 8000742:	f002 fd60 	bl	8003206 <HAL_IRDA_Transmit>
	} else {
		HAL_IRDA_Transmit(&hirda3, code_false, code_len, 100);
	}
}
 8000746:	e006      	b.n	8000756 <transmit+0x2e>
		HAL_IRDA_Transmit(&hirda3, code_false, code_len, 100);
 8000748:	2301      	movs	r3, #1
 800074a:	b29a      	uxth	r2, r3
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	4906      	ldr	r1, [pc, #24]	; (8000768 <transmit+0x40>)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <transmit+0x3c>)
 8000752:	f002 fd58 	bl	8003206 <HAL_IRDA_Transmit>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	080091b0 	.word	0x080091b0
 8000764:	200002dc 	.word	0x200002dc
 8000768:	080091ac 	.word	0x080091ac

0800076c <process>:

void process(enum Mode mode, bool a, bool b) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	460b      	mov	r3, r1
 8000778:	71bb      	strb	r3, [r7, #6]
 800077a:	4613      	mov	r3, r2
 800077c:	717b      	strb	r3, [r7, #5]
	bool result = false;
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]

	switch(mode) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b0c      	cmp	r3, #12
 8000786:	f200 80a2 	bhi.w	80008ce <process+0x162>
 800078a:	a201      	add	r2, pc, #4	; (adr r2, 8000790 <process+0x24>)
 800078c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000790:	080007c5 	.word	0x080007c5
 8000794:	080007cb 	.word	0x080007cb
 8000798:	080007d1 	.word	0x080007d1
 800079c:	080007ef 	.word	0x080007ef
 80007a0:	0800080d 	.word	0x0800080d
 80007a4:	0800082b 	.word	0x0800082b
 80007a8:	08000849 	.word	0x08000849
 80007ac:	08000873 	.word	0x08000873
 80007b0:	0800089d 	.word	0x0800089d
 80007b4:	080008ad 	.word	0x080008ad
 80007b8:	080008bd 	.word	0x080008bd
 80007bc:	080008c3 	.word	0x080008c3
 80007c0:	080008c9 	.word	0x080008c9
		case MODE_TRUE:
			result = true;
 80007c4:	2301      	movs	r3, #1
 80007c6:	73fb      	strb	r3, [r7, #15]
			break;
 80007c8:	e081      	b.n	80008ce <process+0x162>
		case MODE_FALSE:
			result = false;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
			break;
 80007ce:	e07e      	b.n	80008ce <process+0x162>
		case MODE_AND:
			result = a && b;
 80007d0:	79bb      	ldrb	r3, [r7, #6]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <process+0x74>
 80007d6:	797b      	ldrb	r3, [r7, #5]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <process+0x74>
 80007dc:	2301      	movs	r3, #1
 80007de:	e000      	b.n	80007e2 <process+0x76>
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]
			break;
 80007ec:	e06f      	b.n	80008ce <process+0x162>
		case MODE_OR:
			result = a || b;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <process+0x8e>
 80007f4:	797b      	ldrb	r3, [r7, #5]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <process+0x92>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <process+0x94>
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
			break;
 800080a:	e060      	b.n	80008ce <process+0x162>
		case MODE_NOTA:
			result = !a;
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	2b00      	cmp	r3, #0
 8000810:	bf14      	ite	ne
 8000812:	2301      	movne	r3, #1
 8000814:	2300      	moveq	r3, #0
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f083 0301 	eor.w	r3, r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
			break;
 8000828:	e051      	b.n	80008ce <process+0x162>
		case MODE_NOTB:
			result = !b;
 800082a:	797b      	ldrb	r3, [r7, #5]
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
			break;
 8000846:	e042      	b.n	80008ce <process+0x162>
		case MODE_NAND:
			result = !(a && b);
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	f083 0301 	eor.w	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d105      	bne.n	8000860 <process+0xf4>
 8000854:	797b      	ldrb	r3, [r7, #5]
 8000856:	f083 0301 	eor.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <process+0xf8>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <process+0xfa>
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	73fb      	strb	r3, [r7, #15]
			break;
 8000870:	e02d      	b.n	80008ce <process+0x162>
		case MODE_NOR:
			result = !(a || b);
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	f083 0301 	eor.w	r3, r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d007      	beq.n	800088e <process+0x122>
 800087e:	797b      	ldrb	r3, [r7, #5]
 8000880:	f083 0301 	eor.w	r3, r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <process+0x122>
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <process+0x124>
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]
			break;
 800089a:	e018      	b.n	80008ce <process+0x162>
		case MODE_XOR:
			result = a != b;
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	797b      	ldrb	r3, [r7, #5]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	bf14      	ite	ne
 80008a4:	2301      	movne	r3, #1
 80008a6:	2300      	moveq	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
			break;
 80008aa:	e010      	b.n	80008ce <process+0x162>
		case MODE_EQ:
			result = a == b;
 80008ac:	79ba      	ldrb	r2, [r7, #6]
 80008ae:	797b      	ldrb	r3, [r7, #5]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	bf0c      	ite	eq
 80008b4:	2301      	moveq	r3, #1
 80008b6:	2300      	movne	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]
			break;
 80008ba:	e008      	b.n	80008ce <process+0x162>
		case MODE_A:
			result = a;
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	73fb      	strb	r3, [r7, #15]
			break;
 80008c0:	e005      	b.n	80008ce <process+0x162>
		case MODE_B:
			result = b;
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	73fb      	strb	r3, [r7, #15]
			break;
 80008c6:	e002      	b.n	80008ce <process+0x162>
		case MODE_END:
			result = false;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
			break;
 80008cc:	bf00      	nop
	}

	current = result;
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <process+0x178>)
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	7013      	strb	r3, [r2, #0]
	transmit(result);
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff26 	bl	8000728 <transmit>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000039e 	.word	0x2000039e

080008e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim1.Instance) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d102      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x1a>
	  Button_Update();
 80008fc:	f7ff fd68 	bl	80003d0 <Button_Update>
  } else if(htim->Instance == htim2.Instance){
	  process(mode, a, b);
  }
}
 8000900:	e00e      	b.n	8000920 <HAL_TIM_PeriodElapsedCallback+0x38>
  } else if(htim->Instance == htim2.Instance){
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	429a      	cmp	r2, r3
 800090c:	d108      	bne.n	8000920 <HAL_TIM_PeriodElapsedCallback+0x38>
	  process(mode, a, b);
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000914:	7811      	ldrb	r1, [r2, #0]
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000918:	7812      	ldrb	r2, [r2, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff26 	bl	800076c <process>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200001b4 	.word	0x200001b4
 800092c:	20000200 	.word	0x20000200
 8000930:	2000039f 	.word	0x2000039f
 8000934:	2000039c 	.word	0x2000039c
 8000938:	2000039d 	.word	0x2000039d

0800093c <Button_ShortRelease>:

void Button_ShortRelease(uint8_t btnCode) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	switch(btnCode) {
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d831      	bhi.n	80009b0 <Button_ShortRelease+0x74>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <Button_ShortRelease+0x18>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	080009af 	.word	0x080009af
 8000958:	08000965 	.word	0x08000965
 800095c:	08000983 	.word	0x08000983
 8000960:	0800098b 	.word	0x0800098b
		case 0:
			break;
		case 1:
			if (mode == 0) {
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <Button_ShortRelease+0x80>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <Button_ShortRelease+0x38>
				mode = MODE_END - 1;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <Button_ShortRelease+0x80>)
 800096e:	220b      	movs	r2, #11
 8000970:	701a      	strb	r2, [r3, #0]
			} else {
				mode = mode - 1;
			}
			break;
 8000972:	e01d      	b.n	80009b0 <Button_ShortRelease+0x74>
				mode = mode - 1;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <Button_ShortRelease+0x80>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3b01      	subs	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <Button_ShortRelease+0x80>)
 800097e:	701a      	strb	r2, [r3, #0]
			break;
 8000980:	e016      	b.n	80009b0 <Button_ShortRelease+0x74>
		case 2:
			mode = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <Button_ShortRelease+0x80>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
			break;
 8000988:	e012      	b.n	80009b0 <Button_ShortRelease+0x74>
		case 3:
			mode = (mode + 1) % MODE_END;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <Button_ShortRelease+0x80>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <Button_ShortRelease+0x84>)
 8000992:	fb83 1302 	smull	r1, r3, r3, r2
 8000996:	1059      	asrs	r1, r3, #1
 8000998:	17d3      	asrs	r3, r2, #31
 800099a:	1ac9      	subs	r1, r1, r3
 800099c:	460b      	mov	r3, r1
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	440b      	add	r3, r1
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	1ad1      	subs	r1, r2, r3
 80009a6:	b2ca      	uxtb	r2, r1
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <Button_ShortRelease+0x80>)
 80009aa:	701a      	strb	r2, [r3, #0]
			break;
 80009ac:	e000      	b.n	80009b0 <Button_ShortRelease+0x74>
			break;
 80009ae:	bf00      	nop
	}
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	2000039f 	.word	0x2000039f
 80009c0:	2aaaaaab 	.word	0x2aaaaaab

080009c4 <Button_LongPress>:

void Button_LongPress(uint8_t btnCode) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <Button_LongRelease>:

void Button_LongRelease(uint8_t btnCode) {
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <write_mode>:

void write_mode(enum Mode mode) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af04      	add	r7, sp, #16
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	switch(mode) {
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b0c      	cmp	r3, #12
 80009fe:	f200 80d2 	bhi.w	8000ba6 <write_mode+0x1b6>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <write_mode+0x18>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a3d 	.word	0x08000a3d
 8000a0c:	08000a5b 	.word	0x08000a5b
 8000a10:	08000a79 	.word	0x08000a79
 8000a14:	08000a97 	.word	0x08000a97
 8000a18:	08000ab5 	.word	0x08000ab5
 8000a1c:	08000ad3 	.word	0x08000ad3
 8000a20:	08000af1 	.word	0x08000af1
 8000a24:	08000b0f 	.word	0x08000b0f
 8000a28:	08000b2d 	.word	0x08000b2d
 8000a2c:	08000b4b 	.word	0x08000b4b
 8000a30:	08000b69 	.word	0x08000b69
 8000a34:	08000b87 	.word	0x08000b87
 8000a38:	08000ba5 	.word	0x08000ba5
		case MODE_TRUE:
			ST7735_WriteString(40, 30, "True ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000a3c:	4b5c      	ldr	r3, [pc, #368]	; (8000bb0 <write_mode+0x1c0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	9202      	str	r2, [sp, #8]
 8000a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a46:	9201      	str	r2, [sp, #4]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	9200      	str	r2, [sp, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a59      	ldr	r2, [pc, #356]	; (8000bb4 <write_mode+0x1c4>)
 8000a50:	211e      	movs	r1, #30
 8000a52:	2028      	movs	r0, #40	; 0x28
 8000a54:	f000 fec9 	bl	80017ea <ST7735_WriteString>
			break;
 8000a58:	e0a5      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_FALSE:
			ST7735_WriteString(40, 30, "False", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000a5a:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <write_mode+0x1c0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	9202      	str	r2, [sp, #8]
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	9201      	str	r2, [sp, #4]
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a52      	ldr	r2, [pc, #328]	; (8000bb8 <write_mode+0x1c8>)
 8000a6e:	211e      	movs	r1, #30
 8000a70:	2028      	movs	r0, #40	; 0x28
 8000a72:	f000 feba 	bl	80017ea <ST7735_WriteString>
			break;
 8000a76:	e096      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_AND:
			ST7735_WriteString(40, 30, "And  ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000a78:	4b4d      	ldr	r3, [pc, #308]	; (8000bb0 <write_mode+0x1c0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	9202      	str	r2, [sp, #8]
 8000a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a82:	9201      	str	r2, [sp, #4]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	9200      	str	r2, [sp, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a4c      	ldr	r2, [pc, #304]	; (8000bbc <write_mode+0x1cc>)
 8000a8c:	211e      	movs	r1, #30
 8000a8e:	2028      	movs	r0, #40	; 0x28
 8000a90:	f000 feab 	bl	80017ea <ST7735_WriteString>
			break;
 8000a94:	e087      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_OR:
			ST7735_WriteString(40, 30, "Or   ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000a96:	4b46      	ldr	r3, [pc, #280]	; (8000bb0 <write_mode+0x1c0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	9202      	str	r2, [sp, #8]
 8000a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa0:	9201      	str	r2, [sp, #4]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	9200      	str	r2, [sp, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a45      	ldr	r2, [pc, #276]	; (8000bc0 <write_mode+0x1d0>)
 8000aaa:	211e      	movs	r1, #30
 8000aac:	2028      	movs	r0, #40	; 0x28
 8000aae:	f000 fe9c 	bl	80017ea <ST7735_WriteString>
			break;
 8000ab2:	e078      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_NOTA:
			ST7735_WriteString(40, 30, "Not A", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000ab4:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <write_mode+0x1c0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	9202      	str	r2, [sp, #8]
 8000aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000abe:	9201      	str	r2, [sp, #4]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	9200      	str	r2, [sp, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a3f      	ldr	r2, [pc, #252]	; (8000bc4 <write_mode+0x1d4>)
 8000ac8:	211e      	movs	r1, #30
 8000aca:	2028      	movs	r0, #40	; 0x28
 8000acc:	f000 fe8d 	bl	80017ea <ST7735_WriteString>
			break;
 8000ad0:	e069      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_NOTB:
			ST7735_WriteString(40, 30, "Not B", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000ad2:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <write_mode+0x1c0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	9202      	str	r2, [sp, #8]
 8000ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	9200      	str	r2, [sp, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a38      	ldr	r2, [pc, #224]	; (8000bc8 <write_mode+0x1d8>)
 8000ae6:	211e      	movs	r1, #30
 8000ae8:	2028      	movs	r0, #40	; 0x28
 8000aea:	f000 fe7e 	bl	80017ea <ST7735_WriteString>
			break;
 8000aee:	e05a      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_NAND:
			ST7735_WriteString(40, 30, "Nand ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <write_mode+0x1c0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	9202      	str	r2, [sp, #8]
 8000af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afa:	9201      	str	r2, [sp, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	9200      	str	r2, [sp, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <write_mode+0x1dc>)
 8000b04:	211e      	movs	r1, #30
 8000b06:	2028      	movs	r0, #40	; 0x28
 8000b08:	f000 fe6f 	bl	80017ea <ST7735_WriteString>
			break;
 8000b0c:	e04b      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_NOR:
			ST7735_WriteString(40, 30, "Nor  ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <write_mode+0x1c0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	9202      	str	r2, [sp, #8]
 8000b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	9200      	str	r2, [sp, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a2b      	ldr	r2, [pc, #172]	; (8000bd0 <write_mode+0x1e0>)
 8000b22:	211e      	movs	r1, #30
 8000b24:	2028      	movs	r0, #40	; 0x28
 8000b26:	f000 fe60 	bl	80017ea <ST7735_WriteString>
			break;
 8000b2a:	e03c      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_XOR:
			ST7735_WriteString(40, 30, "Xor  ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <write_mode+0x1c0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	9202      	str	r2, [sp, #8]
 8000b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b36:	9201      	str	r2, [sp, #4]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	9200      	str	r2, [sp, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <write_mode+0x1e4>)
 8000b40:	211e      	movs	r1, #30
 8000b42:	2028      	movs	r0, #40	; 0x28
 8000b44:	f000 fe51 	bl	80017ea <ST7735_WriteString>
			break;
 8000b48:	e02d      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_EQ:
			ST7735_WriteString(40, 30, "Eq   ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <write_mode+0x1c0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	9202      	str	r2, [sp, #8]
 8000b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	9200      	str	r2, [sp, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <write_mode+0x1e8>)
 8000b5e:	211e      	movs	r1, #30
 8000b60:	2028      	movs	r0, #40	; 0x28
 8000b62:	f000 fe42 	bl	80017ea <ST7735_WriteString>
			break;
 8000b66:	e01e      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_A:
			ST7735_WriteString(40, 30, "A    ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <write_mode+0x1c0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	9202      	str	r2, [sp, #8]
 8000b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b72:	9201      	str	r2, [sp, #4]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	9200      	str	r2, [sp, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <write_mode+0x1ec>)
 8000b7c:	211e      	movs	r1, #30
 8000b7e:	2028      	movs	r0, #40	; 0x28
 8000b80:	f000 fe33 	bl	80017ea <ST7735_WriteString>
			break;
 8000b84:	e00f      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_B:
			ST7735_WriteString(40, 30, "B    ", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <write_mode+0x1c0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	9202      	str	r2, [sp, #8]
 8000b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b90:	9201      	str	r2, [sp, #4]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	9200      	str	r2, [sp, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <write_mode+0x1f0>)
 8000b9a:	211e      	movs	r1, #30
 8000b9c:	2028      	movs	r0, #40	; 0x28
 8000b9e:	f000 fe24 	bl	80017ea <ST7735_WriteString>
			break;
 8000ba2:	e000      	b.n	8000ba6 <write_mode+0x1b6>
		case MODE_END:
			break;
 8000ba4:	bf00      	nop
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	08007dd0 	.word	0x08007dd0
 8000bb8:	08007dd8 	.word	0x08007dd8
 8000bbc:	08007de0 	.word	0x08007de0
 8000bc0:	08007de8 	.word	0x08007de8
 8000bc4:	08007df0 	.word	0x08007df0
 8000bc8:	08007df8 	.word	0x08007df8
 8000bcc:	08007e00 	.word	0x08007e00
 8000bd0:	08007e08 	.word	0x08007e08
 8000bd4:	08007e10 	.word	0x08007e10
 8000bd8:	08007e18 	.word	0x08007e18
 8000bdc:	08007e20 	.word	0x08007e20
 8000be0:	08007e28 	.word	0x08007e28

08000be4 <ReadSwitch>:

uint8_t ReadSwitch(const GPIO_TypeDef *port, const uint32_t pin) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	return !HAL_GPIO_ReadPin(port, pin);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f002 fa87 	bl	8003108 <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf0c      	ite	eq
 8000c00:	2301      	moveq	r3, #1
 8000c02:	2300      	movne	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b09c      	sub	sp, #112	; 0x70
 8000c14:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000c16:	4ba3      	ldr	r3, [pc, #652]	; (8000ea4 <main+0x294>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f006 fa40 	bl	80070a4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c24:	f001 fb78 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c28:	f000 f966 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2c:	f000 fb90 	bl	8001350 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000c30:	f000 f9d0 	bl	8000fd4 <MX_GPDMA1_Init>
  MX_GPDMA2_Init();
 8000c34:	f000 f9ee 	bl	8001014 <MX_GPDMA2_Init>
  MX_MEMORYMAP_Init();
 8000c38:	f000 fa0c 	bl	8001054 <MX_MEMORYMAP_Init>
  MX_USART3_IRDA_Init();
 8000c3c:	f000 fb5e 	bl	80012fc <MX_USART3_IRDA_Init>
  MX_SPI1_Init();
 8000c40:	f000 fa10 	bl	8001064 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c44:	f000 fa64 	bl	8001110 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c48:	f000 fab6 	bl	80011b8 <MX_TIM2_Init>
  MX_USART1_IRDA_Init();
 8000c4c:	f000 fb02 	bl	8001254 <MX_USART1_IRDA_Init>
  MX_USART2_IRDA_Init();
 8000c50:	f000 fb2a 	bl	80012a8 <MX_USART2_IRDA_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8000c54:	f000 fd38 	bl	80016c8 <ST7735_Init>
	ST7735_InvertColors(false);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fea6 	bl	80019aa <ST7735_InvertColors>
  //
  btn_instance_t btn_inst[4] = {
 8000c5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c62:	f36f 0301 	bfc	r3, #0, #2
 8000c66:	f887 3020 	strb.w	r3, [r7, #32]
 8000c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6e:	f36f 0383 	bfc	r3, #2, #2
 8000c72:	f887 3020 	strb.w	r3, [r7, #32]
 8000c76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c7a:	f36f 1304 	bfc	r3, #4, #1
 8000c7e:	f887 3020 	strb.w	r3, [r7, #32]
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000c88:	2300      	movs	r3, #0
 8000c8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000c90:	4b85      	ldr	r3, [pc, #532]	; (8000ea8 <main+0x298>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c96:	2304      	movs	r3, #4
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c9e:	f36f 0301 	bfc	r3, #0, #2
 8000ca2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000ca6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000caa:	f36f 0383 	bfc	r3, #2, #2
 8000cae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000cb2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cb6:	f36f 1304 	bfc	r3, #4, #1
 8000cba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	867b      	strh	r3, [r7, #50]	; 0x32
 8000cc8:	2300      	movs	r3, #0
 8000cca:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000ccc:	4b77      	ldr	r3, [pc, #476]	; (8000eac <main+0x29c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cd8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000cdc:	f36f 0301 	bfc	r3, #0, #2
 8000ce0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000ce4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ce8:	f36f 0383 	bfc	r3, #2, #2
 8000cec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000cf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000cf4:	f36f 1304 	bfc	r3, #4, #1
 8000cf8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000d0e:	4b68      	ldr	r3, [pc, #416]	; (8000eb0 <main+0x2a0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d1a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d1e:	f36f 0301 	bfc	r3, #0, #2
 8000d22:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8000d26:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d2a:	f36f 0383 	bfc	r3, #2, #2
 8000d2e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8000d32:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d36:	f36f 1304 	bfc	r3, #4, #1
 8000d3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000d50:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <main+0x2a4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d56:	2308      	movs	r3, #8
 8000d58:	65fb      	str	r3, [r7, #92]	; 0x5c
          BUTTON_DOWN_GPIO,
          BUTTON_DOWN_PIN,
      },
  };

  btn_init_t btn_init = {
 8000d5a:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <main+0x2a8>)
 8000d5c:	1d3c      	adds	r4, r7, #4
 8000d5e:	461d      	mov	r5, r3
 8000d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      Button_ShortRelease,
      Button_LongRelease,
      Button_LongPress,
  };

  Button_Init(&btn_init, btn_inst, 4);
 8000d6c:	f107 0120 	add.w	r1, r7, #32
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2204      	movs	r2, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa8f 	bl	8000298 <Button_Init>
  HAL_TIM_Base_Start_IT(&htim1);	// Timer for button
 8000d7a:	4850      	ldr	r0, [pc, #320]	; (8000ebc <main+0x2ac>)
 8000d7c:	f005 fb7a 	bl	8006474 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);	// Timer for IR transmit
 8000d80:	484f      	ldr	r0, [pc, #316]	; (8000ec0 <main+0x2b0>)
 8000d82:	f005 fb77 	bl	8006474 <HAL_TIM_Base_Start_IT>
  ST7735_FillScreenFast(ST7735_BLACK);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 fdfe 	bl	8001988 <ST7735_FillScreenFast>
  HAL_GPIO_WritePin(LED_GPIO, LED_PIN, RESET);
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <main+0x2b4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d94:	2200      	movs	r2, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 f9ce 	bl	8003138 <HAL_GPIO_WritePin>
  HAL_IRDA_Receive_IT(&hirda1, buff_a, code_len);
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	4949      	ldr	r1, [pc, #292]	; (8000ec8 <main+0x2b8>)
 8000da4:	4849      	ldr	r0, [pc, #292]	; (8000ecc <main+0x2bc>)
 8000da6:	f002 faba 	bl	800331e <HAL_IRDA_Receive_IT>
  HAL_IRDA_Receive_IT(&hirda2, buff_b, code_len);
 8000daa:	2301      	movs	r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	4947      	ldr	r1, [pc, #284]	; (8000ed0 <main+0x2c0>)
 8000db2:	4848      	ldr	r0, [pc, #288]	; (8000ed4 <main+0x2c4>)
 8000db4:	f002 fab3 	bl	800331e <HAL_IRDA_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (a) {
 8000db8:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <main+0x2c8>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00e      	beq.n	8000dde <main+0x1ce>
//    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
    	ST7735_WriteString(5, 5, "1", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000dc0:	4b46      	ldr	r3, [pc, #280]	; (8000edc <main+0x2cc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	9202      	str	r2, [sp, #8]
 8000dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dca:	9201      	str	r2, [sp, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <main+0x2d0>)
 8000dd4:	2105      	movs	r1, #5
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 fd07 	bl	80017ea <ST7735_WriteString>
 8000ddc:	e00d      	b.n	8000dfa <main+0x1ea>
    } else {
//    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
    	ST7735_WriteString(5, 5, "0", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000dde:	4b3f      	ldr	r3, [pc, #252]	; (8000edc <main+0x2cc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	9202      	str	r2, [sp, #8]
 8000de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de8:	9201      	str	r2, [sp, #4]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	9200      	str	r2, [sp, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a3c      	ldr	r2, [pc, #240]	; (8000ee4 <main+0x2d4>)
 8000df2:	2105      	movs	r1, #5
 8000df4:	2005      	movs	r0, #5
 8000df6:	f000 fcf8 	bl	80017ea <ST7735_WriteString>
    }

    if (b) {
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <main+0x2d8>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00e      	beq.n	8000e20 <main+0x210>
//    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
    	ST7735_WriteString(5, 49, "1", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000e02:	4b36      	ldr	r3, [pc, #216]	; (8000edc <main+0x2cc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	9202      	str	r2, [sp, #8]
 8000e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e0c:	9201      	str	r2, [sp, #4]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	9200      	str	r2, [sp, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <main+0x2d0>)
 8000e16:	2131      	movs	r1, #49	; 0x31
 8000e18:	2005      	movs	r0, #5
 8000e1a:	f000 fce6 	bl	80017ea <ST7735_WriteString>
 8000e1e:	e00d      	b.n	8000e3c <main+0x22c>
    } else {
//    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
    	ST7735_WriteString(5, 49, "0", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <main+0x2cc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	9202      	str	r2, [sp, #8]
 8000e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2a:	9201      	str	r2, [sp, #4]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a2c      	ldr	r2, [pc, #176]	; (8000ee4 <main+0x2d4>)
 8000e34:	2131      	movs	r1, #49	; 0x31
 8000e36:	2005      	movs	r0, #5
 8000e38:	f000 fcd7 	bl	80017ea <ST7735_WriteString>
    }

    if (current) {
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <main+0x2dc>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00e      	beq.n	8000e62 <main+0x252>
//    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
    	ST7735_WriteString(139, 30, "1", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <main+0x2cc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	9202      	str	r2, [sp, #8]
 8000e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <main+0x2d0>)
 8000e58:	211e      	movs	r1, #30
 8000e5a:	208b      	movs	r0, #139	; 0x8b
 8000e5c:	f000 fcc5 	bl	80017ea <ST7735_WriteString>
 8000e60:	e00d      	b.n	8000e7e <main+0x26e>
    } else {
//    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
    	ST7735_WriteString(139, 30, "0", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <main+0x2cc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	9202      	str	r2, [sp, #8]
 8000e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e6c:	9201      	str	r2, [sp, #4]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	9200      	str	r2, [sp, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <main+0x2d4>)
 8000e76:	211e      	movs	r1, #30
 8000e78:	208b      	movs	r0, #139	; 0x8b
 8000e7a:	f000 fcb6 	bl	80017ea <ST7735_WriteString>
    }
    write_mode(mode);
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <main+0x2e0>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fdb4 	bl	80009f0 <write_mode>
    printf("%d, %d\r\n", mode, current);
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <main+0x2e0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <main+0x2dc>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <main+0x2e4>)
 8000e96:	f006 f8f3 	bl	8007080 <iprintf>
    HAL_Delay(1000);
 8000e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9e:	f001 fab7 	bl	8002410 <HAL_Delay>
    if (a) {
 8000ea2:	e789      	b.n	8000db8 <main+0x1a8>
 8000ea4:	20000088 	.word	0x20000088
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	20000010 	.word	0x20000010
 8000eb4:	20000014 	.word	0x20000014
 8000eb8:	08007e44 	.word	0x08007e44
 8000ebc:	200001b4 	.word	0x200001b4
 8000ec0:	20000200 	.word	0x20000200
 8000ec4:	20000018 	.word	0x20000018
 8000ec8:	2000001c 	.word	0x2000001c
 8000ecc:	2000024c 	.word	0x2000024c
 8000ed0:	20000020 	.word	0x20000020
 8000ed4:	20000294 	.word	0x20000294
 8000ed8:	2000039c 	.word	0x2000039c
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	08007e30 	.word	0x08007e30
 8000ee4:	08007e34 	.word	0x08007e34
 8000ee8:	2000039d 	.word	0x2000039d
 8000eec:	2000039e 	.word	0x2000039e
 8000ef0:	2000039f 	.word	0x2000039f
 8000ef4:	08007e38 	.word	0x08007e38

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09c      	sub	sp, #112	; 0x70
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	2250      	movs	r2, #80	; 0x50
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 f9d5 	bl	80072b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
 8000f1c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <SystemClock_Config+0xd8>)
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	4a2b      	ldr	r2, [pc, #172]	; (8000fd0 <SystemClock_Config+0xd8>)
 8000f24:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f28:	6113      	str	r3, [r2, #16]
 8000f2a:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <SystemClock_Config+0xd8>)
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f36:	bf00      	nop
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <SystemClock_Config+0xd8>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d1f9      	bne.n	8000f38 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 8000f44:	2312      	movs	r3, #18
 8000f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000f62:	2302      	movs	r3, #2
 8000f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fe9c 	bl	8003cc8 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f96:	f000 fa7c 	bl	8001492 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	231f      	movs	r3, #31
 8000f9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fabd 	bl	8004538 <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fc4:	f000 fa65 	bl	8001492 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3770      	adds	r7, #112	; 0x70
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	44020800 	.word	0x44020800

08000fd4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <MX_GPDMA1_Init+0x3c>)
 8000fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <MX_GPDMA1_Init+0x3c>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_GPDMA1_Init+0x3c>)
 8000fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2022      	movs	r0, #34	; 0x22
 8000ffe:	f001 fb06 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 8001002:	2022      	movs	r0, #34	; 0x22
 8001004:	f001 fb1d 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	44020c00 	.word	0x44020c00

08001014 <MX_GPDMA2_Init>:
  * @brief GPDMA2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Init 0 */

  /* USER CODE END GPDMA2_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA2_CLK_ENABLE();
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_GPDMA2_Init+0x3c>)
 800101c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <MX_GPDMA2_Init+0x3c>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_GPDMA2_Init+0x3c>)
 800102c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /* GPDMA2 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA2_Channel7_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2061      	movs	r0, #97	; 0x61
 800103e:	f001 fae6 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA2_Channel7_IRQn);
 8001042:	2061      	movs	r0, #97	; 0x61
 8001044:	f001 fafd 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA2_Init 1 */
  /* USER CODE BEGIN GPDMA2_Init 2 */

  /* USER CODE END GPDMA2_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	44020c00 	.word	0x44020c00

08001054 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <MX_SPI1_Init+0xa4>)
 800106a:	4a28      	ldr	r2, [pc, #160]	; (800110c <MX_SPI1_Init+0xa8>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <MX_SPI1_Init+0xa4>)
 8001070:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001074:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_SPI1_Init+0xa4>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_SPI1_Init+0xa4>)
 800107e:	2207      	movs	r2, #7
 8001080:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_SPI1_Init+0xa4>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_SPI1_Init+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_SPI1_Init+0xa4>)
 8001090:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001094:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_SPI1_Init+0xa4>)
 8001098:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800109c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010b2:	2207      	movs	r2, #7
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_SPI1_Init+0xa4>)
 80010f6:	f004 fd71 	bl	8005bdc <HAL_SPI_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001100:	f000 f9c7 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200000ac 	.word	0x200000ac
 800110c:	40013000 	.word	0x40013000

08001110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001130:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <MX_TIM1_Init+0xa4>)
 8001132:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001136:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800113a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_TIM1_Init+0xa0>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001144:	220a      	movs	r2, #10
 8001146:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_TIM1_Init+0xa0>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_TIM1_Init+0xa0>)
 800115c:	f005 f933 	bl	80063c6 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001166:	f000 f994 	bl	8001492 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001178:	f005 fb1a 	bl	80067b0 <HAL_TIM_ConfigClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001182:	f000 f986 	bl	8001492 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_TIM1_Init+0xa0>)
 8001198:	f005 fd46 	bl	8006c28 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011a2:	f000 f976 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001b4 	.word	0x200001b4
 80011b4:	40012c00 	.word	0x40012c00

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_TIM2_Init+0x98>)
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_TIM2_Init+0x98>)
 80011e0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80011e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_TIM2_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_TIM2_Init+0x98>)
 80011ee:	2264      	movs	r2, #100	; 0x64
 80011f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_TIM2_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM2_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fe:	4814      	ldr	r0, [pc, #80]	; (8001250 <MX_TIM2_Init+0x98>)
 8001200:	f005 f8e1 	bl	80063c6 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800120a:	f000 f942 	bl	8001492 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_TIM2_Init+0x98>)
 800121c:	f005 fac8 	bl	80067b0 <HAL_TIM_ConfigClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001226:	f000 f934 	bl	8001492 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_TIM2_Init+0x98>)
 8001238:	f005 fcf6 	bl	8006c28 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001242:	f000 f926 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000200 	.word	0x20000200

08001254 <MX_USART1_IRDA_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_IRDA_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_USART1_IRDA_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 2400;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 8001260:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001264:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 8001274:	220c      	movs	r2, #12
 8001276:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 10;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 800127a:	220a      	movs	r2, #10
 800127c:	751a      	strb	r2, [r3, #20]
  hirda1.Init.PowerMode = IRDA_POWERMODE_NORMAL;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	82da      	strh	r2, [r3, #22]
  hirda1.Init.ClockPrescaler = IRDA_PRESCALER_DIV1;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USART1_IRDA_Init+0x4c>)
 800128c:	f001 ff6c 	bl	8003168 <HAL_IRDA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART1_IRDA_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 f8fc 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000024c 	.word	0x2000024c
 80012a4:	40013800 	.word	0x40013800

080012a8 <MX_USART2_IRDA_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_IRDA_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  hirda2.Instance = USART2;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_USART2_IRDA_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  hirda2.Init.BaudRate = 2400;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012b4:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80012b8:	605a      	str	r2, [r3, #4]
  hirda2.Init.WordLength = IRDA_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hirda2.Init.Parity = IRDA_PARITY_NONE;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hirda2.Init.Mode = IRDA_MODE_TX_RX;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012c8:	220c      	movs	r2, #12
 80012ca:	611a      	str	r2, [r3, #16]
  hirda2.Init.Prescaler = 10;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012ce:	220a      	movs	r2, #10
 80012d0:	751a      	strb	r2, [r3, #20]
  hirda2.Init.PowerMode = IRDA_POWERMODE_NORMAL;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	82da      	strh	r2, [r3, #22]
  hirda2.Init.ClockPrescaler = IRDA_PRESCALER_DIV1;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda2) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART2_IRDA_Init+0x4c>)
 80012e0:	f001 ff42 	bl	8003168 <HAL_IRDA_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART2_IRDA_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 f8d2 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000294 	.word	0x20000294
 80012f8:	40004400 	.word	0x40004400

080012fc <MX_USART3_IRDA_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_IRDA_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  hirda3.Instance = USART3;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART3_IRDA_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  hirda3.Init.BaudRate = 2400;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 8001308:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800130c:	605a      	str	r2, [r3, #4]
  hirda3.Init.WordLength = IRDA_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hirda3.Init.Parity = IRDA_PARITY_NONE;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hirda3.Init.Mode = IRDA_MODE_TX_RX;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 800131c:	220c      	movs	r2, #12
 800131e:	611a      	str	r2, [r3, #16]
  hirda3.Init.Prescaler = 10;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 8001322:	220a      	movs	r2, #10
 8001324:	751a      	strb	r2, [r3, #20]
  hirda3.Init.PowerMode = IRDA_POWERMODE_NORMAL;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	82da      	strh	r2, [r3, #22]
  hirda3.Init.ClockPrescaler = IRDA_PRESCALER_DIV1;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda3) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART3_IRDA_Init+0x4c>)
 8001334:	f001 ff18 	bl	8003168 <HAL_IRDA_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART3_IRDA_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 f8a8 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200002dc 	.word	0x200002dc
 800134c:	40004800 	.word	0x40004800

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b40      	ldr	r3, [pc, #256]	; (8001468 <MX_GPIO_Init+0x118>)
 8001368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800136c:	4a3e      	ldr	r2, [pc, #248]	; (8001468 <MX_GPIO_Init+0x118>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <MX_GPIO_Init+0x118>)
 8001378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001384:	4b38      	ldr	r3, [pc, #224]	; (8001468 <MX_GPIO_Init+0x118>)
 8001386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800138a:	4a37      	ldr	r2, [pc, #220]	; (8001468 <MX_GPIO_Init+0x118>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001390:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <MX_GPIO_Init+0x118>)
 8001396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <MX_GPIO_Init+0x118>)
 80013a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a8:	4a2f      	ldr	r2, [pc, #188]	; (8001468 <MX_GPIO_Init+0x118>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <MX_GPIO_Init+0x118>)
 80013b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <MX_GPIO_Init+0x118>)
 80013c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c6:	4a28      	ldr	r2, [pc, #160]	; (8001468 <MX_GPIO_Init+0x118>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <MX_GPIO_Init+0x118>)
 80013d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2183      	movs	r1, #131	; 0x83
 80013e2:	4822      	ldr	r0, [pc, #136]	; (800146c <MX_GPIO_Init+0x11c>)
 80013e4:	f001 fea8 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ee:	4820      	ldr	r0, [pc, #128]	; (8001470 <MX_GPIO_Init+0x120>)
 80013f0:	f001 fea2 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC3 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_10;
 80013f4:	f242 4308 	movw	r3, #9224	; 0x2408
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4818      	ldr	r0, [pc, #96]	; (800146c <MX_GPIO_Init+0x11c>)
 800140a:	f001 fd2b 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 800140e:	2383      	movs	r3, #131	; 0x83
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <MX_GPIO_Init+0x11c>)
 8001426:	f001 fd1d 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800142a:	2304      	movs	r3, #4
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_GPIO_Init+0x124>)
 800143e:	f001 fd11 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_GPIO_Init+0x120>)
 800145c:	f001 fd02 	bl	8002e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	44020c00 	.word	0x44020c00
 800146c:	42020800 	.word	0x42020800
 8001470:	42020000 	.word	0x42020000
 8001474:	42020400 	.word	0x42020400

08001478 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
//  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
  return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001496:	b672      	cpsid	i
}
 8001498:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800149a:	e7fe      	b.n	800149a <Error_Handler+0x8>

0800149c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2101      	movs	r1, #1
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <ST7735_Select+0x14>)
 80014a6:	f001 fe47 	bl	8003138 <HAL_GPIO_WritePin>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	42020800 	.word	0x42020800

080014b4 <ST7735_Unselect>:

void ST7735_Unselect() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2101      	movs	r1, #1
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <ST7735_Unselect+0x14>)
 80014be:	f001 fe3b 	bl	8003138 <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	42020800 	.word	0x42020800

080014cc <ST7735_Reset>:

static void ST7735_Reset() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <ST7735_Reset+0x24>)
 80014d6:	f001 fe2f 	bl	8003138 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80014da:	2005      	movs	r0, #5
 80014dc:	f000 ff98 	bl	8002410 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <ST7735_Reset+0x24>)
 80014e6:	f001 fe27 	bl	8003138 <HAL_GPIO_WritePin>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	42020800 	.word	0x42020800

080014f4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2102      	movs	r1, #2
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <ST7735_WriteCommand+0x2c>)
 8001504:	f001 fe18 	bl	8003138 <HAL_GPIO_WritePin>
//    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001508:	1df9      	adds	r1, r7, #7
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	2201      	movs	r2, #1
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <ST7735_WriteCommand+0x30>)
 8001512:	f004 fc5f 	bl	8005dd4 <HAL_SPI_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	42020800 	.word	0x42020800
 8001524:	200000ac 	.word	0x200000ac

08001528 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2102      	movs	r1, #2
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <ST7735_WriteData+0x2c>)
 8001538:	f001 fdfe 	bl	8003138 <HAL_GPIO_WritePin>
//    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b29a      	uxth	r2, r3
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <ST7735_WriteData+0x30>)
 8001548:	f004 fc44 	bl	8005dd4 <HAL_SPI_Transmit>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	42020800 	.word	0x42020800
 8001558:	200000ac 	.word	0x200000ac

0800155c <ST7735_WriteCommand_Sync>:

static void ST7735_WriteCommand_Sync(uint8_t cmd) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2102      	movs	r1, #2
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <ST7735_WriteCommand_Sync+0x2c>)
 800156c:	f001 fde4 	bl	8003138 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001570:	1df9      	adds	r1, r7, #7
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	2201      	movs	r2, #1
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <ST7735_WriteCommand_Sync+0x30>)
 800157a:	f004 fc2b 	bl	8005dd4 <HAL_SPI_Transmit>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	42020800 	.word	0x42020800
 800158c:	200000ac 	.word	0x200000ac

08001590 <ST7735_WriteData_Sync>:

static void ST7735_WriteData_Sync(uint8_t* buff, size_t buff_size) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	2102      	movs	r1, #2
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <ST7735_WriteData_Sync+0x2c>)
 80015a0:	f001 fdca 	bl	8003138 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <ST7735_WriteData_Sync+0x30>)
 80015b0:	f004 fc10 	bl	8005dd4 <HAL_SPI_Transmit>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	42020800 	.word	0x42020800
 80015c0:	200000ac 	.word	0x200000ac

080015c4 <ST7735_ExecuteCommandList>:


static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;
    numCommands = *addr++;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80015d6:	e034      	b.n	8001642 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand_Sync(cmd);
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ffb9 	bl	800155c <ST7735_WriteCommand_Sync>

        numArgs = *addr++;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80015f4:	7abb      	ldrb	r3, [r7, #10]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80015fe:	7abb      	ldrb	r3, [r7, #10]
 8001600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001604:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001606:	7abb      	ldrb	r3, [r7, #10]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData_Sync((uint8_t*)addr, numArgs);
 800160c:	7abb      	ldrb	r3, [r7, #10]
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ffbd 	bl	8001590 <ST7735_WriteData_Sync>
            addr += numArgs;
 8001616:	7abb      	ldrb	r3, [r7, #10]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800161e:	89bb      	ldrh	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00e      	beq.n	8001642 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800162e:	89bb      	ldrh	r3, [r7, #12]
 8001630:	2bff      	cmp	r3, #255	; 0xff
 8001632:	d102      	bne.n	800163a <ST7735_ExecuteCommandList+0x76>
 8001634:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001638:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800163a:	89bb      	ldrh	r3, [r7, #12]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fee7 	bl	8002410 <HAL_Delay>
    while(numCommands--) {
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	1e5a      	subs	r2, r3, #1
 8001646:	73fa      	strb	r2, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1c5      	bne.n	80015d8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001656:	b590      	push	{r4, r7, lr}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	4604      	mov	r4, r0
 800165e:	4608      	mov	r0, r1
 8001660:	4611      	mov	r1, r2
 8001662:	461a      	mov	r2, r3
 8001664:	4623      	mov	r3, r4
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4603      	mov	r3, r0
 800166a:	71bb      	strb	r3, [r7, #6]
 800166c:	460b      	mov	r3, r1
 800166e:	717b      	strb	r3, [r7, #5]
 8001670:	4613      	mov	r3, r2
 8001672:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001674:	202a      	movs	r0, #42	; 0x2a
 8001676:	f7ff ff3d 	bl	80014f4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800167a:	2300      	movs	r3, #0
 800167c:	733b      	strb	r3, [r7, #12]
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	737b      	strb	r3, [r7, #13]
 8001682:	2300      	movs	r3, #0
 8001684:	73bb      	strb	r3, [r7, #14]
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	2104      	movs	r1, #4
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff49 	bl	8001528 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001696:	202b      	movs	r0, #43	; 0x2b
 8001698:	f7ff ff2c 	bl	80014f4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	3318      	adds	r3, #24
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80016a4:	793b      	ldrb	r3, [r7, #4]
 80016a6:	3318      	adds	r3, #24
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2104      	movs	r1, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff38 	bl	8001528 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80016b8:	202c      	movs	r0, #44	; 0x2c
 80016ba:	f7ff ff1b 	bl	80014f4 <ST7735_WriteCommand>
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd90      	pop	{r4, r7, pc}
	...

080016c8 <ST7735_Init>:

void ST7735_Init() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    ST7735_Select();
 80016cc:	f7ff fee6 	bl	800149c <ST7735_Select>
    ST7735_Reset();
 80016d0:	f7ff fefc 	bl	80014cc <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <ST7735_Init+0x28>)
 80016d6:	f7ff ff75 	bl	80015c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <ST7735_Init+0x2c>)
 80016dc:	f7ff ff72 	bl	80015c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <ST7735_Init+0x30>)
 80016e2:	f7ff ff6f 	bl	80015c4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80016e6:	f7ff fee5 	bl	80014b4 <ST7735_Unselect>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	080091b4 	.word	0x080091b4
 80016f4:	080091f0 	.word	0x080091f0
 80016f8:	08009200 	.word	0x08009200

080016fc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80016fc:	b082      	sub	sp, #8
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b089      	sub	sp, #36	; 0x24
 8001702:	af00      	add	r7, sp, #0
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	460b      	mov	r3, r1
 800170c:	80bb      	strh	r3, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	b2d8      	uxtb	r0, r3
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	b2d9      	uxtb	r1, r3
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b2dc      	uxtb	r4, r3
 800172a:	88bb      	ldrh	r3, [r7, #4]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001732:	4413      	add	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4622      	mov	r2, r4
 800173c:	f7ff ff8b 	bl	8001656 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	e043      	b.n	80017ce <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	3b20      	subs	r3, #32
 800174c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4619      	mov	r1, r3
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	440b      	add	r3, r1
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	e029      	b.n	80017bc <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00e      	beq.n	8001796 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001778:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	b29b      	uxth	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	743b      	strb	r3, [r7, #16]
 8001782:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001784:	b2db      	uxtb	r3, r3
 8001786:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2102      	movs	r1, #2
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff feca 	bl	8001528 <ST7735_WriteData>
 8001794:	e00f      	b.n	80017b6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001796:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	b29b      	uxth	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	733b      	strb	r3, [r7, #12]
 80017a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2102      	movs	r1, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff feb9 	bl	8001528 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80017c0:	461a      	mov	r2, r3
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d3cf      	bcc.n	8001768 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80017d2:	461a      	mov	r2, r3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d3b5      	bcc.n	8001746 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3724      	adds	r7, #36	; 0x24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017e6:	b002      	add	sp, #8
 80017e8:	4770      	bx	lr

080017ea <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80017ea:	b082      	sub	sp, #8
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af04      	add	r7, sp, #16
 80017f2:	603a      	str	r2, [r7, #0]
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
 80017fa:	460b      	mov	r3, r1
 80017fc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80017fe:	f7ff fe4d 	bl	800149c <ST7735_Select>

    while(*str) {
 8001802:	e02d      	b.n	8001860 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	7d3a      	ldrb	r2, [r7, #20]
 8001808:	4413      	add	r3, r2
 800180a:	2b9f      	cmp	r3, #159	; 0x9f
 800180c:	dd13      	ble.n	8001836 <ST7735_WriteString+0x4c>
            x = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001812:	7d7b      	ldrb	r3, [r7, #21]
 8001814:	b29a      	uxth	r2, r3
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	7d7a      	ldrb	r2, [r7, #21]
 8001820:	4413      	add	r3, r2
 8001822:	2b4f      	cmp	r3, #79	; 0x4f
 8001824:	dc21      	bgt.n	800186a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b20      	cmp	r3, #32
 800182c:	d103      	bne.n	8001836 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	603b      	str	r3, [r7, #0]
                continue;
 8001834:	e014      	b.n	8001860 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	88b9      	ldrh	r1, [r7, #4]
 800183c:	88f8      	ldrh	r0, [r7, #6]
 800183e:	8c3b      	ldrh	r3, [r7, #32]
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	8bbb      	ldrh	r3, [r7, #28]
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f7ff ff56 	bl	80016fc <ST7735_WriteChar>
        x += font.width;
 8001850:	7d3b      	ldrb	r3, [r7, #20]
 8001852:	b29a      	uxth	r2, r3
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4413      	add	r3, r2
 8001858:	80fb      	strh	r3, [r7, #6]
        str++;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1cd      	bne.n	8001804 <ST7735_WriteString+0x1a>
 8001868:	e000      	b.n	800186c <ST7735_WriteString+0x82>
                break;
 800186a:	bf00      	nop
    }

    ST7735_Unselect();
 800186c:	f7ff fe22 	bl	80014b4 <ST7735_Unselect>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800187a:	b002      	add	sp, #8
 800187c:	4770      	bx	lr
	...

08001880 <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	4604      	mov	r4, r0
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	461a      	mov	r2, r3
 800188e:	4623      	mov	r3, r4
 8001890:	80fb      	strh	r3, [r7, #6]
 8001892:	4603      	mov	r3, r0
 8001894:	80bb      	strh	r3, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	807b      	strh	r3, [r7, #2]
 800189a:	4613      	mov	r3, r2
 800189c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	2b9f      	cmp	r3, #159	; 0x9f
 80018a2:	d869      	bhi.n	8001978 <ST7735_FillRectangleFast+0xf8>
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	2b4f      	cmp	r3, #79	; 0x4f
 80018a8:	d866      	bhi.n	8001978 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80018aa:	88fa      	ldrh	r2, [r7, #6]
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	4413      	add	r3, r2
 80018b0:	2ba0      	cmp	r3, #160	; 0xa0
 80018b2:	dd03      	ble.n	80018bc <ST7735_FillRectangleFast+0x3c>
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80018ba:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80018bc:	88ba      	ldrh	r2, [r7, #4]
 80018be:	883b      	ldrh	r3, [r7, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	2b50      	cmp	r3, #80	; 0x50
 80018c4:	dd03      	ble.n	80018ce <ST7735_FillRectangleFast+0x4e>
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80018cc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80018ce:	f7ff fde5 	bl	800149c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	b2d8      	uxtb	r0, r3
 80018d6:	88bb      	ldrh	r3, [r7, #4]
 80018d8:	b2d9      	uxtb	r1, r3
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b2dc      	uxtb	r4, r3
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	883b      	ldrh	r3, [r7, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4622      	mov	r2, r4
 80018fc:	f7ff feab 	bl	8001656 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001900:	8c3b      	ldrh	r3, [r7, #32]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b29b      	uxth	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	723b      	strb	r3, [r7, #8]
 800190a:	8c3b      	ldrh	r3, [r7, #32]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4618      	mov	r0, r3
 8001916:	f005 fa35 	bl	8006d84 <malloc>
 800191a:	4603      	mov	r3, r0
 800191c:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800191e:	2300      	movs	r3, #0
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	e008      	b.n	8001936 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	893a      	ldrh	r2, [r7, #8]
 800192e:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	3301      	adds	r3, #1
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	88fa      	ldrh	r2, [r7, #6]
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	429a      	cmp	r2, r3
 800193c:	d3f2      	bcc.n	8001924 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2102      	movs	r1, #2
 8001942:	480f      	ldr	r0, [pc, #60]	; (8001980 <ST7735_FillRectangleFast+0x100>)
 8001944:	f001 fbf8 	bl	8003138 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001948:	883b      	ldrh	r3, [r7, #0]
 800194a:	80bb      	strh	r3, [r7, #4]
 800194c:	e00b      	b.n	8001966 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	480a      	ldr	r0, [pc, #40]	; (8001984 <ST7735_FillRectangleFast+0x104>)
 800195c:	f004 fa3a 	bl	8005dd4 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	88bb      	ldrh	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <ST7735_FillRectangleFast+0xce>

    free(line);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f005 fa11 	bl	8006d94 <free>
    ST7735_Unselect();
 8001972:	f7ff fd9f 	bl	80014b4 <ST7735_Unselect>
 8001976:	e000      	b.n	800197a <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001978:	bf00      	nop
}
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	42020800 	.word	0x42020800
 8001984:	200000ac 	.word	0x200000ac

08001988 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2350      	movs	r3, #80	; 0x50
 8001998:	22a0      	movs	r2, #160	; 0xa0
 800199a:	2100      	movs	r1, #0
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff ff6f 	bl	8001880 <ST7735_FillRectangleFast>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <ST7735_InvertColors>:
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ST7735_Unselect();
}

void ST7735_InvertColors(bool invert) {
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80019b4:	f7ff fd72 	bl	800149c <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <ST7735_InvertColors+0x18>
 80019be:	2321      	movs	r3, #33	; 0x21
 80019c0:	e000      	b.n	80019c4 <ST7735_InvertColors+0x1a>
 80019c2:	2320      	movs	r3, #32
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fd95 	bl	80014f4 <ST7735_WriteCommand>
    ST7735_Unselect();
 80019ca:	f7ff fd73 	bl	80014b4 <ST7735_Unselect>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0ac      	sub	sp, #176	; 0xb0
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	2288      	movs	r2, #136	; 0x88
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 fc56 	bl	80072b6 <memset>
  if(hspi->Instance==SPI1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_SPI_MspInit+0x174>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	f040 809d 	bne.w	8001b50 <HAL_SPI_MspInit+0x16c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001a16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001a22:	2300      	movs	r3, #0
 8001a24:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 f8b0 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001a36:	f7ff fd2c 	bl	8001492 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a3a:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <HAL_SPI_MspInit+0x178>)
 8001a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a40:	4a46      	ldr	r2, [pc, #280]	; (8001b5c <HAL_SPI_MspInit+0x178>)
 8001a42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a46:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a4a:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <HAL_SPI_MspInit+0x178>)
 8001a4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <HAL_SPI_MspInit+0x178>)
 8001a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <HAL_SPI_MspInit+0x178>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <HAL_SPI_MspInit+0x178>)
 8001a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA0     ------> SPI1_MISO
    PA2     ------> SPI1_SCK
    PA4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SPI1;
 8001a8e:	230c      	movs	r3, #12
 8001a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4831      	ldr	r0, [pc, #196]	; (8001b60 <HAL_SPI_MspInit+0x17c>)
 8001a9c:	f001 f9e2 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001aa0:	2314      	movs	r3, #20
 8001aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4826      	ldr	r0, [pc, #152]	; (8001b60 <HAL_SPI_MspInit+0x17c>)
 8001ac6:	f001 f9cd 	bl	8002e64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA2_Channel7.Instance = GPDMA2_Channel7;
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <HAL_SPI_MspInit+0x184>)
 8001ace:	601a      	str	r2, [r3, #0]
    handle_GPDMA2_Channel7.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	605a      	str	r2, [r3, #4]
    handle_GPDMA2_Channel7.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    handle_GPDMA2_Channel7.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae2:	60da      	str	r2, [r3, #12]
    handle_GPDMA2_Channel7.Init.SrcInc = DMA_SINC_FIXED;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
    handle_GPDMA2_Channel7.Init.DestInc = DMA_DINC_FIXED;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
    handle_GPDMA2_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
    handle_GPDMA2_Channel7.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
    handle_GPDMA2_Channel7.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
    handle_GPDMA2_Channel7.Init.SrcBurstLength = 1;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA2_Channel7.Init.DestBurstLength = 1;
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA2_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA2_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA2_Channel7.Init.Mode = DMA_NORMAL;
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA2_Channel7) != HAL_OK)
 8001b20:	4810      	ldr	r0, [pc, #64]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b22:	f000 fda9 	bl	8002678 <HAL_DMA_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001b2c:	f7ff fcb1 	bl	8001492 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA2_Channel7);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b3e:	2110      	movs	r1, #16
 8001b40:	4808      	ldr	r0, [pc, #32]	; (8001b64 <HAL_SPI_MspInit+0x180>)
 8001b42:	f000 fff6 	bl	8002b32 <HAL_DMA_ConfigChannelAttributes>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_SPI_MspInit+0x16c>
    {
      Error_Handler();
 8001b4c:	f7ff fca1 	bl	8001492 <Error_Handler>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b50:	bf00      	nop
 8001b52:	37b0      	adds	r7, #176	; 0xb0
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40013000 	.word	0x40013000
 8001b5c:	44020c00 	.word	0x44020c00
 8001b60:	42020000 	.word	0x42020000
 8001b64:	2000013c 	.word	0x2000013c
 8001b68:	400213d0 	.word	0x400213d0

08001b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <HAL_TIM_Base_MspInit+0xb4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12f      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_TIM_Base_MspInit+0xb8>)
 8001b80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b84:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <HAL_TIM_Base_MspInit+0xb8>)
 8001b86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b8a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001b8e:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_TIM_Base_MspInit+0xb8>)
 8001b90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2029      	movs	r0, #41	; 0x29
 8001ba2:	f000 fd34 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001ba6:	2029      	movs	r0, #41	; 0x29
 8001ba8:	f000 fd4b 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	202a      	movs	r0, #42	; 0x2a
 8001bb2:	f000 fd2c 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001bb6:	202a      	movs	r0, #42	; 0x2a
 8001bb8:	f000 fd43 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	202b      	movs	r0, #43	; 0x2b
 8001bc2:	f000 fd24 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001bc6:	202b      	movs	r0, #43	; 0x2b
 8001bc8:	f000 fd3b 	bl	8002642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	202c      	movs	r0, #44	; 0x2c
 8001bd2:	f000 fd1c 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bd6:	202c      	movs	r0, #44	; 0x2c
 8001bd8:	f000 fd33 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bdc:	e01b      	b.n	8001c16 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be6:	d116      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_TIM_Base_MspInit+0xb8>)
 8001bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bee:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_TIM_Base_MspInit+0xb8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_TIM_Base_MspInit+0xb8>)
 8001bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	202d      	movs	r0, #45	; 0x2d
 8001c0c:	f000 fcff 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c10:	202d      	movs	r0, #45	; 0x2d
 8001c12:	f000 fd16 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	44020c00 	.word	0x44020c00

08001c28 <HAL_IRDA_MspInit>:
* This function configures the hardware resources used in this example
* @param hirda: IRDA handle pointer
* @retval None
*/
void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b4      	sub	sp, #208	; 0xd0
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c44:	2288      	movs	r2, #136	; 0x88
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 fb34 	bl	80072b6 <memset>
  if(hirda->Instance==USART1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a76      	ldr	r2, [pc, #472]	; (8001e2c <HAL_IRDA_MspInit+0x204>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d172      	bne.n	8001d3e <HAL_IRDA_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c58:	f04f 0201 	mov.w	r2, #1
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c64:	2300      	movs	r3, #0
 8001c66:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 ff8f 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_IRDA_MspInit+0x54>
    {
      Error_Handler();
 8001c78:	f7ff fc0b 	bl	8001492 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c82:	4a6b      	ldr	r2, [pc, #428]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ca0:	4a63      	ldr	r2, [pc, #396]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001caa:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cbe:	4a5c      	ldr	r2, [pc, #368]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART1;
 8001cee:	2308      	movs	r3, #8
 8001cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	484e      	ldr	r0, [pc, #312]	; (8001e34 <HAL_IRDA_MspInit+0x20c>)
 8001cfc:	f001 f8b2 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d24:	4619      	mov	r1, r3
 8001d26:	4844      	ldr	r0, [pc, #272]	; (8001e38 <HAL_IRDA_MspInit+0x210>)
 8001d28:	f001 f89c 	bl	8002e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	203a      	movs	r0, #58	; 0x3a
 8001d32:	f000 fc6c 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d36:	203a      	movs	r0, #58	; 0x3a
 8001d38:	f000 fc83 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d3c:	e133      	b.n	8001fa6 <HAL_IRDA_MspInit+0x37e>
  else if(hirda->Instance==USART2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a3e      	ldr	r2, [pc, #248]	; (8001e3c <HAL_IRDA_MspInit+0x214>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d17b      	bne.n	8001e40 <HAL_IRDA_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d48:	f04f 0202 	mov.w	r2, #2
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 ff17 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_IRDA_MspInit+0x144>
      Error_Handler();
 8001d68:	f7ff fb93 	bl	8001492 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d72:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d90:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dae:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_IRDA_MspInit+0x208>)
 8001dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dde:	2307      	movs	r3, #7
 8001de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001de8:	4619      	mov	r1, r3
 8001dea:	4812      	ldr	r0, [pc, #72]	; (8001e34 <HAL_IRDA_MspInit+0x20c>)
 8001dec:	f001 f83a 	bl	8002e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_USART2;
 8001e08:	2309      	movs	r3, #9
 8001e0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e12:	4619      	mov	r1, r3
 8001e14:	4808      	ldr	r0, [pc, #32]	; (8001e38 <HAL_IRDA_MspInit+0x210>)
 8001e16:	f001 f825 	bl	8002e64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	203b      	movs	r0, #59	; 0x3b
 8001e20:	f000 fbf5 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e24:	203b      	movs	r0, #59	; 0x3b
 8001e26:	f000 fc0c 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 8001e2a:	e0bc      	b.n	8001fa6 <HAL_IRDA_MspInit+0x37e>
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	44020c00 	.word	0x44020c00
 8001e34:	42020000 	.word	0x42020000
 8001e38:	42020400 	.word	0x42020400
 8001e3c:	40004400 	.word	0x40004400
  else if(hirda->Instance==USART3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5a      	ldr	r2, [pc, #360]	; (8001fb0 <HAL_IRDA_MspInit+0x388>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f040 80ad 	bne.w	8001fa6 <HAL_IRDA_MspInit+0x37e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e4c:	f04f 0204 	mov.w	r2, #4
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fe95 	bl	8004b90 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_IRDA_MspInit+0x248>
      Error_Handler();
 8001e6c:	f7ff fb11 	bl	8001492 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e76:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e94:	4a47      	ldr	r2, [pc, #284]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e9e:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb2:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_IRDA_MspInit+0x38c>)
 8001ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ece:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4831      	ldr	r0, [pc, #196]	; (8001fb8 <HAL_IRDA_MspInit+0x390>)
 8001ef2:	f000 ffb7 	bl	8002e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8001f10:	230d      	movs	r3, #13
 8001f12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4827      	ldr	r0, [pc, #156]	; (8001fbc <HAL_IRDA_MspInit+0x394>)
 8001f1e:	f000 ffa1 	bl	8002e64 <HAL_GPIO_Init>
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 8001f22:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_IRDA_MspInit+0x39c>)
 8001f26:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_USART3_TX;
 8001f28:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f2a:	221a      	movs	r2, #26
 8001f2c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel7.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel7.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f34:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f3a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel7.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f3e:	2208      	movs	r2, #8
 8001f40:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel7.Init.DestInc = DMA_DINC_FIXED;
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel7.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel7.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001f54:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8001f78:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f7a:	f000 fb7d 	bl	8002678 <HAL_DMA_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_IRDA_MspInit+0x360>
      Error_Handler();
 8001f84:	f7ff fa85 	bl	8001492 <Error_Handler>
    __HAL_LINKDMA(hirda, hdmatx, handle_GPDMA1_Channel7);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001f94:	2110      	movs	r1, #16
 8001f96:	480a      	ldr	r0, [pc, #40]	; (8001fc0 <HAL_IRDA_MspInit+0x398>)
 8001f98:	f000 fdcb 	bl	8002b32 <HAL_DMA_ConfigChannelAttributes>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_IRDA_MspInit+0x37e>
      Error_Handler();
 8001fa2:	f7ff fa76 	bl	8001492 <Error_Handler>
}
 8001fa6:	bf00      	nop
 8001fa8:	37d0      	adds	r7, #208	; 0xd0
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40004800 	.word	0x40004800
 8001fb4:	44020c00 	.word	0x44020c00
 8001fb8:	42020400 	.word	0x42020400
 8001fbc:	42020000 	.word	0x42020000
 8001fc0:	20000324 	.word	0x20000324
 8001fc4:	400203d0 	.word	0x400203d0

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <NMI_Handler+0x4>

08001fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <HardFault_Handler+0x4>

08001fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <MemManage_Handler+0x4>

08001fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002014:	f000 f9dc 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <GPDMA1_Channel7_IRQHandler+0x10>)
 8002022:	f000 fc0c 	bl	800283e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000324 	.word	0x20000324

08002030 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <TIM1_BRK_IRQHandler+0x10>)
 8002036:	f004 fa71 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200001b4 	.word	0x200001b4

08002044 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIM1_UP_IRQHandler+0x10>)
 800204a:	f004 fa67 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200001b4 	.word	0x200001b4

08002058 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <TIM1_TRG_COM_IRQHandler+0x10>)
 800205e:	f004 fa5d 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200001b4 	.word	0x200001b4

0800206c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM1_CC_IRQHandler+0x10>)
 8002072:	f004 fa53 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200001b4 	.word	0x200001b4

08002080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <TIM2_IRQHandler+0x10>)
 8002086:	f004 fa49 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000200 	.word	0x20000200

08002094 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_IRDA_IRQHandler(&hirda1);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <USART1_IRQHandler+0x10>)
 800209a:	f001 f9cd 	bl	8003438 <HAL_IRDA_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000024c 	.word	0x2000024c

080020a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_IRDA_IRQHandler(&hirda2);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <USART2_IRQHandler+0x10>)
 80020ae:	f001 f9c3 	bl	8003438 <HAL_IRDA_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000294 	.word	0x20000294

080020bc <GPDMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 7 global interrupt.
  */
void GPDMA2_Channel7_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel7_IRQn 0 */

  /* USER CODE END GPDMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel7);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <GPDMA2_Channel7_IRQHandler+0x10>)
 80020c2:	f000 fbbc 	bl	800283e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel7_IRQn 1 */

  /* USER CODE END GPDMA2_Channel7_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000013c 	.word	0x2000013c

080020d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
  }

  return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_close>:
  }
  return len;
}

int _close(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	605a      	str	r2, [r3, #4]
  return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_isatty>:

int _isatty(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f005 f8e6 	bl	8007374 <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20008000 	.word	0x20008000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	200003a0 	.word	0x200003a0
 80021dc:	200004f8 	.word	0x200004f8

080021e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <SystemInit+0xc8>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <SystemInit+0xc8>)
 80021ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <SystemInit+0xcc>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <SystemInit+0xcc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <SystemInit+0xcc>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <SystemInit+0xcc>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4927      	ldr	r1, [pc, #156]	; (80022ac <SystemInit+0xcc>)
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <SystemInit+0xd0>)
 8002210:	4013      	ands	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <SystemInit+0xcc>)
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <SystemInit+0xcc>)
 800221c:	2200      	movs	r2, #0
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <SystemInit+0xcc>)
 8002222:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <SystemInit+0xd4>)
 8002224:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <SystemInit+0xcc>)
 8002228:	2200      	movs	r2, #0
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800222c:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <SystemInit+0xcc>)
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <SystemInit+0xd4>)
 8002230:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <SystemInit+0xcc>)
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <SystemInit+0xcc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <SystemInit+0xcc>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <SystemInit+0xcc>)
 8002246:	2200      	movs	r2, #0
 8002248:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <SystemInit+0xc8>)
 800224c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002250:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <SystemInit+0xd8>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800225a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8002262:	d003      	beq.n	800226c <SystemInit+0x8c>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800226a:	d117      	bne.n	800229c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <SystemInit+0xd8>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <SystemInit+0xd8>)
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <SystemInit+0xdc>)
 800227c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <SystemInit+0xd8>)
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <SystemInit+0xe0>)
 8002282:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <SystemInit+0xd8>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <SystemInit+0xd8>)
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <SystemInit+0xd8>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <SystemInit+0xd8>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	61d3      	str	r3, [r2, #28]
  }
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00
 80022ac:	44020c00 	.word	0x44020c00
 80022b0:	fae2eae3 	.word	0xfae2eae3
 80022b4:	01010280 	.word	0x01010280
 80022b8:	40022000 	.word	0x40022000
 80022bc:	08192a3b 	.word	0x08192a3b
 80022c0:	4c5d6e7f 	.word	0x4c5d6e7f

080022c4 <Reset_Handler>:
  */

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	  ldr   sp, =_estack    /* set stack pointer */
 80022c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022ca:	e003      	b.n	80022d4 <LoopCopyDataInit>

080022cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022d2:	3104      	adds	r1, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022d4:	480b      	ldr	r0, [pc, #44]	; (8002304 <LoopForever+0xa>)
	ldr	r3, =_edata
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022dc:	d3f6      	bcc.n	80022cc <CopyDataInit>
	ldr	r2, =_sbss
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <LoopForever+0x12>)
	b	LoopFillZerobss
 80022e0:	e002      	b.n	80022e8 <LoopFillZerobss>

080022e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022e4:	f842 3b04 	str.w	r3, [r2], #4

080022e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <LoopForever+0x16>)
	cmp	r2, r3
 80022ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022ec:	d3f9      	bcc.n	80022e2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022ee:	f7ff ff77 	bl	80021e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f2:	f005 f845 	bl	8007380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022f6:	f7fe fc8b 	bl	8000c10 <main>

080022fa <LoopForever>:

LoopForever:
    b LoopForever
 80022fa:	e7fe      	b.n	80022fa <LoopForever>
Reset_Handler:	  ldr   sp, =_estack    /* set stack pointer */
 80022fc:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8002300:	08009298 	.word	0x08009298
	ldr	r0, =_sdata
 8002304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002308:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 800230c:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8002310:	200004f4 	.word	0x200004f4

08002314 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC1_IRQHandler>
	...

08002318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f000 f96b 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002322:	f002 fac1 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8002326:	4602      	mov	r2, r0
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_Init+0x40>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	490a      	ldr	r1, [pc, #40]	; (800235c <HAL_Init+0x44>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
 8002338:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_Init+0x48>)
 800233a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800233c:	200f      	movs	r0, #15
 800233e:	f000 f811 	bl	8002364 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e002      	b.n	8002352 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800234c:	f7ff fb43 	bl	80019d6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	44020c00 	.word	0x44020c00
 800235c:	0800922c 	.word	0x0800922c
 8002360:	20000024 	.word	0x20000024

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_InitTick+0x60>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e021      	b.n	80023bc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_InitTick+0x64>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_InitTick+0x60>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	fbb3 f3f1 	udiv	r3, r3, r1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f965 	bl	800265e <HAL_SYSTICK_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00e      	b.n	80023bc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d80a      	bhi.n	80023ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f000 f92f 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <HAL_InitTick+0x68>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	2000002c 	.word	0x2000002c
 80023c8:	20000024 	.word	0x20000024
 80023cc:	20000028 	.word	0x20000028

080023d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	2000002c 	.word	0x2000002c
 80023f4:	200003a4 	.word	0x200003a4

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200003a4 	.word	0x200003a4

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000002c 	.word	0x2000002c

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff40 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff90 	bl	800254c <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5f 	bl	80024f8 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff33 	bl	80024bc <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa4 	bl	80025b4 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff feba 	bl	80023f8 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e089      	b.n	80027a4 <HAL_DMA_Init+0x12c>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a43      	ldr	r2, [pc, #268]	; (80027ac <HAL_DMA_Init+0x134>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d049      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a42      	ldr	r2, [pc, #264]	; (80027b0 <HAL_DMA_Init+0x138>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d044      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <HAL_DMA_Init+0x13c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d03f      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3f      	ldr	r2, [pc, #252]	; (80027b8 <HAL_DMA_Init+0x140>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d03a      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a3d      	ldr	r2, [pc, #244]	; (80027bc <HAL_DMA_Init+0x144>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d035      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <HAL_DMA_Init+0x148>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d030      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <HAL_DMA_Init+0x14c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <HAL_DMA_Init+0x150>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d026      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a37      	ldr	r2, [pc, #220]	; (80027cc <HAL_DMA_Init+0x154>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d021      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a36      	ldr	r2, [pc, #216]	; (80027d0 <HAL_DMA_Init+0x158>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d01c      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a34      	ldr	r2, [pc, #208]	; (80027d4 <HAL_DMA_Init+0x15c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d017      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a33      	ldr	r2, [pc, #204]	; (80027d8 <HAL_DMA_Init+0x160>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d012      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_DMA_Init+0x164>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00d      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <HAL_DMA_Init+0x168>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d008      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2e      	ldr	r2, [pc, #184]	; (80027e4 <HAL_DMA_Init+0x16c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d003      	beq.n	8002736 <HAL_DMA_Init+0xbe>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <HAL_DMA_Init+0x170>)
 8002734:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0206 	orr.w	r2, r2, #6
 8002754:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002756:	e00f      	b.n	8002778 <HAL_DMA_Init+0x100>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002758:	f7ff fe4e 	bl	80023f8 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b05      	cmp	r3, #5
 8002764:	d908      	bls.n	8002778 <HAL_DMA_Init+0x100>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2210      	movs	r2, #16
 800276a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e015      	b.n	80027a4 <HAL_DMA_Init+0x12c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e8      	bne.n	8002758 <HAL_DMA_Init+0xe0>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fa10 	bl	8002bac <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40020050 	.word	0x40020050
 80027b0:	400200d0 	.word	0x400200d0
 80027b4:	40020150 	.word	0x40020150
 80027b8:	400201d0 	.word	0x400201d0
 80027bc:	40020250 	.word	0x40020250
 80027c0:	400202d0 	.word	0x400202d0
 80027c4:	40020350 	.word	0x40020350
 80027c8:	400203d0 	.word	0x400203d0
 80027cc:	40021050 	.word	0x40021050
 80027d0:	400210d0 	.word	0x400210d0
 80027d4:	40021150 	.word	0x40021150
 80027d8:	400211d0 	.word	0x400211d0
 80027dc:	40021250 	.word	0x40021250
 80027e0:	400212d0 	.word	0x400212d0
 80027e4:	40021350 	.word	0x40021350
 80027e8:	400213d0 	.word	0x400213d0

080027ec <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e019      	b.n	8002832 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e00e      	b.n	8002832 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2204      	movs	r2, #4
 8002818:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800284e:	f023 030f 	bic.w	r3, r3, #15
 8002852:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	3b50      	subs	r3, #80	; 0x50
 800285e:	09db      	lsrs	r3, r3, #7
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2201      	movs	r2, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8154 	beq.w	8002b26 <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d011      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d011      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d011      	beq.n	8002914 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002906:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	f043 0204 	orr.w	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d011      	beq.n	8002946 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002938:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f043 0208 	orr.w	r2, r3, #8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d059      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d052      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d13b      	bne.n	8002a26 <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029bc:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0202 	orr.w	r2, r2, #2
 80029cc:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2203      	movs	r2, #3
 80029e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80029e4:	e003      	b.n	80029ee <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fe:	2201      	movs	r2, #1
 8002a00:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8087 	beq.w	8002b2a <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
        }

        return;
 8002a24:	e081      	b.n	8002b2a <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2205      	movs	r2, #5
 8002a2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d039      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d032      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d116      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d111      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a86:	2201      	movs	r2, #1
 8002a88:	731a      	strb	r2, [r3, #12]
 8002a8a:	e008      	b.n	8002a9e <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002aa6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d031      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0202 	orr.w	r2, r2, #2
 8002ad6:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002aee:	e003      	b.n	8002af8 <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	2201      	movs	r2, #1
 8002b0a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
 8002b24:	e002      	b.n	8002b2c <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <HAL_DMA_IRQHandler+0x2ee>
        return;
 8002b2a:	bf00      	nop
    }
  }
}
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e02b      	b.n	8002b9e <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b4e:	f023 030f 	bic.w	r3, r3, #15
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	3b50      	subs	r3, #80	; 0x50
 8002b5e:	09db      	lsrs	r3, r3, #7
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2201      	movs	r2, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d012      	beq.n	8002b9c <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f003 0311 	and.w	r3, r3, #17
 8002b7c:	2b11      	cmp	r3, #17
 8002b7e:	d106      	bne.n	8002b8e <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	e006      	b.n	8002b9c <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a82      	ldr	r2, [pc, #520]	; (8002df4 <DMA_Init+0x248>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d04a      	beq.n	8002c86 <DMA_Init+0xda>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a80      	ldr	r2, [pc, #512]	; (8002df8 <DMA_Init+0x24c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d045      	beq.n	8002c86 <DMA_Init+0xda>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7f      	ldr	r2, [pc, #508]	; (8002dfc <DMA_Init+0x250>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d040      	beq.n	8002c86 <DMA_Init+0xda>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7d      	ldr	r2, [pc, #500]	; (8002e00 <DMA_Init+0x254>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d03b      	beq.n	8002c86 <DMA_Init+0xda>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7c      	ldr	r2, [pc, #496]	; (8002e04 <DMA_Init+0x258>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d036      	beq.n	8002c86 <DMA_Init+0xda>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <DMA_Init+0x25c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <DMA_Init+0xda>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a79      	ldr	r2, [pc, #484]	; (8002e0c <DMA_Init+0x260>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d02c      	beq.n	8002c86 <DMA_Init+0xda>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a77      	ldr	r2, [pc, #476]	; (8002e10 <DMA_Init+0x264>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d027      	beq.n	8002c86 <DMA_Init+0xda>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a76      	ldr	r2, [pc, #472]	; (8002e14 <DMA_Init+0x268>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <DMA_Init+0xda>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a74      	ldr	r2, [pc, #464]	; (8002e18 <DMA_Init+0x26c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01d      	beq.n	8002c86 <DMA_Init+0xda>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a73      	ldr	r2, [pc, #460]	; (8002e1c <DMA_Init+0x270>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d018      	beq.n	8002c86 <DMA_Init+0xda>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a71      	ldr	r2, [pc, #452]	; (8002e20 <DMA_Init+0x274>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <DMA_Init+0xda>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a70      	ldr	r2, [pc, #448]	; (8002e24 <DMA_Init+0x278>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <DMA_Init+0xda>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6e      	ldr	r2, [pc, #440]	; (8002e28 <DMA_Init+0x27c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <DMA_Init+0xda>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6d      	ldr	r2, [pc, #436]	; (8002e2c <DMA_Init+0x280>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <DMA_Init+0xda>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6b      	ldr	r2, [pc, #428]	; (8002e30 <DMA_Init+0x284>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <DMA_Init+0xde>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <DMA_Init+0xe0>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <DMA_Init+0x10a>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	051b      	lsls	r3, r3, #20
 8002c9c:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002ca0:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002cae:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* defined (DMA_CTR1_SSEC) */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d159      	bne.n	8002d90 <DMA_Init+0x1e4>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a44      	ldr	r2, [pc, #272]	; (8002df4 <DMA_Init+0x248>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d04a      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <DMA_Init+0x24c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d045      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a41      	ldr	r2, [pc, #260]	; (8002dfc <DMA_Init+0x250>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d040      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <DMA_Init+0x254>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d03b      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3e      	ldr	r2, [pc, #248]	; (8002e04 <DMA_Init+0x258>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d036      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a3d      	ldr	r2, [pc, #244]	; (8002e08 <DMA_Init+0x25c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d031      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <DMA_Init+0x260>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d02c      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a3a      	ldr	r2, [pc, #232]	; (8002e10 <DMA_Init+0x264>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d027      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a38      	ldr	r2, [pc, #224]	; (8002e14 <DMA_Init+0x268>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d022      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a37      	ldr	r2, [pc, #220]	; (8002e18 <DMA_Init+0x26c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d01d      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <DMA_Init+0x270>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d018      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <DMA_Init+0x274>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d013      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <DMA_Init+0x278>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00e      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <DMA_Init+0x27c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d009      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <DMA_Init+0x280>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d004      	beq.n	8002d7c <DMA_Init+0x1d0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2e      	ldr	r2, [pc, #184]	; (8002e30 <DMA_Init+0x284>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <DMA_Init+0x1d4>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <DMA_Init+0x1d6>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <DMA_Init+0x1f6>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e008      	b.n	8002da2 <DMA_Init+0x1f6>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d98:	d103      	bne.n	8002da2 <DMA_Init+0x1f6>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da0:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <DMA_Init+0x288>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	68f9      	ldr	r1, [r7, #12]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	649a      	str	r2, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <DMA_Init+0x260>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <DMA_Init+0x244>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <DMA_Init+0x264>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <DMA_Init+0x244>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <DMA_Init+0x280>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <DMA_Init+0x244>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <DMA_Init+0x284>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d123      	bne.n	8002e38 <DMA_Init+0x28c>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e022      	b.n	8002e3a <DMA_Init+0x28e>
 8002df4:	40020050 	.word	0x40020050
 8002df8:	400200d0 	.word	0x400200d0
 8002dfc:	40020150 	.word	0x40020150
 8002e00:	400201d0 	.word	0x400201d0
 8002e04:	40020250 	.word	0x40020250
 8002e08:	400202d0 	.word	0x400202d0
 8002e0c:	40020350 	.word	0x40020350
 8002e10:	400203d0 	.word	0x400203d0
 8002e14:	40021050 	.word	0x40021050
 8002e18:	400210d0 	.word	0x400210d0
 8002e1c:	40021150 	.word	0x40021150
 8002e20:	400211d0 	.word	0x400211d0
 8002e24:	40021250 	.word	0x40021250
 8002e28:	400212d0 	.word	0x400212d0
 8002e2c:	40021350 	.word	0x40021350
 8002e30:	400213d0 	.word	0x400213d0
 8002e34:	3cc02100 	.word	0x3cc02100
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <DMA_Init+0x2a2>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop

08002e64 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e72:	e136      	b.n	80030e2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8128 	beq.w	80030dc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x38>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b12      	cmp	r3, #18
 8002e9a:	d125      	bne.n	8002ee8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0203 	and.w	r2, r3, #3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d00b      	beq.n	8002f3c <HAL_GPIO_Init+0xd8>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d007      	beq.n	8002f3c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f30:	2b11      	cmp	r3, #17
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b12      	cmp	r3, #18
 8002f3a:	d130      	bne.n	8002f9e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4013      	ands	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f72:	2201      	movs	r2, #1
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0201 	and.w	r2, r3, #1
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d017      	beq.n	8002fd6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d07c      	beq.n	80030dc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002fe2:	4a47      	ldr	r2, [pc, #284]	; (8003100 <HAL_GPIO_Init+0x29c>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3318      	adds	r3, #24
 8002fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fee:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	220f      	movs	r2, #15
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4013      	ands	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0a9a      	lsrs	r2, r3, #10
 800300a:	4b3e      	ldr	r3, [pc, #248]	; (8003104 <HAL_GPIO_Init+0x2a0>)
 800300c:	4013      	ands	r3, r2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	f002 0203 	and.w	r2, r2, #3
 8003014:	00d2      	lsls	r2, r2, #3
 8003016:	4093      	lsls	r3, r2
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800301e:	4938      	ldr	r1, [pc, #224]	; (8003100 <HAL_GPIO_Init+0x29c>)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	3318      	adds	r3, #24
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800302c:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_GPIO_Init+0x29c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003050:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <HAL_GPIO_Init+0x29c>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003056:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_GPIO_Init+0x29c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4013      	ands	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800307a:	4a21      	ldr	r2, [pc, #132]	; (8003100 <HAL_GPIO_Init+0x29c>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <HAL_GPIO_Init+0x29c>)
 8003082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003086:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	43db      	mvns	r3, r3
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4013      	ands	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80030a6:	4a16      	ldr	r2, [pc, #88]	; (8003100 <HAL_GPIO_Init+0x29c>)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_GPIO_Init+0x29c>)
 80030b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_GPIO_Init+0x29c>)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	3301      	adds	r3, #1
 80030e0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f aec1 	bne.w	8002e74 <HAL_GPIO_Init+0x10>
  }
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	44022000 	.word	0x44022000
 8003104:	002f7f7f 	.word	0x002f7f7f

08003108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e001      	b.n	800312a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003148:	787b      	ldrb	r3, [r7, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003154:	e002      	b.n	800315c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003156:	887a      	ldrh	r2, [r7, #2]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_IRDA_Init>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e041      	b.n	80031fe <HAL_IRDA_Init+0x96>
  }

  /* Check the USART/UART associated to the IRDA handle */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_IRDA_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fd4c 	bl	8001c28 <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable the Peripheral to update the configuration registers */
  __HAL_IRDA_DISABLE(hirda);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

  /* Set the IRDA Communication parameters */
  if (IRDA_SetConfig(hirda) == HAL_ERROR)
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa60 	bl	800366c <IRDA_SetConfig>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_IRDA_Init+0x4e>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e023      	b.n	80031fe <HAL_IRDA_Init+0x96>
  }

  /* In IRDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80031c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0228 	bic.w	r2, r2, #40	; 0x28
 80031d4:	609a      	str	r2, [r3, #8]

  /* set the UART/USART in IRDA mode */
  hirda->Instance->CR3 |= USART_CR3_IREN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0202 	orr.w	r2, r2, #2
 80031e4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_IRDA_ENABLE(hirda);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving hirda->gState and hirda->RxState to Ready */
  return (IRDA_CheckIdleState(hirda));
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fbde 	bl	80039b8 <IRDA_CheckIdleState>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_IRDA_Transmit>:
  * @param Size Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Specify timeout value.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b08a      	sub	sp, #40	; 0x28
 800320a:	af02      	add	r7, sp, #8
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (hirda->gState == HAL_IRDA_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	2b20      	cmp	r3, #32
 800321c:	d17a      	bne.n	8003314 <HAL_IRDA_Transmit+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_IRDA_Transmit+0x24>
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_IRDA_Transmit+0x28>
    {
      return  HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e073      	b.n	8003316 <HAL_IRDA_Transmit+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(hirda);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_IRDA_Transmit+0x36>
 8003238:	2302      	movs	r3, #2
 800323a:	e06c      	b.n	8003316 <HAL_IRDA_Transmit+0x110>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2221      	movs	r2, #33	; 0x21
 800324e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003250:	f7ff f8d2 	bl	80023f8 <HAL_GetTick>
 8003254:	6178      	str	r0, [r7, #20]

    hirda->TxXferSize = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	841a      	strh	r2, [r3, #32]
    hirda->TxXferCount = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	88fa      	ldrh	r2, [r7, #6]
 8003260:	845a      	strh	r2, [r3, #34]	; 0x22

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326a:	d108      	bne.n	800327e <HAL_IRDA_Transmit+0x78>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_IRDA_Transmit+0x78>
    {
      pdata8bits  = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData; /* Derogation R.11.3 */
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e003      	b.n	8003286 <HAL_IRDA_Transmit+0x80>
    }
    else
    {
      pdata8bits  = pData;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
    }

    while (hirda->TxXferCount > 0U)
 8003286:	e02a      	b.n	80032de <HAL_IRDA_Transmit+0xd8>
    {
      hirda->TxXferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	845a      	strh	r2, [r3, #34]	; 0x22

      if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fbce 	bl	8003a42 <IRDA_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_IRDA_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e032      	b.n	8003316 <HAL_IRDA_Transmit+0x110>
      }
      if (pdata8bits == NULL)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <HAL_IRDA_Transmit+0xc8>
      {
        hirda->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	3302      	adds	r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e007      	b.n	80032de <HAL_IRDA_Transmit+0xd8>
      }
      else
      {
        hirda->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	3301      	adds	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
    while (hirda->TxXferCount > 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1cf      	bne.n	8003288 <HAL_IRDA_Transmit+0x82>
      }
    }

    if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2200      	movs	r2, #0
 80032f0:	2140      	movs	r1, #64	; 0x40
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fba5 	bl	8003a42 <IRDA_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_IRDA_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e009      	b.n	8003316 <HAL_IRDA_Transmit+0x110>
    }

    /* At end of Tx process, restore hirda->gState to Ready */
    hirda->gState = HAL_IRDA_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hirda);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_IRDA_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_IRDA_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	4613      	mov	r3, r2
 800332a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (hirda->RxState == HAL_IRDA_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	2b20      	cmp	r3, #32
 8003332:	d17a      	bne.n	800342a <HAL_IRDA_Receive_IT+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_IRDA_Receive_IT+0x22>
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_IRDA_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e073      	b.n	800342c <HAL_IRDA_Receive_IT+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(hirda);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_IRDA_Receive_IT+0x34>
 800334e:	2302      	movs	r3, #2
 8003350:	e06c      	b.n	800342c <HAL_IRDA_Receive_IT+0x10e>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    hirda->pRxBuffPtr = pData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
    hirda->RxXferSize = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
    hirda->RxXferCount = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Computation of the mask to apply to the RDR register
       of the UART associated to the IRDA */
    IRDA_MASK_COMPUTATION(hirda);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d10c      	bne.n	8003390 <HAL_IRDA_Receive_IT+0x72>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <HAL_IRDA_Receive_IT+0x6a>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003384:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003386:	e027      	b.n	80033d8 <HAL_IRDA_Receive_IT+0xba>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	22ff      	movs	r2, #255	; 0xff
 800338c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800338e:	e023      	b.n	80033d8 <HAL_IRDA_Receive_IT+0xba>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_IRDA_Receive_IT+0x92>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <HAL_IRDA_Receive_IT+0x8a>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	22ff      	movs	r2, #255	; 0xff
 80033a4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80033a6:	e017      	b.n	80033d8 <HAL_IRDA_Receive_IT+0xba>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	227f      	movs	r2, #127	; 0x7f
 80033ac:	859a      	strh	r2, [r3, #44]	; 0x2c
 80033ae:	e013      	b.n	80033d8 <HAL_IRDA_Receive_IT+0xba>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b8:	d10b      	bne.n	80033d2 <HAL_IRDA_Receive_IT+0xb4>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_IRDA_Receive_IT+0xac>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	227f      	movs	r2, #127	; 0x7f
 80033c6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80033c8:	e006      	b.n	80033d8 <HAL_IRDA_Receive_IT+0xba>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	223f      	movs	r2, #63	; 0x3f
 80033ce:	859a      	strh	r2, [r3, #44]	; 0x2c
 80033d0:	e002      	b.n	80033d8 <HAL_IRDA_Receive_IT+0xba>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	859a      	strh	r2, [r3, #44]	; 0x2c

    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
    hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2222      	movs	r2, #34	; 0x22
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hirda);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if (hirda->Init.Parity != IRDA_PARITY_NONE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_IRDA_Receive_IT+0xe8>
    {
      /* Enable the IRDA Parity Error and Data Register not empty Interrupts */
      SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e007      	b.n	8003416 <HAL_IRDA_Receive_IT+0xf8>
    }
    else
    {
      /* Enable the IRDA Data Register not empty Interrupts */
      SET_BIT(hirda->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0220 	orr.w	r2, r2, #32
 8003414:	601a      	str	r2, [r3, #0]
    }

    /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <HAL_IRDA_Receive_IT+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_IRDA_IRQHandler>:
  * @param hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(hirda->Instance->ISR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its;
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	617b      	str	r3, [r7, #20]
  if (errorflags == 0U)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_IRDA_IRQHandler+0x42>
  {
    /* IRDA in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_IRDA_IRQHandler+0x42>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_IRDA_IRQHandler+0x42>
    {
      IRDA_Receive_IT(hirda);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fbc4 	bl	8003c00 <IRDA_Receive_IT>
      return;
 8003478:	e0df      	b.n	800363a <HAL_IRDA_IRQHandler+0x202>
    }
  }

  /* If some errors occur */
  cr3its = READ_REG(hirda->Instance->CR3);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	613b      	str	r3, [r7, #16]
  if ((errorflags != 0U)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80bb 	beq.w	8003600 <HAL_IRDA_IRQHandler+0x1c8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_IRDA_IRQHandler+0x68>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80b0 	beq.w	8003600 <HAL_IRDA_IRQHandler+0x1c8>
  {
    /* IRDA parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_IRDA_IRQHandler+0x90>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_IRDA_IRQHandler+0x90>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_PEF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00e      	beq.n	80034f0 <HAL_IRDA_IRQHandler+0xb8>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_IRDA_IRQHandler+0xb8>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_FEF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2202      	movs	r2, #2
 80034e2:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <HAL_IRDA_IRQHandler+0xe0>
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d009      	beq.n	8003518 <HAL_IRDA_IRQHandler+0xe0>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_NEF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2204      	movs	r2, #4
 800350a:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0202 	orr.w	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d013      	beq.n	800354a <HAL_IRDA_IRQHandler+0x112>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f003 0320 	and.w	r3, r3, #32
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_IRDA_IRQHandler+0xfe>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_IRDA_IRQHandler+0x112>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_OREF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2208      	movs	r2, #8
 800353c:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f043 0208 	orr.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call IRDA Error Call back function if need be --------------------------*/
    if (hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	2b00      	cmp	r3, #0
 8003550:	d072      	beq.n	8003638 <HAL_IRDA_IRQHandler+0x200>
    {
      /* IRDA in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_IRDA_IRQHandler+0x134>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_IRDA_IRQHandler+0x134>
      {
        IRDA_Receive_IT(hirda);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fb4a 	bl	8003c00 <IRDA_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = hirda->ErrorCode;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d004      	beq.n	800358a <HAL_IRDA_IRQHandler+0x152>
          ((errorcode & HAL_IRDA_ERROR_ORE) != 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 8003586:	2b00      	cmp	r3, #0
 8003588:	d031      	beq.n	80035ee <HAL_IRDA_IRQHandler+0x1b6>
      {
        /* Blocking error : transfer is aborted
           Set the IRDA state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        IRDA_EndRxTransfer(hirda);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 faa1 	bl	8003ad2 <IRDA_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Disable the IRDA DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d123      	bne.n	80035e6 <HAL_IRDA_IRQHandler+0x1ae>
        {
          CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ac:	609a      	str	r2, [r3, #8]

          /* Abort the IRDA DMA Rx channel */
          if (hirda->hdmarx != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d013      	beq.n	80035de <HAL_IRDA_IRQHandler+0x1a6>
          {
            /* Set the IRDA DMA Abort callback :
               will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
            hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <HAL_IRDA_IRQHandler+0x208>)
 80035bc:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f912 	bl	80027ec <HAL_DMA_Abort_IT>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <HAL_IRDA_IRQHandler+0x1c4>
            {
              /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
              hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d8:	4610      	mov	r0, r2
 80035da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80035dc:	e00e      	b.n	80035fc <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
            /* Call registered user error callback */
            hirda->ErrorCallback(hirda);
#else
            /* Call legacy weak user error callback */
            HAL_IRDA_ErrorCallback(hirda);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f83a 	bl	8003658 <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80035e4:	e00a      	b.n	80035fc <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
          /* Call registered user error callback */
          hirda->ErrorCallback(hirda);
#else
          /* Call legacy weak user error callback */
          HAL_IRDA_ErrorCallback(hirda);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f836 	bl	8003658 <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80035ec:	e006      	b.n	80035fc <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
        /* Call registered user error callback */
        hirda->ErrorCallback(hirda);
#else
        /* Call legacy weak user error callback */
        HAL_IRDA_ErrorCallback(hirda);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f832 	bl	8003658 <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80035fa:	e01d      	b.n	8003638 <HAL_IRDA_IRQHandler+0x200>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80035fc:	bf00      	nop
    return;
 80035fe:	e01b      	b.n	8003638 <HAL_IRDA_IRQHandler+0x200>

  } /* End if some error occurs */

  /* IRDA in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) && ((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U))
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_IRDA_IRQHandler+0x1e4>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_IRDA_IRQHandler+0x1e4>
  {
    IRDA_Transmit_IT(hirda);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fa8d 	bl	8003b34 <IRDA_Transmit_IT>
    return;
 800361a:	e00e      	b.n	800363a <HAL_IRDA_IRQHandler+0x202>
  }

  /* IRDA in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_IRDA_IRQHandler+0x202>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <HAL_IRDA_IRQHandler+0x202>
  {
    IRDA_EndTransmit_IT(hirda);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 facf 	bl	8003bd4 <IRDA_EndTransmit_IT>
    return;
 8003636:	e000      	b.n	800363a <HAL_IRDA_IRQHandler+0x202>
    return;
 8003638:	bf00      	nop
  }

}
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	08003b0d 	.word	0x08003b0d

08003644 <HAL_IRDA_TxCpltCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_TxCpltCallback can be implemented in the user file.
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_IRDA_ErrorCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_ErrorCallback can be implemented in the user file.
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <IRDA_SetConfig>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  IRDA_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	76bb      	strb	r3, [r7, #26]
  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Configure the IRDA Word Length, Parity and transfer Mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(hirda->Instance->CR1, IRDA_CR1_FIELDS, tmpreg);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4baa      	ldr	r3, [pc, #680]	; (800393c <IRDA_SetConfig+0x2d0>)
 8003692:	4013      	ands	r3, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	69f9      	ldr	r1, [r7, #28]
 800369a:	430b      	orrs	r3, r1
 800369c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.PowerMode);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 0204 	bic.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8adb      	ldrh	r3, [r3, #22]
 80036ac:	4619      	mov	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]

  /*--------------------- USART clock PRESC Configuration ----------------*/
  /* Configure
  * - IRDA Clock Prescaler: set PRESCALER according to hirda->Init.ClockPrescaler value */
  MODIFY_REG(hirda->Instance->PRESC, USART_PRESC_PRESCALER, hirda->Init.ClockPrescaler);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	f023 010f 	bic.w	r1, r3, #15
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART GTPR Configuration ----------------------*/
  MODIFY_REG(hirda->Instance->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)hirda->Init.Prescaler);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	7d1b      	ldrb	r3, [r3, #20]
 80036da:	4619      	mov	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART BRR Configuration -----------------------*/
  IRDA_GETCLOCKSOURCE(hirda, clocksource);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a95      	ldr	r2, [pc, #596]	; (8003940 <IRDA_SetConfig+0x2d4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d128      	bne.n	8003740 <IRDA_SetConfig+0xd4>
 80036ee:	4b95      	ldr	r3, [pc, #596]	; (8003944 <IRDA_SetConfig+0x2d8>)
 80036f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d81e      	bhi.n	800373a <IRDA_SetConfig+0xce>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <IRDA_SetConfig+0x98>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	0800371d 	.word	0x0800371d
 8003708:	08003735 	.word	0x08003735
 800370c:	0800373b 	.word	0x0800373b
 8003710:	08003723 	.word	0x08003723
 8003714:	08003729 	.word	0x08003729
 8003718:	0800372f 	.word	0x0800372f
 800371c:	2301      	movs	r3, #1
 800371e:	76fb      	strb	r3, [r7, #27]
 8003720:	e06e      	b.n	8003800 <IRDA_SetConfig+0x194>
 8003722:	2302      	movs	r3, #2
 8003724:	76fb      	strb	r3, [r7, #27]
 8003726:	e06b      	b.n	8003800 <IRDA_SetConfig+0x194>
 8003728:	2308      	movs	r3, #8
 800372a:	76fb      	strb	r3, [r7, #27]
 800372c:	e068      	b.n	8003800 <IRDA_SetConfig+0x194>
 800372e:	2310      	movs	r3, #16
 8003730:	76fb      	strb	r3, [r7, #27]
 8003732:	e065      	b.n	8003800 <IRDA_SetConfig+0x194>
 8003734:	2314      	movs	r3, #20
 8003736:	76fb      	strb	r3, [r7, #27]
 8003738:	e062      	b.n	8003800 <IRDA_SetConfig+0x194>
 800373a:	2320      	movs	r3, #32
 800373c:	76fb      	strb	r3, [r7, #27]
 800373e:	e05f      	b.n	8003800 <IRDA_SetConfig+0x194>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a80      	ldr	r2, [pc, #512]	; (8003948 <IRDA_SetConfig+0x2dc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d127      	bne.n	800379a <IRDA_SetConfig+0x12e>
 800374a:	4b7e      	ldr	r3, [pc, #504]	; (8003944 <IRDA_SetConfig+0x2d8>)
 800374c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003750:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003754:	2b28      	cmp	r3, #40	; 0x28
 8003756:	d017      	beq.n	8003788 <IRDA_SetConfig+0x11c>
 8003758:	2b28      	cmp	r3, #40	; 0x28
 800375a:	d81b      	bhi.n	8003794 <IRDA_SetConfig+0x128>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d010      	beq.n	8003782 <IRDA_SetConfig+0x116>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d817      	bhi.n	8003794 <IRDA_SetConfig+0x128>
 8003764:	2b18      	cmp	r3, #24
 8003766:	d009      	beq.n	800377c <IRDA_SetConfig+0x110>
 8003768:	2b18      	cmp	r3, #24
 800376a:	d813      	bhi.n	8003794 <IRDA_SetConfig+0x128>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <IRDA_SetConfig+0x10a>
 8003770:	2b08      	cmp	r3, #8
 8003772:	d00c      	beq.n	800378e <IRDA_SetConfig+0x122>
 8003774:	e00e      	b.n	8003794 <IRDA_SetConfig+0x128>
 8003776:	2300      	movs	r3, #0
 8003778:	76fb      	strb	r3, [r7, #27]
 800377a:	e041      	b.n	8003800 <IRDA_SetConfig+0x194>
 800377c:	2302      	movs	r3, #2
 800377e:	76fb      	strb	r3, [r7, #27]
 8003780:	e03e      	b.n	8003800 <IRDA_SetConfig+0x194>
 8003782:	2308      	movs	r3, #8
 8003784:	76fb      	strb	r3, [r7, #27]
 8003786:	e03b      	b.n	8003800 <IRDA_SetConfig+0x194>
 8003788:	2310      	movs	r3, #16
 800378a:	76fb      	strb	r3, [r7, #27]
 800378c:	e038      	b.n	8003800 <IRDA_SetConfig+0x194>
 800378e:	2314      	movs	r3, #20
 8003790:	76fb      	strb	r3, [r7, #27]
 8003792:	e035      	b.n	8003800 <IRDA_SetConfig+0x194>
 8003794:	2320      	movs	r3, #32
 8003796:	76fb      	strb	r3, [r7, #27]
 8003798:	e032      	b.n	8003800 <IRDA_SetConfig+0x194>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6b      	ldr	r2, [pc, #428]	; (800394c <IRDA_SetConfig+0x2e0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d12b      	bne.n	80037fc <IRDA_SetConfig+0x190>
 80037a4:	4b67      	ldr	r3, [pc, #412]	; (8003944 <IRDA_SetConfig+0x2d8>)
 80037a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80037ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80037b2:	d01a      	beq.n	80037ea <IRDA_SetConfig+0x17e>
 80037b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80037b8:	d81d      	bhi.n	80037f6 <IRDA_SetConfig+0x18a>
 80037ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037be:	d011      	beq.n	80037e4 <IRDA_SetConfig+0x178>
 80037c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c4:	d817      	bhi.n	80037f6 <IRDA_SetConfig+0x18a>
 80037c6:	2bc0      	cmp	r3, #192	; 0xc0
 80037c8:	d009      	beq.n	80037de <IRDA_SetConfig+0x172>
 80037ca:	2bc0      	cmp	r3, #192	; 0xc0
 80037cc:	d813      	bhi.n	80037f6 <IRDA_SetConfig+0x18a>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <IRDA_SetConfig+0x16c>
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d00c      	beq.n	80037f0 <IRDA_SetConfig+0x184>
 80037d6:	e00e      	b.n	80037f6 <IRDA_SetConfig+0x18a>
 80037d8:	2300      	movs	r3, #0
 80037da:	76fb      	strb	r3, [r7, #27]
 80037dc:	e010      	b.n	8003800 <IRDA_SetConfig+0x194>
 80037de:	2302      	movs	r3, #2
 80037e0:	76fb      	strb	r3, [r7, #27]
 80037e2:	e00d      	b.n	8003800 <IRDA_SetConfig+0x194>
 80037e4:	2308      	movs	r3, #8
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	e00a      	b.n	8003800 <IRDA_SetConfig+0x194>
 80037ea:	2310      	movs	r3, #16
 80037ec:	76fb      	strb	r3, [r7, #27]
 80037ee:	e007      	b.n	8003800 <IRDA_SetConfig+0x194>
 80037f0:	2314      	movs	r3, #20
 80037f2:	76fb      	strb	r3, [r7, #27]
 80037f4:	e004      	b.n	8003800 <IRDA_SetConfig+0x194>
 80037f6:	2320      	movs	r3, #32
 80037f8:	76fb      	strb	r3, [r7, #27]
 80037fa:	e001      	b.n	8003800 <IRDA_SetConfig+0x194>
 80037fc:	2320      	movs	r3, #32
 80037fe:	76fb      	strb	r3, [r7, #27]
  tmpreg =   0U;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
  switch (clocksource)
 8003804:	7efb      	ldrb	r3, [r7, #27]
 8003806:	2b14      	cmp	r3, #20
 8003808:	f200 80bd 	bhi.w	8003986 <IRDA_SetConfig+0x31a>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <IRDA_SetConfig+0x1a8>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	080038bd 	.word	0x080038bd
 8003818:	080038e9 	.word	0x080038e9
 800381c:	08003915 	.word	0x08003915
 8003820:	08003987 	.word	0x08003987
 8003824:	08003987 	.word	0x08003987
 8003828:	08003987 	.word	0x08003987
 800382c:	08003987 	.word	0x08003987
 8003830:	08003987 	.word	0x08003987
 8003834:	08003897 	.word	0x08003897
 8003838:	08003987 	.word	0x08003987
 800383c:	08003987 	.word	0x08003987
 8003840:	08003987 	.word	0x08003987
 8003844:	08003987 	.word	0x08003987
 8003848:	08003987 	.word	0x08003987
 800384c:	08003987 	.word	0x08003987
 8003850:	08003987 	.word	0x08003987
 8003854:	0800395d 	.word	0x0800395d
 8003858:	08003987 	.word	0x08003987
 800385c:	08003987 	.word	0x08003987
 8003860:	08003987 	.word	0x08003987
 8003864:	08003869 	.word	0x08003869
  {
    case IRDA_CLOCKSOURCE_PLL2Q:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003868:	f107 0308 	add.w	r3, r7, #8
 800386c:	4618      	mov	r0, r3
 800386e:	f001 ffb3 	bl	80057d8 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency,
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6992      	ldr	r2, [r2, #24]
 8003878:	4935      	ldr	r1, [pc, #212]	; (8003950 <IRDA_SetConfig+0x2e4>)
 800387a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800387e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	61fb      	str	r3, [r7, #28]
                                              hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
      break;
 8003894:	e07a      	b.n	800398c <IRDA_SetConfig+0x320>
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, hirda->Init.BaudRate,
                                              hirda->Init.ClockPrescaler));
      break;
#endif /* RCC_CR_PLL3ON */
    case IRDA_CLOCKSOURCE_CSI:
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(CSI_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4a2d      	ldr	r2, [pc, #180]	; (8003950 <IRDA_SetConfig+0x2e4>)
 800389c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <IRDA_SetConfig+0x2e8>)
 80038a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	61fb      	str	r3, [r7, #28]
      break;
 80038ba:	e067      	b.n	800398c <IRDA_SetConfig+0x320>
    case IRDA_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80038bc:	f001 f93c 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80038c0:	6178      	str	r0, [r7, #20]
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	4a22      	ldr	r2, [pc, #136]	; (8003950 <IRDA_SetConfig+0x2e4>)
 80038c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038cc:	461a      	mov	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	441a      	add	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	61fb      	str	r3, [r7, #28]
      break;
 80038e6:	e051      	b.n	800398c <IRDA_SetConfig+0x320>
    case IRDA_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e8:	f001 f93c 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 80038ec:	6178      	str	r0, [r7, #20]
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	4a17      	ldr	r2, [pc, #92]	; (8003950 <IRDA_SetConfig+0x2e4>)
 80038f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038f8:	461a      	mov	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	441a      	add	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	61fb      	str	r3, [r7, #28]
      break;
 8003912:	e03b      	b.n	800398c <IRDA_SetConfig+0x320>
    case IRDA_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(HSI_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <IRDA_SetConfig+0x2e4>)
 800391a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800391e:	461a      	mov	r2, r3
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <IRDA_SetConfig+0x2ec>)
 8003922:	fbb3 f2f2 	udiv	r2, r3, r2
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	441a      	add	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	61fb      	str	r3, [r7, #28]
      break;
 8003938:	e028      	b.n	800398c <IRDA_SetConfig+0x320>
 800393a:	bf00      	nop
 800393c:	efffe9f3 	.word	0xefffe9f3
 8003940:	40013800 	.word	0x40013800
 8003944:	44020c00 	.word	0x44020c00
 8003948:	40004400 	.word	0x40004400
 800394c:	40004800 	.word	0x40004800
 8003950:	08009244 	.word	0x08009244
 8003954:	003d0900 	.word	0x003d0900
 8003958:	03d09000 	.word	0x03d09000
    case IRDA_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16((uint32_t)LSE_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <IRDA_SetConfig+0x348>)
 8003962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003966:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	b29b      	uxth	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	441a      	add	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	61fb      	str	r3, [r7, #28]
      break;
 8003984:	e002      	b.n	800398c <IRDA_SetConfig+0x320>
    default:
      ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	76bb      	strb	r3, [r7, #26]
      break;
 800398a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 */
  if ((tmpreg >= USART_BRR_MIN) && (tmpreg <= USART_BRR_MAX))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d909      	bls.n	80039a6 <IRDA_SetConfig+0x33a>
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003998:	d205      	bcs.n	80039a6 <IRDA_SetConfig+0x33a>
  {
    hirda->Instance->BRR = (uint16_t)tmpreg;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	e001      	b.n	80039aa <IRDA_SetConfig+0x33e>
  }
  else
  {
    ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	76bb      	strb	r3, [r7, #26]
  }

  return ret;
 80039aa:	7ebb      	ldrb	r3, [r7, #26]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	08009244 	.word	0x08009244

080039b8 <IRDA_CheckIdleState>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_CheckIdleState(IRDA_HandleTypeDef *hirda)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the IRDA ErrorCode */
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039c6:	f7fe fd17 	bl	80023f8 <HAL_GetTick>
 80039ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d10e      	bne.n	80039f8 <IRDA_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_TEACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 80039da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f82a 	bl	8003a42 <IRDA_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <IRDA_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e020      	b.n	8003a3a <IRDA_CheckIdleState+0x82>
    }
  }
  /* Check if the Receiver is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d10e      	bne.n	8003a24 <IRDA_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_REACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f814 	bl	8003a42 <IRDA_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <IRDA_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e00a      	b.n	8003a3a <IRDA_CheckIdleState+0x82>
    }
  }

  /* Initialize the IRDA state*/
  hirda->gState  = HAL_IRDA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	63da      	str	r2, [r3, #60]	; 0x3c
  hirda->RxState = HAL_IRDA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Process Unlocked */
  __HAL_UNLOCK(hirda);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <IRDA_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 8003a52:	e02a      	b.n	8003aaa <IRDA_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d026      	beq.n	8003aaa <IRDA_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7fe fccc 	bl	80023f8 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <IRDA_WaitOnFlagUntilTimeout+0x30>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11b      	bne.n	8003aaa <IRDA_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	609a      	str	r2, [r3, #8]

        hirda->gState  = HAL_IRDA_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	63da      	str	r2, [r3, #60]	; 0x3c
        hirda->RxState = HAL_IRDA_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hirda);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e00f      	b.n	8003aca <IRDA_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d0c5      	beq.n	8003a54 <IRDA_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <IRDA_EndRxTransfer>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ae8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore hirda->RxState to Ready */
  hirda->RxState = HAL_IRDA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <IRDA_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)(hdma->Parent);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	60fb      	str	r3, [r7, #12]
  hirda->RxXferCount = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hirda->TxXferCount = 0U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	845a      	strh	r2, [r3, #34]	; 0x22
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered user error callback */
  hirda->ErrorCallback(hirda);
#else
  /* Call legacy weak user error callback */
  HAL_IRDA_ErrorCallback(hirda);
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f7ff fd96 	bl	8003658 <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <IRDA_Transmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	2b21      	cmp	r3, #33	; 0x21
 8003b42:	d141      	bne.n	8003bc8 <IRDA_Transmit_IT+0x94>
  {
    if (hirda->TxXferCount == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d110      	bne.n	8003b70 <IRDA_Transmit_IT+0x3c>
    {
      /* Disable the IRDA Transmit Data Register Empty Interrupt */
      CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5c:	601a      	str	r2, [r3, #0]

      /* Enable the IRDA Transmit Complete Interrupt */
      SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6c:	601a      	str	r2, [r3, #0]
        hirda->pTxBuffPtr++;
      }
      hirda->TxXferCount--;
    }
  }
}
 8003b6e:	e02b      	b.n	8003bc8 <IRDA_Transmit_IT+0x94>
      if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b78:	d114      	bne.n	8003ba4 <IRDA_Transmit_IT+0x70>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d110      	bne.n	8003ba4 <IRDA_Transmit_IT+0x70>
        tmp = (const uint16_t *) hirda->pTxBuffPtr; /* Derogation R.11.3 */
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	60fb      	str	r3, [r7, #12]
        hirda->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr += 2U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	1c9a      	adds	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	61da      	str	r2, [r3, #28]
 8003ba2:	e00a      	b.n	8003bba <IRDA_Transmit_IT+0x86>
        hirda->Instance->TDR = (uint8_t)(*hirda->pTxBuffPtr & 0xFFU);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	781a      	ldrb	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr++;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	61da      	str	r2, [r3, #28]
      hirda->TxXferCount--;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <IRDA_EndTransmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Disable the IRDA Transmit Complete Interrupt */
  CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore hirda->gState to Ready */
  hirda->gState = HAL_IRDA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered Tx complete callback */
  hirda->TxCpltCallback(hirda);
#else
  /* Call legacy weak Tx complete callback */
  HAL_IRDA_TxCpltCallback(hirda);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fd26 	bl	8003644 <HAL_IRDA_TxCpltCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <IRDA_Receive_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = hirda->Mask;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c0c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b22      	cmp	r3, #34	; 0x22
 8003c14:	d14c      	bne.n	8003cb0 <IRDA_Receive_IT+0xb0>
  {
    uhdata = (uint16_t) READ_REG(hirda->Instance->RDR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	81bb      	strh	r3, [r7, #12]
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	d112      	bne.n	8003c4e <IRDA_Receive_IT+0x4e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10e      	bne.n	8003c4e <IRDA_Receive_IT+0x4e>
    {
      tmp = (uint16_t *) hirda->pRxBuffPtr; /* Derogation R.11.3 */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003c36:	89ba      	ldrh	r2, [r7, #12]
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	801a      	strh	r2, [r3, #0]
      hirda->pRxBuffPtr  += 2U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c4c:	e00d      	b.n	8003c6a <IRDA_Receive_IT+0x6a>
    }
    else
    {
      *hirda->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c4e:	89bb      	ldrh	r3, [r7, #12]
 8003c50:	b2d9      	uxtb	r1, r3
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
      hirda->pRxBuffPtr++;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
    }

    hirda->RxXferCount--;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hirda->RxXferCount == 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11e      	bne.n	8003cc0 <IRDA_Receive_IT+0xc0>
    {
      /* Disable the IRDA Parity Error Interrupt and RXNE interrupt */
      CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c90:	601a      	str	r2, [r3, #0]

      /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore hirda->RxState to Ready */
      hirda->RxState = HAL_IRDA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
      /* Call registered Rx complete callback */
      hirda->RxCpltCallback(hirda);
#else
      /* Call legacy weak Rx complete callback */
      HAL_IRDA_RxCpltCallback(hirda);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fc fcd7 	bl	800065c <HAL_IRDA_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
  }
}
 8003cae:	e007      	b.n	8003cc0 <IRDA_Receive_IT+0xc0>
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	619a      	str	r2, [r3, #24]
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f000 bc28 	b.w	800452c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cdc:	4b94      	ldr	r3, [pc, #592]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f003 0318 	and.w	r3, r3, #24
 8003ce4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003ce6:	4b92      	ldr	r3, [pc, #584]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05b      	beq.n	8003db4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_OscConfig+0x46>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b18      	cmp	r3, #24
 8003d06:	d114      	bne.n	8003d32 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d111      	bne.n	8003d32 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f000 bc08 	b.w	800452c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003d1c:	4b84      	ldr	r3, [pc, #528]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	4981      	ldr	r1, [pc, #516]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003d30:	e040      	b.n	8003db4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d023      	beq.n	8003d82 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d3a:	4b7d      	ldr	r3, [pc, #500]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7c      	ldr	r2, [pc, #496]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe fb57 	bl	80023f8 <HAL_GetTick>
 8003d4a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003d4e:	f7fe fb53 	bl	80023f8 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e3e5      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d60:	4b73      	ldr	r3, [pc, #460]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003d6c:	4b70      	ldr	r3, [pc, #448]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	496d      	ldr	r1, [pc, #436]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	618b      	str	r3, [r1, #24]
 8003d80:	e018      	b.n	8003db4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d82:	4b6b      	ldr	r3, [pc, #428]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6a      	ldr	r2, [pc, #424]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fe fb33 	bl	80023f8 <HAL_GetTick>
 8003d92:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003d96:	f7fe fb2f 	bl	80023f8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e3c1      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003da8:	4b61      	ldr	r3, [pc, #388]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f0      	bne.n	8003d96 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80a0 	beq.w	8003f02 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x10c>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b18      	cmp	r3, #24
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 8092 	bne.w	8003f02 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e3a4      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x132>
 8003dec:	4b50      	ldr	r3, [pc, #320]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4f      	ldr	r2, [pc, #316]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	e058      	b.n	8003eac <HAL_RCC_OscConfig+0x1e4>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d112      	bne.n	8003e28 <HAL_RCC_OscConfig+0x160>
 8003e02:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a47      	ldr	r2, [pc, #284]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a44      	ldr	r2, [pc, #272]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e041      	b.n	8003eac <HAL_RCC_OscConfig+0x1e4>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e30:	d112      	bne.n	8003e58 <HAL_RCC_OscConfig+0x190>
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3e      	ldr	r2, [pc, #248]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	4b3c      	ldr	r3, [pc, #240]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a3b      	ldr	r2, [pc, #236]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a38      	ldr	r2, [pc, #224]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e029      	b.n	8003eac <HAL_RCC_OscConfig+0x1e4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003e60:	d112      	bne.n	8003e88 <HAL_RCC_OscConfig+0x1c0>
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a32      	ldr	r2, [pc, #200]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e011      	b.n	8003eac <HAL_RCC_OscConfig+0x1e4>
 8003e88:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003ea6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d013      	beq.n	8003edc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe faa0 	bl	80023f8 <HAL_GetTick>
 8003eb8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fa9c 	bl	80023f8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e32e      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1f4>
 8003eda:	e012      	b.n	8003f02 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe fa8c 	bl	80023f8 <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fa88 	bl	80023f8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e31a      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_RCC_OscConfig+0x268>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 809a 	beq.w	8004044 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x25a>
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b18      	cmp	r3, #24
 8003f1a:	d149      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d146      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e2fe      	b.n	800452c <HAL_RCC_OscConfig+0x864>
 8003f2e:	bf00      	nop
 8003f30:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003f3a:	4b9a      	ldr	r3, [pc, #616]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0218 	and.w	r2, r3, #24
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d014      	beq.n	8003f74 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003f4a:	4b96      	ldr	r3, [pc, #600]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 0218 	bic.w	r2, r3, #24
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	4993      	ldr	r1, [pc, #588]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003f5c:	f000 fdd0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f60:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCC_OscConfig+0x4e0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe f9fd 	bl	8002364 <HAL_InitTick>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e2db      	b.n	800452c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe fa40 	bl	80023f8 <HAL_GetTick>
 8003f78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fa3c 	bl	80023f8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e2ce      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8e:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003f9a:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	497e      	ldr	r1, [pc, #504]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003fae:	e049      	b.n	8004044 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02c      	beq.n	8004012 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003fb8:	4b7a      	ldr	r3, [pc, #488]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 0218 	bic.w	r2, r3, #24
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4977      	ldr	r1, [pc, #476]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fa0f 	bl	80023f8 <HAL_GetTick>
 8003fda:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003fde:	f7fe fa0b 	bl	80023f8 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e29d      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003ffc:	4b69      	ldr	r3, [pc, #420]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	4966      	ldr	r1, [pc, #408]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800400c:	4313      	orrs	r3, r2
 800400e:	610b      	str	r3, [r1, #16]
 8004010:	e018      	b.n	8004044 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004012:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a63      	ldr	r2, [pc, #396]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fe f9eb 	bl	80023f8 <HAL_GetTick>
 8004022:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004026:	f7fe f9e7 	bl	80023f8 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e279      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004038:	4b5a      	ldr	r3, [pc, #360]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d03c      	beq.n	80040ca <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01c      	beq.n	8004092 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004058:	4b52      	ldr	r3, [pc, #328]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800405a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800405e:	4a51      	ldr	r2, [pc, #324]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004060:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004064:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fe f9c6 	bl	80023f8 <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004070:	f7fe f9c2 	bl	80023f8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e254      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004082:	4b48      	ldr	r3, [pc, #288]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ef      	beq.n	8004070 <HAL_RCC_OscConfig+0x3a8>
 8004090:	e01b      	b.n	80040ca <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004098:	4a42      	ldr	r2, [pc, #264]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800409a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800409e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fe f9a9 	bl	80023f8 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80040aa:	f7fe f9a5 	bl	80023f8 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e237      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040bc:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 80040be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ef      	bne.n	80040aa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80d2 	beq.w	800427c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80040d8:	4b34      	ldr	r3, [pc, #208]	; (80041ac <HAL_RCC_OscConfig+0x4e4>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d118      	bne.n	8004116 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80040e4:	4b31      	ldr	r3, [pc, #196]	; (80041ac <HAL_RCC_OscConfig+0x4e4>)
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	4a30      	ldr	r2, [pc, #192]	; (80041ac <HAL_RCC_OscConfig+0x4e4>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f0:	f7fe f982 	bl	80023f8 <HAL_GetTick>
 80040f4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f8:	f7fe f97e 	bl	80023f8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e210      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800410a:	4b28      	ldr	r3, [pc, #160]	; (80041ac <HAL_RCC_OscConfig+0x4e4>)
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d108      	bne.n	8004130 <HAL_RCC_OscConfig+0x468>
 800411e:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004124:	4a1f      	ldr	r2, [pc, #124]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800412e:	e074      	b.n	800421a <HAL_RCC_OscConfig+0x552>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d118      	bne.n	800416a <HAL_RCC_OscConfig+0x4a2>
 8004138:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800413a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800413e:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800414a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800414e:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004154:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004158:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800415a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800415e:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004160:	f023 0304 	bic.w	r3, r3, #4
 8004164:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004168:	e057      	b.n	800421a <HAL_RCC_OscConfig+0x552>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b05      	cmp	r3, #5
 8004170:	d11e      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4e8>
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004178:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800417a:	f043 0304 	orr.w	r3, r3, #4
 800417e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800418a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004192:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 8004194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004198:	4a02      	ldr	r2, [pc, #8]	; (80041a4 <HAL_RCC_OscConfig+0x4dc>)
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041a2:	e03a      	b.n	800421a <HAL_RCC_OscConfig+0x552>
 80041a4:	44020c00 	.word	0x44020c00
 80041a8:	20000028 	.word	0x20000028
 80041ac:	44020800 	.word	0x44020800
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b85      	cmp	r3, #133	; 0x85
 80041b6:	d118      	bne.n	80041ea <HAL_RCC_OscConfig+0x522>
 80041b8:	4ba2      	ldr	r3, [pc, #648]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041be:	4aa1      	ldr	r2, [pc, #644]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041c8:	4b9e      	ldr	r3, [pc, #632]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041ce:	4a9d      	ldr	r2, [pc, #628]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041d8:	4b9a      	ldr	r3, [pc, #616]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041de:	4a99      	ldr	r2, [pc, #612]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041e8:	e017      	b.n	800421a <HAL_RCC_OscConfig+0x552>
 80041ea:	4b96      	ldr	r3, [pc, #600]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041f0:	4a94      	ldr	r2, [pc, #592]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041fa:	4b92      	ldr	r3, [pc, #584]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80041fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004200:	4a90      	ldr	r2, [pc, #576]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004202:	f023 0304 	bic.w	r3, r3, #4
 8004206:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800420a:	4b8e      	ldr	r3, [pc, #568]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 800420c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004210:	4a8c      	ldr	r2, [pc, #560]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004216:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fe f8e9 	bl	80023f8 <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fe f8e5 	bl	80023f8 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e175      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004240:	4b80      	ldr	r3, [pc, #512]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0ed      	beq.n	800422a <HAL_RCC_OscConfig+0x562>
 800424e:	e015      	b.n	800427c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004250:	f7fe f8d2 	bl	80023f8 <HAL_GetTick>
 8004254:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004256:	e00a      	b.n	800426e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004258:	f7fe f8ce 	bl	80023f8 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e15e      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426e:	4b75      	ldr	r3, [pc, #468]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ed      	bne.n	8004258 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d036      	beq.n	80042f6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d019      	beq.n	80042c4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004290:	4b6c      	ldr	r3, [pc, #432]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6b      	ldr	r2, [pc, #428]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004296:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800429a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe f8ac 	bl	80023f8 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80042a4:	f7fe f8a8 	bl	80023f8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e13a      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80042b6:	4b63      	ldr	r3, [pc, #396]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x5dc>
 80042c2:	e018      	b.n	80042f6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042c4:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a5e      	ldr	r2, [pc, #376]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80042ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fe f892 	bl	80023f8 <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80042d8:	f7fe f88e 	bl	80023f8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e120      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80042ea:	4b56      	ldr	r3, [pc, #344]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8115 	beq.w	800452a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b18      	cmp	r3, #24
 8004304:	f000 80af 	beq.w	8004466 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	2b02      	cmp	r3, #2
 800430e:	f040 8086 	bne.w	800441e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004312:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a4b      	ldr	r2, [pc, #300]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800431c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fe f86b 	bl	80023f8 <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004326:	f7fe f867 	bl	80023f8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e0f9      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004338:	4b42      	ldr	r3, [pc, #264]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004344:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800434c:	f023 0303 	bic.w	r3, r3, #3
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004358:	0212      	lsls	r2, r2, #8
 800435a:	430a      	orrs	r2, r1
 800435c:	4939      	ldr	r1, [pc, #228]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	628b      	str	r3, [r1, #40]	; 0x28
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	3b01      	subs	r3, #1
 8004368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	3b01      	subs	r3, #1
 8004372:	025b      	lsls	r3, r3, #9
 8004374:	b29b      	uxth	r3, r3
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	3b01      	subs	r3, #1
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	3b01      	subs	r3, #1
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004392:	492c      	ldr	r1, [pc, #176]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004394:	4313      	orrs	r3, r2
 8004396:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004398:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	4a26      	ldr	r2, [pc, #152]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80043ae:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	4a24      	ldr	r2, [pc, #144]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043b4:	f043 0310 	orr.w	r3, r3, #16
 80043b8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80043ba:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	f023 020c 	bic.w	r2, r3, #12
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	491f      	ldr	r1, [pc, #124]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f023 0220 	bic.w	r2, r3, #32
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d8:	491a      	ldr	r1, [pc, #104]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043de:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	4a18      	ldr	r2, [pc, #96]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80043ea:	4b16      	ldr	r3, [pc, #88]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a15      	ldr	r2, [pc, #84]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 80043f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fd ffff 	bl	80023f8 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80043fe:	f7fd fffb 	bl	80023f8 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e08d      	b.n	800452c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x736>
 800441c:	e085      	b.n	800452a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a08      	ldr	r2, [pc, #32]	; (8004444 <HAL_RCC_OscConfig+0x77c>)
 8004424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fd ffe5 	bl	80023f8 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004432:	f7fd ffe1 	bl	80023f8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d903      	bls.n	8004448 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e073      	b.n	800452c <HAL_RCC_OscConfig+0x864>
 8004444:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004448:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ee      	bne.n	8004432 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004454:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	4a36      	ldr	r2, [pc, #216]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 800445a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800445e:	f023 0303 	bic.w	r3, r3, #3
 8004462:	6293      	str	r3, [r2, #40]	; 0x28
 8004464:	e061      	b.n	800452a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004466:	4b33      	ldr	r3, [pc, #204]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800446c:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 800446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004470:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	2b01      	cmp	r3, #1
 8004478:	d031      	beq.n	80044de <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f003 0203 	and.w	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d12a      	bne.n	80044de <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d122      	bne.n	80044de <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d11a      	bne.n	80044de <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	0a5b      	lsrs	r3, r3, #9
 80044ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d111      	bne.n	80044de <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d108      	bne.n	80044de <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	0e1b      	lsrs	r3, r3, #24
 80044d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e024      	b.n	800452c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	08db      	lsrs	r3, r3, #3
 80044e8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d01a      	beq.n	800452a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 80044fa:	f023 0310 	bic.w	r3, r3, #16
 80044fe:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd ff7a 	bl	80023f8 <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004506:	bf00      	nop
 8004508:	f7fd ff76 	bl	80023f8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4293      	cmp	r3, r2
 8004512:	d0f9      	beq.n	8004508 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004518:	4a06      	ldr	r2, [pc, #24]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <HAL_RCC_OscConfig+0x86c>)
 8004524:	f043 0310 	orr.w	r3, r3, #16
 8004528:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	44020c00 	.word	0x44020c00

08004538 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e19e      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b83      	ldr	r3, [pc, #524]	; (800475c <HAL_RCC_ClockConfig+0x224>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d910      	bls.n	800457c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b80      	ldr	r3, [pc, #512]	; (800475c <HAL_RCC_ClockConfig+0x224>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 020f 	bic.w	r2, r3, #15
 8004562:	497e      	ldr	r1, [pc, #504]	; (800475c <HAL_RCC_ClockConfig+0x224>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b7c      	ldr	r3, [pc, #496]	; (800475c <HAL_RCC_ClockConfig+0x224>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e186      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	4b74      	ldr	r3, [pc, #464]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004596:	429a      	cmp	r2, r3
 8004598:	d909      	bls.n	80045ae <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800459a:	4b71      	ldr	r3, [pc, #452]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	496d      	ldr	r1, [pc, #436]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d012      	beq.n	80045e0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	4b68      	ldr	r3, [pc, #416]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d909      	bls.n	80045e0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80045cc:	4b64      	ldr	r3, [pc, #400]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	4961      	ldr	r1, [pc, #388]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	4b5b      	ldr	r3, [pc, #364]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d908      	bls.n	800460e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80045fc:	4b58      	ldr	r3, [pc, #352]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4955      	ldr	r1, [pc, #340]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 800460a:	4313      	orrs	r3, r2
 800460c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	4b50      	ldr	r3, [pc, #320]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	429a      	cmp	r2, r3
 8004628:	d908      	bls.n	800463c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800462a:	4b4d      	ldr	r3, [pc, #308]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 020f 	bic.w	r2, r3, #15
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	494a      	ldr	r1, [pc, #296]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 8004638:	4313      	orrs	r3, r2
 800463a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8093 	beq.w	8004770 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004652:	4b43      	ldr	r3, [pc, #268]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d121      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e113      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800466a:	4b3d      	ldr	r3, [pc, #244]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d115      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e107      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e0fb      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004692:	4b33      	ldr	r3, [pc, #204]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e0f3      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80046a2:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f023 0203 	bic.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	492c      	ldr	r1, [pc, #176]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b4:	f7fd fea0 	bl	80023f8 <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d112      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046c4:	f7fd fe98 	bl	80023f8 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0d7      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046da:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 0318 	and.w	r3, r3, #24
 80046e2:	2b18      	cmp	r3, #24
 80046e4:	d1ee      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x18c>
 80046e6:	e043      	b.n	8004770 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d112      	bne.n	8004716 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f0:	e00a      	b.n	8004708 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046f2:	f7fd fe81 	bl	80023f8 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e0c0      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f003 0318 	and.w	r3, r3, #24
 8004710:	2b10      	cmp	r3, #16
 8004712:	d1ee      	bne.n	80046f2 <HAL_RCC_ClockConfig+0x1ba>
 8004714:	e02c      	b.n	8004770 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d122      	bne.n	8004764 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800471e:	e00a      	b.n	8004736 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fd fe6a 	bl	80023f8 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e0a9      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <HAL_RCC_ClockConfig+0x228>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 0318 	and.w	r3, r3, #24
 800473e:	2b08      	cmp	r3, #8
 8004740:	d1ee      	bne.n	8004720 <HAL_RCC_ClockConfig+0x1e8>
 8004742:	e015      	b.n	8004770 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fd fe58 	bl	80023f8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d906      	bls.n	8004764 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e097      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
 800475a:	bf00      	nop
 800475c:	40022000 	.word	0x40022000
 8004760:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004764:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	f003 0318 	and.w	r3, r3, #24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e9      	bne.n	8004744 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	4b44      	ldr	r3, [pc, #272]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	429a      	cmp	r2, r3
 800478a:	d208      	bcs.n	800479e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800478c:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f023 020f 	bic.w	r2, r3, #15
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	493e      	ldr	r1, [pc, #248]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 800479a:	4313      	orrs	r3, r2
 800479c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800479e:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <HAL_RCC_ClockConfig+0x360>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d210      	bcs.n	80047ce <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ac:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <HAL_RCC_ClockConfig+0x360>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 020f 	bic.w	r2, r3, #15
 80047b4:	4938      	ldr	r1, [pc, #224]	; (8004898 <HAL_RCC_ClockConfig+0x360>)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047bc:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_RCC_ClockConfig+0x360>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d001      	beq.n	80047ce <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e05d      	b.n	800488a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d010      	beq.n	80047fc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	4b2d      	ldr	r3, [pc, #180]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d208      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80047ea:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	4927      	ldr	r1, [pc, #156]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d012      	beq.n	800482e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004816:	429a      	cmp	r2, r3
 8004818:	d209      	bcs.n	800482e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	491a      	ldr	r1, [pc, #104]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b00      	cmp	r3, #0
 8004838:	d012      	beq.n	8004860 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004848:	429a      	cmp	r2, r3
 800484a:	d209      	bcs.n	8004860 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	490e      	ldr	r1, [pc, #56]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004860:	f000 f822 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_RCC_ClockConfig+0x35c>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	490b      	ldr	r1, [pc, #44]	; (800489c <HAL_RCC_ClockConfig+0x364>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <HAL_RCC_ClockConfig+0x368>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_RCC_ClockConfig+0x36c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fd70 	bl	8002364 <HAL_InitTick>
 8004884:	4603      	mov	r3, r0
 8004886:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004888:	7afb      	ldrb	r3, [r7, #11]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	44020c00 	.word	0x44020c00
 8004898:	40022000 	.word	0x40022000
 800489c:	0800922c 	.word	0x0800922c
 80048a0:	20000024 	.word	0x20000024
 80048a4:	20000028 	.word	0x20000028

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80048ae:	4b8c      	ldr	r3, [pc, #560]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0318 	and.w	r3, r3, #24
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80048ba:	4b8a      	ldr	r3, [pc, #552]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x23c>)
 80048bc:	61fb      	str	r3, [r7, #28]
 80048be:	e107      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048c0:	4b87      	ldr	r3, [pc, #540]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f003 0318 	and.w	r3, r3, #24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d112      	bne.n	80048f2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80048cc:	4b84      	ldr	r3, [pc, #528]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048d8:	4b81      	ldr	r3, [pc, #516]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	08db      	lsrs	r3, r3, #3
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	4a81      	ldr	r2, [pc, #516]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x240>)
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	e0f1      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80048ec:	4b7e      	ldr	r3, [pc, #504]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x240>)
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	e0ee      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048f2:	4b7b      	ldr	r3, [pc, #492]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 0318 	and.w	r3, r3, #24
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d102      	bne.n	8004904 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048fe:	4b7b      	ldr	r3, [pc, #492]	; (8004aec <HAL_RCC_GetSysClockFreq+0x244>)
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	e0e5      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004904:	4b76      	ldr	r3, [pc, #472]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f003 0318 	and.w	r3, r3, #24
 800490c:	2b18      	cmp	r3, #24
 800490e:	f040 80dd 	bne.w	8004acc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004912:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800491c:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004926:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004928:	4b6d      	ldr	r3, [pc, #436]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004934:	4b6a      	ldr	r3, [pc, #424]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004938:	08db      	lsrs	r3, r3, #3
 800493a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80b7 	beq.w	8004ac6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d003      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0xbe>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d056      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0x16a>
 8004964:	e077      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004966:	4b5e      	ldr	r3, [pc, #376]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d02d      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004972:	4b5b      	ldr	r3, [pc, #364]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	08db      	lsrs	r3, r3, #3
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	4a5a      	ldr	r2, [pc, #360]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x240>)
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499c:	4b50      	ldr	r3, [pc, #320]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80049ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80049b0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x248>
 80049b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80049bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80049cc:	e065      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	ee07 3a90 	vmov	s15, r3
 80049d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d8:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004af4 <HAL_RCC_GetSysClockFreq+0x24c>
 80049dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e0:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80049f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80049f4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x248>
 80049f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004a10:	e043      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004af8 <HAL_RCC_GetSysClockFreq+0x250>
 8004a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a24:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a38:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x248>
 8004a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a50:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004a54:	e021      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a60:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004afc <HAL_RCC_GetSysClockFreq+0x254>
 8004a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a78:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004af0 <HAL_RCC_GetSysClockFreq+0x248>
 8004a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a94:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004a98:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	0a5b      	lsrs	r3, r3, #9
 8004aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ab2:	edd7 6a06 	vldr	s13, [r7, #24]
 8004ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004abe:	ee17 3a90 	vmov	r3, s15
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	e004      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	e001      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x240>)
 8004ace:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3724      	adds	r7, #36	; 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	44020c00 	.word	0x44020c00
 8004ae4:	003d0900 	.word	0x003d0900
 8004ae8:	03d09000 	.word	0x03d09000
 8004aec:	017d7840 	.word	0x017d7840
 8004af0:	46000000 	.word	0x46000000
 8004af4:	4c742400 	.word	0x4c742400
 8004af8:	4bbebc20 	.word	0x4bbebc20
 8004afc:	4a742400 	.word	0x4a742400

08004b00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b04:	f7ff fed0 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004b0e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b12:	4907      	ldr	r1, [pc, #28]	; (8004b30 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b14:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004b16:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1e:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <HAL_RCC_GetHCLKFreq+0x34>)
 8004b20:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004b22:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <HAL_RCC_GetHCLKFreq+0x34>)
 8004b24:	681b      	ldr	r3, [r3, #0]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	44020c00 	.word	0x44020c00
 8004b30:	0800922c 	.word	0x0800922c
 8004b34:	20000024 	.word	0x20000024

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004b3c:	f7ff ffe0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4904      	ldr	r1, [pc, #16]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	44020c00 	.word	0x44020c00
 8004b60:	0800923c 	.word	0x0800923c

08004b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004b68:	f7ff ffca 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4904      	ldr	r1, [pc, #16]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	44020c00 	.word	0x44020c00
 8004b8c:	0800923c 	.word	0x0800923c

08004b90 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b0aa      	sub	sp, #168	; 0xa8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8004bb4:	2500      	movs	r5, #0
 8004bb6:	ea54 0305 	orrs.w	r3, r4, r5
 8004bba:	d00b      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004bbc:	4bb8      	ldr	r3, [pc, #736]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bc2:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8004bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	4ab4      	ldr	r2, [pc, #720]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f002 0801 	and.w	r8, r2, #1
 8004be0:	f04f 0900 	mov.w	r9, #0
 8004be4:	ea58 0309 	orrs.w	r3, r8, r9
 8004be8:	d038      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d819      	bhi.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c15 	.word	0x08004c15
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c31 	.word	0x08004c31
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c18:	3308      	adds	r3, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 ff46 	bl	8005aac <RCCEx_PLL2_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004c26:	e004      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004c2e:	e000      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8004c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c32:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004c3a:	4b99      	ldr	r3, [pc, #612]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c40:	f023 0107 	bic.w	r1, r3, #7
 8004c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	4a95      	ldr	r2, [pc, #596]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c52:	e003      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004c58:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 0a02 	and.w	sl, r2, #2
 8004c68:	f04f 0b00 	mov.w	fp, #0
 8004c6c:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c70:	d03c      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	2b28      	cmp	r3, #40	; 0x28
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004c7c:	2b28      	cmp	r3, #40	; 0x28
 8004c7e:	d815      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d019      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d811      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004c88:	2b18      	cmp	r3, #24
 8004c8a:	d017      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004c8c:	2b18      	cmp	r3, #24
 8004c8e:	d80d      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d015      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d109      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 ff04 	bl	8005aac <RCCEx_PLL2_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004cb2:	e006      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e004      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004cb8:	bf00      	nop
 8004cba:	e002      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004cca:	4b75      	ldr	r3, [pc, #468]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cd0:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	4a71      	ldr	r2, [pc, #452]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004ce2:	e003      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004ce8:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f002 0304 	and.w	r3, r2, #4
 8004cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d040      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004d16:	d01e      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004d18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004d1c:	d817      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d22:	d01a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8004d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d28:	d811      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d2c:	d017      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d30:	d80d      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d015      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d109      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d3e:	3308      	adds	r3, #8
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 feb3 	bl	8005aac <RCCEx_PLL2_Config>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004d56:	bf00      	nop
 8004d58:	e004      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d64:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10c      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004d6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004d72:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	4a48      	ldr	r2, [pc, #288]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004d84:	e003      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d86:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004d8a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004da4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004da8:	460b      	mov	r3, r1
 8004daa:	4313      	orrs	r3, r2
 8004dac:	d043      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004dae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004db8:	d021      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004dba:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004dbe:	d81a      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dc4:	d01d      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dca:	d814      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004dcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dd0:	d019      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004dd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dd6:	d80e      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d016      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004de0:	d109      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004de2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004de6:	3308      	adds	r3, #8
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fe5f 	bl	8005aac <RCCEx_PLL2_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004df4:	e00a      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e004      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004e02:	bf00      	nop
 8004e04:	e002      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10c      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004e14:	4b22      	ldr	r3, [pc, #136]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e1a:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e26:	430b      	orrs	r3, r1
 8004e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e2c:	e003      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004e32:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004e42:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e44:	2300      	movs	r3, #0
 8004e46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	d03e      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e5c:	d01b      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8004e5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e62:	d814      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e68:	d017      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e6e:	d80e      	bhi.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d017      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d109      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e7e:	3308      	adds	r3, #8
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fe13 	bl	8005aac <RCCEx_PLL2_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004e8c:	e00b      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004e94:	e007      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004e96:	bf00      	nop
 8004e98:	e005      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004e9e:	bf00      	nop
 8004ea0:	44020c00 	.word	0x44020c00
        break;
 8004ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004eae:	4ba5      	ldr	r3, [pc, #660]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004eb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004eb4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	4aa1      	ldr	r2, [pc, #644]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004ec6:	e003      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004ecc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004edc:	673b      	str	r3, [r7, #112]	; 0x70
 8004ede:	2300      	movs	r3, #0
 8004ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8004ee2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	d03b      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ef6:	d01b      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004ef8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004efc:	d814      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004efe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f02:	d017      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004f04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f08:	d80e      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8004f0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f12:	d109      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f18:	3308      	adds	r3, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fdc6 	bl	8005aac <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004f26:	e008      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004f30:	bf00      	nop
 8004f32:	e002      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004f42:	4b80      	ldr	r3, [pc, #512]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004f44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f48:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004f4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	4a7c      	ldr	r2, [pc, #496]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004f5a:	e003      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004f60:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f72:	2300      	movs	r3, #0
 8004f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	d033      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004f80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f90:	d80e      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d012      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004f96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fd82 	bl	8005aac <RCCEx_PLL2_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004fae:	e006      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8004fb6:	e002      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fbe:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004fc6:	4b5f      	ldr	r3, [pc, #380]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004fc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fcc:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	4a5b      	ldr	r2, [pc, #364]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004fde:	e003      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004fe4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004fe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	6639      	str	r1, [r7, #96]	; 0x60
 8004ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004ffe:	460b      	mov	r3, r1
 8005000:	4313      	orrs	r3, r2
 8005002:	d033      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800500e:	d015      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005014:	d80e      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d012      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800501a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800501e:	d109      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* I3C2 clock source config set later after clock selection check */
        break;

      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005024:	3308      	adds	r3, #8
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fd40 	bl	8005aac <RCCEx_PLL2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005032:	e006      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800503a:	e002      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005042:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800504a:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800504c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005050:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505a:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800505c:	430b      	orrs	r3, r1
 800505e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005062:	e003      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005068:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800506c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	2100      	movs	r1, #0
 8005076:	65b9      	str	r1, [r7, #88]	; 0x58
 8005078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800507e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005082:	460b      	mov	r3, r1
 8005084:	4313      	orrs	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005088:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800508e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005092:	61d3      	str	r3, [r2, #28]
 8005094:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005096:	69d9      	ldr	r1, [r3, #28]
 8005098:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800509c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a0:	4a28      	ldr	r2, [pc, #160]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80050a2:	430b      	orrs	r3, r1
 80050a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80050b2:	653b      	str	r3, [r7, #80]	; 0x50
 80050b4:	2300      	movs	r3, #0
 80050b6:	657b      	str	r3, [r7, #84]	; 0x54
 80050b8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80050bc:	460b      	mov	r3, r1
 80050be:	4313      	orrs	r3, r2
 80050c0:	d046      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80050c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80050cc:	d021      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80050ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80050d2:	d81a      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80050d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d8:	d01d      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80050da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050de:	d814      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80050e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e4:	d019      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80050e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ea:	d80e      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d016      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80050f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f4:	d109      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050fa:	3308      	adds	r3, #8
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fcd5 	bl	8005aac <RCCEx_PLL2_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005108:	e00a      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005110:	e006      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005112:	bf00      	nop
 8005114:	e004      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005116:	bf00      	nop
 8005118:	e002      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800511a:	bf00      	nop
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800511e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005120:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10f      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800512a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800512e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005132:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	4a02      	ldr	r2, [pc, #8]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800513a:	430b      	orrs	r3, r1
 800513c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005140:	e006      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005142:	bf00      	nop
 8005144:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800514c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005150:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800515c:	64bb      	str	r3, [r7, #72]	; 0x48
 800515e:	2300      	movs	r3, #0
 8005160:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005162:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005166:	460b      	mov	r3, r1
 8005168:	4313      	orrs	r3, r2
 800516a:	d043      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800516c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005172:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005176:	d021      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8005178:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800517c:	d81a      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800517e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005182:	d01d      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8005184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005188:	d814      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800518a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800518e:	d019      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005194:	d80e      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d016      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800519a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519e:	d109      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051a4:	3308      	adds	r3, #8
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fc80 	bl	8005aac <RCCEx_PLL2_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80051b2:	e00a      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80051ba:	e006      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80051bc:	bf00      	nop
 80051be:	e004      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80051c0:	bf00      	nop
 80051c2:	e002      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80051c4:	bf00      	nop
 80051c6:	e000      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80051c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10c      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80051d2:	4bb6      	ldr	r3, [pc, #728]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80051d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80051d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80051dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	4ab2      	ldr	r2, [pc, #712]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80051f0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80051f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005200:	643b      	str	r3, [r7, #64]	; 0x40
 8005202:	2300      	movs	r3, #0
 8005204:	647b      	str	r3, [r7, #68]	; 0x44
 8005206:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800520a:	460b      	mov	r3, r1
 800520c:	4313      	orrs	r3, r2
 800520e:	d030      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005210:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005216:	2b05      	cmp	r3, #5
 8005218:	d80f      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800521a:	2b03      	cmp	r3, #3
 800521c:	d211      	bcs.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800521e:	2b01      	cmp	r3, #1
 8005220:	d911      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005222:	2b02      	cmp	r3, #2
 8005224:	d109      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005226:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800522a:	3308      	adds	r3, #8
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fc3d 	bl	8005aac <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005238:	e006      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005240:	e002      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005242:	bf00      	nop
 8005244:	e000      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005248:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10c      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005250:	4b96      	ldr	r3, [pc, #600]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005256:	f023 0107 	bic.w	r1, r3, #7
 800525a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800525e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005260:	4a92      	ldr	r2, [pc, #584]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005262:	430b      	orrs	r3, r1
 8005264:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005268:	e003      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800526e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005272:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	2100      	movs	r1, #0
 800527c:	63b9      	str	r1, [r7, #56]	; 0x38
 800527e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d022      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800528e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8005298:	2b08      	cmp	r3, #8
 800529a:	d005      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80052a2:	e002      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80052a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80052b2:	4b7e      	ldr	r3, [pc, #504]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052b8:	f023 0108 	bic.w	r1, r3, #8
 80052bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c2:	4a7a      	ldr	r2, [pc, #488]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052c4:	430b      	orrs	r3, r1
 80052c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052ca:	e003      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80052d0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
 80052e2:	2300      	movs	r3, #0
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
 80052e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80052ea:	460b      	mov	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f000 80b0 	beq.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80052f2:	4b6f      	ldr	r3, [pc, #444]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	4a6e      	ldr	r2, [pc, #440]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052fe:	f7fd f87b 	bl	80023f8 <HAL_GetTick>
 8005302:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005306:	e00b      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005308:	f7fd f876 	bl	80023f8 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d903      	bls.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 800531e:	e005      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005320:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ed      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 800532c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005330:	2b00      	cmp	r3, #0
 8005332:	f040 808a 	bne.w	800544a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005336:	4b5d      	ldr	r3, [pc, #372]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800533c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005344:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d022      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800534c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005352:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005356:	429a      	cmp	r2, r3
 8005358:	d01b      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800535a:	4b54      	ldr	r3, [pc, #336]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800535c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005368:	4b50      	ldr	r3, [pc, #320]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800536a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800536e:	4a4f      	ldr	r2, [pc, #316]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005374:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005378:	4b4c      	ldr	r3, [pc, #304]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800537a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800537e:	4a4b      	ldr	r2, [pc, #300]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005388:	4a48      	ldr	r2, [pc, #288]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800538a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800538e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d019      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fd f82b 	bl	80023f8 <HAL_GetTick>
 80053a2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a6:	e00d      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a8:	f7fd f826 	bl	80023f8 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d903      	bls.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            break;
 80053c2:	e006      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c4:	4b39      	ldr	r3, [pc, #228]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80053c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0ea      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80053d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d132      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80053da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e8:	d10f      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80053ea:	4b30      	ldr	r3, [pc, #192]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80053f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005402:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005404:	430b      	orrs	r3, r1
 8005406:	61d3      	str	r3, [r2, #28]
 8005408:	e005      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800540a:	4b28      	ldr	r3, [pc, #160]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	4a27      	ldr	r2, [pc, #156]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005410:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005414:	61d3      	str	r3, [r2, #28]
 8005416:	4b25      	ldr	r3, [pc, #148]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800541c:	4a23      	ldr	r2, [pc, #140]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800541e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005426:	4b21      	ldr	r3, [pc, #132]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005428:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800542c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005436:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005438:	430b      	orrs	r3, r1
 800543a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800543e:	e008      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005440:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005444:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8005448:	e003      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800544e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005460:	2300      	movs	r3, #0
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005464:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005468:	460b      	mov	r3, r1
 800546a:	4313      	orrs	r3, r2
 800546c:	d038      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800546e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005474:	2b30      	cmp	r3, #48	; 0x30
 8005476:	d014      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005478:	2b30      	cmp	r3, #48	; 0x30
 800547a:	d80e      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d012      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d80a      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d015      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005488:	2b10      	cmp	r3, #16
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	4a06      	ldr	r2, [pc, #24]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005496:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005498:	e00d      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80054a0:	e009      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80054a2:	bf00      	nop
 80054a4:	e007      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80054a6:	bf00      	nop
 80054a8:	e005      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x926>
 80054aa:	bf00      	nop
 80054ac:	44020c00 	.word	0x44020c00
 80054b0:	44020800 	.word	0x44020800
        break;
 80054b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10c      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80054be:	4bb5      	ldr	r3, [pc, #724]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80054c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ce:	49b1      	ldr	r1, [pc, #708]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80054d6:	e003      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80054dc:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80054e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80054ec:	623b      	str	r3, [r7, #32]
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054f6:	460b      	mov	r3, r1
 80054f8:	4313      	orrs	r3, r2
 80054fa:	d03c      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80054fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005502:	2b04      	cmp	r3, #4
 8005504:	d81d      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005521 	.word	0x08005521
 8005510:	0800552f 	.word	0x0800552f
 8005514:	08005543 	.word	0x08005543
 8005518:	0800554b 	.word	0x0800554b
 800551c:	0800554b 	.word	0x0800554b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005520:	4b9c      	ldr	r3, [pc, #624]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	4a9b      	ldr	r2, [pc, #620]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800552c:	e00e      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800552e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005532:	3308      	adds	r3, #8
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fab9 	bl	8005aac <RCCEx_PLL2_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005540:	e004      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005548:	e000      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800554a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10c      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005554:	4b8f      	ldr	r3, [pc, #572]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005564:	498b      	ldr	r1, [pc, #556]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800556c:	e003      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005572:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005576:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800558c:	460b      	mov	r3, r1
 800558e:	4313      	orrs	r3, r2
 8005590:	d03c      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005592:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	2b20      	cmp	r3, #32
 800559a:	d01f      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800559c:	2b20      	cmp	r3, #32
 800559e:	d819      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80055a0:	2b18      	cmp	r3, #24
 80055a2:	d01d      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80055a4:	2b18      	cmp	r3, #24
 80055a6:	d815      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d007      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80055b0:	e010      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b2:	4b78      	ldr	r3, [pc, #480]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	4a77      	ldr	r2, [pc, #476]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055bc:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80055be:	e010      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055c4:	3308      	adds	r3, #8
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fa70 	bl	8005aac <RCCEx_PLL2_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80055d2:	e006      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 80055da:	e002      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80055dc:	bf00      	nop
 80055de:	e000      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80055e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80055ea:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80055f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	4966      	ldr	r1, [pc, #408]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005602:	e003      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005608:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800560c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005622:	460b      	mov	r3, r1
 8005624:	4313      	orrs	r3, r2
 8005626:	d03e      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005628:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005632:	d020      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005638:	d819      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xade>
 800563a:	2bc0      	cmp	r3, #192	; 0xc0
 800563c:	d01d      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800563e:	2bc0      	cmp	r3, #192	; 0xc0
 8005640:	d815      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d007      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800564a:	e010      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564c:	4b51      	ldr	r3, [pc, #324]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	4a50      	ldr	r2, [pc, #320]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005656:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005658:	e010      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800565a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800565e:	3308      	adds	r3, #8
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fa23 	bl	8005aac <RCCEx_PLL2_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800566c:	e006      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005674:	e002      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800567a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10c      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005684:	4b43      	ldr	r3, [pc, #268]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800568a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800568e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005694:	493f      	ldr	r1, [pc, #252]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800569c:	e003      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80056a2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	2100      	movs	r1, #0
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056bc:	460b      	mov	r3, r1
 80056be:	4313      	orrs	r3, r2
 80056c0:	d038      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80056c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056cc:	d00e      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80056ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d2:	d815      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d017      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80056d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056dc:	d110      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056de:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80056e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e8:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80056ea:	e00e      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056f0:	3308      	adds	r3, #8
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f9da 	bl	8005aac <RCCEx_PLL2_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80056fe:	e004      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005706:	e000      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10c      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005712:	4b20      	ldr	r3, [pc, #128]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800571c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005722:	491c      	ldr	r1, [pc, #112]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800572a:	e003      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005730:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005734:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	2100      	movs	r1, #0
 800573e:	6039      	str	r1, [r7, #0]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	607b      	str	r3, [r7, #4]
 8005746:	e9d7 1200 	ldrd	r1, r2, [r7]
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d039      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005750:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005756:	2b30      	cmp	r3, #48	; 0x30
 8005758:	d01e      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800575a:	2b30      	cmp	r3, #48	; 0x30
 800575c:	d815      	bhi.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800575e:	2b10      	cmp	r3, #16
 8005760:	d002      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005762:	2b20      	cmp	r3, #32
 8005764:	d007      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005766:	e010      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	4a09      	ldr	r2, [pc, #36]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005774:	e011      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800577a:	3308      	adds	r3, #8
 800577c:	4618      	mov	r0, r3
 800577e:	f000 f995 	bl	8005aac <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005788:	e007      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        break;
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005792:	bf00      	nop
 8005794:	44020c00 	.word	0x44020c00
        break;
 8005798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10c      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b2:	4908      	ldr	r1, [pc, #32]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80057ba:	e003      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80057c0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80057c4:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	37a8      	adds	r7, #168	; 0xa8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d2:	bf00      	nop
 80057d4:	44020c00 	.word	0x44020c00

080057d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80057d8:	b480      	push	{r7}
 80057da:	b08b      	sub	sp, #44	; 0x2c
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80057e0:	4bad      	ldr	r3, [pc, #692]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80057ea:	4bab      	ldr	r3, [pc, #684]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80057f4:	4ba8      	ldr	r3, [pc, #672]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057fe:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005800:	4ba5      	ldr	r3, [pc, #660]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800580a:	4ba3      	ldr	r3, [pc, #652]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	08db      	lsrs	r3, r3, #3
 8005810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	fb02 f303 	mul.w	r3, r2, r3
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005822:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8126 	beq.w	8005a7a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d053      	beq.n	80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d86f      	bhi.n	800591a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d003      	beq.n	8005848 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d02b      	beq.n	800589e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005846:	e068      	b.n	800591a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005848:	4b93      	ldr	r3, [pc, #588]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	08db      	lsrs	r3, r3, #3
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	4a92      	ldr	r2, [pc, #584]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
 8005858:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	ee07 3a90 	vmov	s15, r3
 8005860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005880:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005898:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800589c:	e068      	b.n	8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80058ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80058be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80058c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80058da:	e049      	b.n	8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80058ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80058fc:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005914:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005918:	e02a      	b.n	8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800591a:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	08db      	lsrs	r3, r3, #3
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	4a5d      	ldr	r2, [pc, #372]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005926:	fa22 f303 	lsr.w	r3, r2, r3
 800592a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	ee07 3a90 	vmov	s15, r3
 800593c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005952:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800596e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005970:	4b49      	ldr	r3, [pc, #292]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597c:	d121      	bne.n	80059c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800597e:	4b46      	ldr	r3, [pc, #280]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d017      	beq.n	80059ba <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800598a:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598e:	0a5b      	lsrs	r3, r3, #9
 8005990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005994:	ee07 3a90 	vmov	s15, r3
 8005998:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800599c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80059a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80059a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e006      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e002      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059c8:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d4:	d121      	bne.n	8005a1a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80059d6:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d017      	beq.n	8005a12 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059e2:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80059f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80059fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a08:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	605a      	str	r2, [r3, #4]
 8005a10:	e006      	b.n	8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]
 8005a18:	e002      	b.n	8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d121      	bne.n	8005a72 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005a2e:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d017      	beq.n	8005a6a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	0e1b      	lsrs	r3, r3, #24
 8005a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a50:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005a54:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a60:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a68:	e010      	b.n	8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	e00c      	b.n	8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	e008      	b.n	8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	609a      	str	r2, [r3, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	372c      	adds	r7, #44	; 0x2c
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	44020c00 	.word	0x44020c00
 8005a9c:	03d09000 	.word	0x03d09000
 8005aa0:	46000000 	.word	0x46000000
 8005aa4:	4a742400 	.word	0x4a742400
 8005aa8:	4bbebc20 	.word	0x4bbebc20

08005aac <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005ab4:	4b48      	ldr	r3, [pc, #288]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a47      	ldr	r2, [pc, #284]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005aba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005abe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ac0:	f7fc fc9a 	bl	80023f8 <HAL_GetTick>
 8005ac4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ac6:	e008      	b.n	8005ada <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ac8:	f7fc fc96 	bl	80023f8 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e07a      	b.n	8005bd0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005ae6:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6811      	ldr	r1, [r2, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6852      	ldr	r2, [r2, #4]
 8005afa:	0212      	lsls	r2, r2, #8
 8005afc:	430a      	orrs	r2, r1
 8005afe:	4936      	ldr	r1, [pc, #216]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	025b      	lsls	r3, r3, #9
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b34:	4928      	ldr	r1, [pc, #160]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005b3a:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	f023 020c 	bic.w	r2, r3, #12
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	4924      	ldr	r1, [pc, #144]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005b4c:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	f023 0220 	bic.w	r2, r3, #32
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	491f      	ldr	r1, [pc, #124]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	491c      	ldr	r1, [pc, #112]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005b78:	4b17      	ldr	r3, [pc, #92]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6a12      	ldr	r2, [r2, #32]
 8005b88:	00d2      	lsls	r2, r2, #3
 8005b8a:	4913      	ldr	r1, [pc, #76]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a10      	ldr	r2, [pc, #64]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b96:	f043 0310 	orr.w	r3, r3, #16
 8005b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005b9c:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0d      	ldr	r2, [pc, #52]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005ba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ba6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ba8:	f7fc fc26 	bl	80023f8 <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bae:	e008      	b.n	8005bc2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bb0:	f7fc fc22 	bl	80023f8 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e006      	b.n	8005bd0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <RCCEx_PLL2_Config+0x12c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f0      	beq.n	8005bb0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0

}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	44020c00 	.word	0x44020c00

08005bdc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0e7      	b.n	8005dbe <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_SPI_Init+0x2c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b0f      	cmp	r3, #15
 8005c02:	d901      	bls.n	8005c08 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0da      	b.n	8005dbe <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fbc1 	bl	8006390 <SPI_GetPacketSize>
 8005c0e:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d102      	bne.n	8005c1e <HAL_SPI_Init+0x42>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d811      	bhi.n	8005c42 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c22:	4a69      	ldr	r2, [pc, #420]	; (8005dc8 <HAL_SPI_Init+0x1ec>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a67      	ldr	r2, [pc, #412]	; (8005dcc <HAL_SPI_Init+0x1f0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_SPI_Init+0x60>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a66      	ldr	r2, [pc, #408]	; (8005dd0 <HAL_SPI_Init+0x1f4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d104      	bne.n	8005c46 <HAL_SPI_Init+0x6a>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d901      	bls.n	8005c46 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e0bb      	b.n	8005dbe <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fb fec2 	bl	80019e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005c82:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c8c:	d119      	bne.n	8005cc2 <HAL_SPI_Init+0xe6>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c96:	d103      	bne.n	8005ca0 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10c      	bne.n	8005cc2 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb0:	d107      	bne.n	8005cc2 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cc0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00f      	beq.n	8005cee <HAL_SPI_Init+0x112>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d90b      	bls.n	8005cee <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e007      	b.n	8005cfe <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	ea42 0103 	orr.w	r1, r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6a:	ea42 0103 	orr.w	r1, r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40013000 	.word	0x40013000
 8005dcc:	40003800 	.word	0x40003800
 8005dd0:	40003c00 	.word	0x40003c00

08005dd4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	; 0x28
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3320      	adds	r3, #32
 8005dea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_SPI_Transmit+0x2a>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e1f5      	b.n	80061ea <HAL_SPI_Transmit+0x416>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e06:	f7fc faf7 	bl	80023f8 <HAL_GetTick>
 8005e0a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d007      	beq.n	8005e28 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005e24:	7efb      	ldrb	r3, [r7, #27]
 8005e26:	e1e0      	b.n	80061ea <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_SPI_Transmit+0x60>
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d107      	bne.n	8005e44 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005e40:	7efb      	ldrb	r3, [r7, #27]
 8005e42:	e1d2      	b.n	80061ea <HAL_SPI_Transmit+0x416>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2203      	movs	r2, #3
 8005e48:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005e94:	d108      	bne.n	8005ea8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e009      	b.n	8005ebc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005eba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	88f9      	ldrh	r1, [r7, #6]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee8:	d107      	bne.n	8005efa <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b0f      	cmp	r3, #15
 8005f00:	d956      	bls.n	8005fb0 <HAL_SPI_Transmit+0x1dc>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a8d      	ldr	r2, [pc, #564]	; (800613c <HAL_SPI_Transmit+0x368>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d04a      	beq.n	8005fa2 <HAL_SPI_Transmit+0x1ce>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a8b      	ldr	r2, [pc, #556]	; (8006140 <HAL_SPI_Transmit+0x36c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d045      	beq.n	8005fa2 <HAL_SPI_Transmit+0x1ce>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a8a      	ldr	r2, [pc, #552]	; (8006144 <HAL_SPI_Transmit+0x370>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d147      	bne.n	8005fb0 <HAL_SPI_Transmit+0x1dc>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f20:	e03f      	b.n	8005fa2 <HAL_SPI_Transmit+0x1ce>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d114      	bne.n	8005f5a <HAL_SPI_Transmit+0x186>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f40:	1d1a      	adds	r2, r3, #4
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005f58:	e023      	b.n	8005fa2 <HAL_SPI_Transmit+0x1ce>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5a:	f7fc fa4d 	bl	80023f8 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d803      	bhi.n	8005f72 <HAL_SPI_Transmit+0x19e>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d102      	bne.n	8005f78 <HAL_SPI_Transmit+0x1a4>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d114      	bne.n	8005fa2 <HAL_SPI_Transmit+0x1ce>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f93b 	bl	80061f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e123      	b.n	80061ea <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1b9      	bne.n	8005f22 <HAL_SPI_Transmit+0x14e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005fae:	e0f6      	b.n	800619e <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2b07      	cmp	r3, #7
 8005fb6:	f240 80eb 	bls.w	8006190 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005fba:	e05d      	b.n	8006078 <HAL_SPI_Transmit+0x2a4>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d132      	bne.n	8006030 <HAL_SPI_Transmit+0x25c>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d918      	bls.n	8006008 <HAL_SPI_Transmit+0x234>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d014      	beq.n	8006008 <HAL_SPI_Transmit+0x234>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b02      	subs	r3, #2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006006:	e037      	b.n	8006078 <HAL_SPI_Transmit+0x2a4>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600c:	881a      	ldrh	r2, [r3, #0]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800602e:	e023      	b.n	8006078 <HAL_SPI_Transmit+0x2a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006030:	f7fc f9e2 	bl	80023f8 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d803      	bhi.n	8006048 <HAL_SPI_Transmit+0x274>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d102      	bne.n	800604e <HAL_SPI_Transmit+0x27a>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d114      	bne.n	8006078 <HAL_SPI_Transmit+0x2a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f8d0 	bl	80061f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e0b8      	b.n	80061ea <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d19b      	bne.n	8005fbc <HAL_SPI_Transmit+0x1e8>
 8006084:	e08b      	b.n	800619e <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d159      	bne.n	8006148 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b03      	cmp	r3, #3
 800609e:	d918      	bls.n	80060d2 <HAL_SPI_Transmit+0x2fe>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d914      	bls.n	80060d2 <HAL_SPI_Transmit+0x2fe>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b8:	1d1a      	adds	r2, r3, #4
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b04      	subs	r3, #4
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80060d0:	e05e      	b.n	8006190 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d917      	bls.n	800610e <HAL_SPI_Transmit+0x33a>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d013      	beq.n	800610e <HAL_SPI_Transmit+0x33a>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ea:	881a      	ldrh	r2, [r3, #0]
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b02      	subs	r3, #2
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800610c:	e040      	b.n	8006190 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3320      	adds	r3, #32
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006138:	e02a      	b.n	8006190 <HAL_SPI_Transmit+0x3bc>
 800613a:	bf00      	nop
 800613c:	40013000 	.word	0x40013000
 8006140:	40003800 	.word	0x40003800
 8006144:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006148:	f7fc f956 	bl	80023f8 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d803      	bhi.n	8006160 <HAL_SPI_Transmit+0x38c>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615e:	d102      	bne.n	8006166 <HAL_SPI_Transmit+0x392>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d114      	bne.n	8006190 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f844 	bl	80061f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e02c      	b.n	80061ea <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	f47f af74 	bne.w	8006086 <HAL_SPI_Transmit+0x2b2>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2200      	movs	r2, #0
 80061a6:	2108      	movs	r1, #8
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f8c3 	bl	8006334 <SPI_WaitOnFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f815 	bl	80061f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <HAL_SPI_Transmit+0x416>
  }
  return errorcode;
 80061e8:	7efb      	ldrb	r3, [r7, #27]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop

080061f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0208 	orr.w	r2, r2, #8
 8006212:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0210 	orr.w	r2, r2, #16
 8006222:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006256:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b04      	cmp	r3, #4
 8006262:	d014      	beq.n	800628e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0220 	orr.w	r2, r2, #32
 800628c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b03      	cmp	r3, #3
 8006298:	d014      	beq.n	80062c4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00f      	beq.n	80062c4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062aa:	f043 0204 	orr.w	r2, r3, #4
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00f      	beq.n	80062ee <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d4:	f043 0201 	orr.w	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00f      	beq.n	8006318 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062fe:	f043 0208 	orr.w	r2, r3, #8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006316:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8006328:	bf00      	nop
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	4613      	mov	r3, r2
 8006342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006344:	e010      	b.n	8006368 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006346:	f7fc f857 	bl	80023f8 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d803      	bhi.n	800635e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d102      	bne.n	8006364 <SPI_WaitOnFlagUntilTimeout+0x30>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e00f      	b.n	8006388 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4013      	ands	r3, r2
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	429a      	cmp	r2, r3
 8006376:	bf0c      	ite	eq
 8006378:	2301      	moveq	r3, #1
 800637a:	2300      	movne	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	79fb      	ldrb	r3, [r7, #7]
 8006382:	429a      	cmp	r2, r3
 8006384:	d0df      	beq.n	8006346 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	3307      	adds	r3, #7
 80063ae:	08db      	lsrs	r3, r3, #3
 80063b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e049      	b.n	800646c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7fb fbbd 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f000 fb19 	bl	8006a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b01      	cmp	r3, #1
 8006486:	d001      	beq.n	800648c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e03b      	b.n	8006504 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <HAL_TIM_Base_Start_IT+0x9c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_TIM_Base_Start_IT+0x4e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b6:	d004      	beq.n	80064c2 <HAL_TIM_Base_Start_IT+0x4e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a15      	ldr	r2, [pc, #84]	; (8006514 <HAL_TIM_Base_Start_IT+0xa0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d115      	bne.n	80064ee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	4b13      	ldr	r3, [pc, #76]	; (8006518 <HAL_TIM_Base_Start_IT+0xa4>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b06      	cmp	r3, #6
 80064d2:	d015      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x8c>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064da:	d011      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ec:	e008      	b.n	8006500 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0201 	orr.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e000      	b.n	8006502 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006500:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40000400 	.word	0x40000400
 8006518:	00010007 	.word	0x00010007

0800651c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d020      	beq.n	8006580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01b      	beq.n	8006580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0202 	mvn.w	r2, #2
 8006550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa4a 	bl	8006a00 <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa3c 	bl	80069ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fa4d 	bl	8006a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d020      	beq.n	80065cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0204 	mvn.w	r2, #4
 800659c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa24 	bl	8006a00 <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa16 	bl	80069ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fa27 	bl	8006a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d020      	beq.n	8006618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01b      	beq.n	8006618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0208 	mvn.w	r2, #8
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2204      	movs	r2, #4
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f9fe 	bl	8006a00 <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9f0 	bl	80069ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fa01 	bl	8006a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b00      	cmp	r3, #0
 8006620:	d020      	beq.n	8006664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2208      	movs	r2, #8
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f9d8 	bl	8006a00 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9ca 	bl	80069ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f9db 	bl	8006a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00c      	beq.n	8006688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0201 	mvn.w	r2, #1
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fa f930 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fb30 	bl	8006d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00c      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fb28 	bl	8006d20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00c      	beq.n	80066f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f99a 	bl	8006a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00c      	beq.n	8006718 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0220 	mvn.w	r2, #32
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 faf0 	bl	8006cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fafc 	bl	8006d34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 faf4 	bl	8006d48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00c      	beq.n	8006784 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800677c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 faec 	bl	8006d5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00c      	beq.n	80067a8 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80067a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fae4 	bl	8006d70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_TIM_ConfigClockSource+0x1c>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e0fe      	b.n	80069ca <HAL_TIM_ConfigClockSource+0x21a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80067ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006808:	f000 80c9 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800680c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006810:	f200 80ce 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006814:	4a6f      	ldr	r2, [pc, #444]	; (80069d4 <HAL_TIM_ConfigClockSource+0x224>)
 8006816:	4293      	cmp	r3, r2
 8006818:	f000 80c1 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800681c:	4a6d      	ldr	r2, [pc, #436]	; (80069d4 <HAL_TIM_ConfigClockSource+0x224>)
 800681e:	4293      	cmp	r3, r2
 8006820:	f200 80c6 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006824:	4a6c      	ldr	r2, [pc, #432]	; (80069d8 <HAL_TIM_ConfigClockSource+0x228>)
 8006826:	4293      	cmp	r3, r2
 8006828:	f000 80b9 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800682c:	4a6a      	ldr	r2, [pc, #424]	; (80069d8 <HAL_TIM_ConfigClockSource+0x228>)
 800682e:	4293      	cmp	r3, r2
 8006830:	f200 80be 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006834:	4a69      	ldr	r2, [pc, #420]	; (80069dc <HAL_TIM_ConfigClockSource+0x22c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	f000 80b1 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800683c:	4a67      	ldr	r2, [pc, #412]	; (80069dc <HAL_TIM_ConfigClockSource+0x22c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	f200 80b6 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006844:	4a66      	ldr	r2, [pc, #408]	; (80069e0 <HAL_TIM_ConfigClockSource+0x230>)
 8006846:	4293      	cmp	r3, r2
 8006848:	f000 80a9 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800684c:	4a64      	ldr	r2, [pc, #400]	; (80069e0 <HAL_TIM_ConfigClockSource+0x230>)
 800684e:	4293      	cmp	r3, r2
 8006850:	f200 80ae 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006854:	4a63      	ldr	r2, [pc, #396]	; (80069e4 <HAL_TIM_ConfigClockSource+0x234>)
 8006856:	4293      	cmp	r3, r2
 8006858:	f000 80a1 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800685c:	4a61      	ldr	r2, [pc, #388]	; (80069e4 <HAL_TIM_ConfigClockSource+0x234>)
 800685e:	4293      	cmp	r3, r2
 8006860:	f200 80a6 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006864:	4a60      	ldr	r2, [pc, #384]	; (80069e8 <HAL_TIM_ConfigClockSource+0x238>)
 8006866:	4293      	cmp	r3, r2
 8006868:	f000 8099 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800686c:	4a5e      	ldr	r2, [pc, #376]	; (80069e8 <HAL_TIM_ConfigClockSource+0x238>)
 800686e:	4293      	cmp	r3, r2
 8006870:	f200 809e 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006874:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006878:	f000 8091 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800687c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006880:	f200 8096 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006888:	f000 8089 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 800688c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006890:	f200 808e 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 8006894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006898:	d03e      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 800689a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689e:	f200 8087 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	f000 8086 	beq.w	80069b6 <HAL_TIM_ConfigClockSource+0x206>
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	d87f      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 80068b0:	2b70      	cmp	r3, #112	; 0x70
 80068b2:	d01a      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x13a>
 80068b4:	2b70      	cmp	r3, #112	; 0x70
 80068b6:	d87b      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 80068b8:	2b60      	cmp	r3, #96	; 0x60
 80068ba:	d050      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x1ae>
 80068bc:	2b60      	cmp	r3, #96	; 0x60
 80068be:	d877      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 80068c0:	2b50      	cmp	r3, #80	; 0x50
 80068c2:	d03c      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x18e>
 80068c4:	2b50      	cmp	r3, #80	; 0x50
 80068c6:	d873      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d058      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x1ce>
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d86f      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 80068d0:	2b30      	cmp	r3, #48	; 0x30
 80068d2:	d064      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 80068d4:	2b30      	cmp	r3, #48	; 0x30
 80068d6:	d86b      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d060      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d867      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x200>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05c      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d05a      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x1ee>
 80068e8:	e062      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068fa:	f000 f975 	bl	8006be8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800690c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	609a      	str	r2, [r3, #8]
      break;
 8006916:	e04f      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006928:	f000 f95e 	bl	8006be8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800693a:	609a      	str	r2, [r3, #8]
      break;
 800693c:	e03c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800694a:	461a      	mov	r2, r3
 800694c:	f000 f8d0 	bl	8006af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2150      	movs	r1, #80	; 0x50
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f929 	bl	8006bae <TIM_ITRx_SetConfig>
      break;
 800695c:	e02c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800696a:	461a      	mov	r2, r3
 800696c:	f000 f8ef 	bl	8006b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2160      	movs	r1, #96	; 0x60
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f919 	bl	8006bae <TIM_ITRx_SetConfig>
      break;
 800697c:	e01c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800698a:	461a      	mov	r2, r3
 800698c:	f000 f8b0 	bl	8006af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2140      	movs	r1, #64	; 0x40
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f909 	bl	8006bae <TIM_ITRx_SetConfig>
      break;
 800699c:	e00c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 f900 	bl	8006bae <TIM_ITRx_SetConfig>
      break;
 80069ae:	e003      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      break;
 80069b4:	e000      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80069b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	00100070 	.word	0x00100070
 80069d8:	00100060 	.word	0x00100060
 80069dc:	00100050 	.word	0x00100050
 80069e0:	00100040 	.word	0x00100040
 80069e4:	00100030 	.word	0x00100030
 80069e8:	00100020 	.word	0x00100020

080069ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a26      	ldr	r2, [pc, #152]	; (8006ae8 <TIM_Base_SetConfig+0xac>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d007      	beq.n	8006a64 <TIM_Base_SetConfig+0x28>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5a:	d003      	beq.n	8006a64 <TIM_Base_SetConfig+0x28>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a23      	ldr	r2, [pc, #140]	; (8006aec <TIM_Base_SetConfig+0xb0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d108      	bne.n	8006a76 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a1b      	ldr	r2, [pc, #108]	; (8006ae8 <TIM_Base_SetConfig+0xac>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d007      	beq.n	8006a8e <TIM_Base_SetConfig+0x52>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a84:	d003      	beq.n	8006a8e <TIM_Base_SetConfig+0x52>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a18      	ldr	r2, [pc, #96]	; (8006aec <TIM_Base_SetConfig+0xb0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d108      	bne.n	8006aa0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <TIM_Base_SetConfig+0xac>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d103      	bne.n	8006ad4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	615a      	str	r2, [r3, #20]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40000400 	.word	0x40000400

08006af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f023 0201 	bic.w	r2, r3, #1
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 030a 	bic.w	r3, r3, #10
 8006b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b087      	sub	sp, #28
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	f023 0210 	bic.w	r2, r3, #16
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	031b      	lsls	r3, r3, #12
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f043 0307 	orr.w	r3, r3, #7
 8006bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	609a      	str	r2, [r3, #8]
}
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	021a      	lsls	r2, r3, #8
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	609a      	str	r2, [r3, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e051      	b.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d108      	bne.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cac:	d004      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a10      	ldr	r2, [pc, #64]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d10c      	bne.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40000400 	.word	0x40000400

08006cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <malloc>:
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <malloc+0xc>)
 8006d86:	4601      	mov	r1, r0
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f000 b82b 	b.w	8006de4 <_malloc_r>
 8006d8e:	bf00      	nop
 8006d90:	20000088 	.word	0x20000088

08006d94 <free>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <free+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f000 bb19 	b.w	80073d0 <_free_r>
 8006d9e:	bf00      	nop
 8006da0:	20000088 	.word	0x20000088

08006da4 <sbrk_aligned>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	4e0e      	ldr	r6, [pc, #56]	; (8006de0 <sbrk_aligned+0x3c>)
 8006da8:	460c      	mov	r4, r1
 8006daa:	4605      	mov	r5, r0
 8006dac:	6831      	ldr	r1, [r6, #0]
 8006dae:	b911      	cbnz	r1, 8006db6 <sbrk_aligned+0x12>
 8006db0:	f000 fabe 	bl	8007330 <_sbrk_r>
 8006db4:	6030      	str	r0, [r6, #0]
 8006db6:	4621      	mov	r1, r4
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 fab9 	bl	8007330 <_sbrk_r>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d00a      	beq.n	8006dd8 <sbrk_aligned+0x34>
 8006dc2:	1cc4      	adds	r4, r0, #3
 8006dc4:	f024 0403 	bic.w	r4, r4, #3
 8006dc8:	42a0      	cmp	r0, r4
 8006dca:	d007      	beq.n	8006ddc <sbrk_aligned+0x38>
 8006dcc:	1a21      	subs	r1, r4, r0
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f000 faae 	bl	8007330 <_sbrk_r>
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d101      	bne.n	8006ddc <sbrk_aligned+0x38>
 8006dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8006ddc:	4620      	mov	r0, r4
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	200003ac 	.word	0x200003ac

08006de4 <_malloc_r>:
 8006de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de8:	1ccd      	adds	r5, r1, #3
 8006dea:	4607      	mov	r7, r0
 8006dec:	f025 0503 	bic.w	r5, r5, #3
 8006df0:	3508      	adds	r5, #8
 8006df2:	2d0c      	cmp	r5, #12
 8006df4:	bf38      	it	cc
 8006df6:	250c      	movcc	r5, #12
 8006df8:	2d00      	cmp	r5, #0
 8006dfa:	db01      	blt.n	8006e00 <_malloc_r+0x1c>
 8006dfc:	42a9      	cmp	r1, r5
 8006dfe:	d905      	bls.n	8006e0c <_malloc_r+0x28>
 8006e00:	230c      	movs	r3, #12
 8006e02:	2600      	movs	r6, #0
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	4630      	mov	r0, r6
 8006e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ee0 <_malloc_r+0xfc>
 8006e10:	f000 f868 	bl	8006ee4 <__malloc_lock>
 8006e14:	f8d8 3000 	ldr.w	r3, [r8]
 8006e18:	461c      	mov	r4, r3
 8006e1a:	bb5c      	cbnz	r4, 8006e74 <_malloc_r+0x90>
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7ff ffc0 	bl	8006da4 <sbrk_aligned>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	4604      	mov	r4, r0
 8006e28:	d155      	bne.n	8006ed6 <_malloc_r+0xf2>
 8006e2a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e2e:	4626      	mov	r6, r4
 8006e30:	2e00      	cmp	r6, #0
 8006e32:	d145      	bne.n	8006ec0 <_malloc_r+0xdc>
 8006e34:	2c00      	cmp	r4, #0
 8006e36:	d048      	beq.n	8006eca <_malloc_r+0xe6>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	eb04 0903 	add.w	r9, r4, r3
 8006e42:	f000 fa75 	bl	8007330 <_sbrk_r>
 8006e46:	4581      	cmp	r9, r0
 8006e48:	d13f      	bne.n	8006eca <_malloc_r+0xe6>
 8006e4a:	6821      	ldr	r1, [r4, #0]
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	1a6d      	subs	r5, r5, r1
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7ff ffa7 	bl	8006da4 <sbrk_aligned>
 8006e56:	3001      	adds	r0, #1
 8006e58:	d037      	beq.n	8006eca <_malloc_r+0xe6>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	442b      	add	r3, r5
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	f8d8 3000 	ldr.w	r3, [r8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d038      	beq.n	8006eda <_malloc_r+0xf6>
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	42a2      	cmp	r2, r4
 8006e6c:	d12b      	bne.n	8006ec6 <_malloc_r+0xe2>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	e00f      	b.n	8006e94 <_malloc_r+0xb0>
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	1b52      	subs	r2, r2, r5
 8006e78:	d41f      	bmi.n	8006eba <_malloc_r+0xd6>
 8006e7a:	2a0b      	cmp	r2, #11
 8006e7c:	d917      	bls.n	8006eae <_malloc_r+0xca>
 8006e7e:	1961      	adds	r1, r4, r5
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	6025      	str	r5, [r4, #0]
 8006e84:	bf18      	it	ne
 8006e86:	6059      	strne	r1, [r3, #4]
 8006e88:	6863      	ldr	r3, [r4, #4]
 8006e8a:	bf08      	it	eq
 8006e8c:	f8c8 1000 	streq.w	r1, [r8]
 8006e90:	5162      	str	r2, [r4, r5]
 8006e92:	604b      	str	r3, [r1, #4]
 8006e94:	f104 060b 	add.w	r6, r4, #11
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f000 f829 	bl	8006ef0 <__malloc_unlock>
 8006e9e:	1d23      	adds	r3, r4, #4
 8006ea0:	f026 0607 	bic.w	r6, r6, #7
 8006ea4:	1af2      	subs	r2, r6, r3
 8006ea6:	d0ae      	beq.n	8006e06 <_malloc_r+0x22>
 8006ea8:	1b9b      	subs	r3, r3, r6
 8006eaa:	50a3      	str	r3, [r4, r2]
 8006eac:	e7ab      	b.n	8006e06 <_malloc_r+0x22>
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	6862      	ldr	r2, [r4, #4]
 8006eb2:	d1dd      	bne.n	8006e70 <_malloc_r+0x8c>
 8006eb4:	f8c8 2000 	str.w	r2, [r8]
 8006eb8:	e7ec      	b.n	8006e94 <_malloc_r+0xb0>
 8006eba:	4623      	mov	r3, r4
 8006ebc:	6864      	ldr	r4, [r4, #4]
 8006ebe:	e7ac      	b.n	8006e1a <_malloc_r+0x36>
 8006ec0:	4634      	mov	r4, r6
 8006ec2:	6876      	ldr	r6, [r6, #4]
 8006ec4:	e7b4      	b.n	8006e30 <_malloc_r+0x4c>
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	e7cc      	b.n	8006e64 <_malloc_r+0x80>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	4638      	mov	r0, r7
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	f000 f80e 	bl	8006ef0 <__malloc_unlock>
 8006ed4:	e797      	b.n	8006e06 <_malloc_r+0x22>
 8006ed6:	6025      	str	r5, [r4, #0]
 8006ed8:	e7dc      	b.n	8006e94 <_malloc_r+0xb0>
 8006eda:	605b      	str	r3, [r3, #4]
 8006edc:	deff      	udf	#255	; 0xff
 8006ede:	bf00      	nop
 8006ee0:	200003a8 	.word	0x200003a8

08006ee4 <__malloc_lock>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__malloc_lock+0x8>)
 8006ee6:	f000 ba70 	b.w	80073ca <__retarget_lock_acquire_recursive>
 8006eea:	bf00      	nop
 8006eec:	200004f0 	.word	0x200004f0

08006ef0 <__malloc_unlock>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	; (8006ef8 <__malloc_unlock+0x8>)
 8006ef2:	f000 ba6b 	b.w	80073cc <__retarget_lock_release_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	200004f0 	.word	0x200004f0

08006efc <std>:
 8006efc:	2300      	movs	r3, #0
 8006efe:	b510      	push	{r4, lr}
 8006f00:	4604      	mov	r4, r0
 8006f02:	6083      	str	r3, [r0, #8]
 8006f04:	8181      	strh	r1, [r0, #12]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6643      	str	r3, [r0, #100]	; 0x64
 8006f0a:	81c2      	strh	r2, [r0, #14]
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	6183      	str	r3, [r0, #24]
 8006f10:	e9c0 3300 	strd	r3, r3, [r0]
 8006f14:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f18:	305c      	adds	r0, #92	; 0x5c
 8006f1a:	f000 f9cc 	bl	80072b6 <memset>
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <std+0x58>)
 8006f20:	6224      	str	r4, [r4, #32]
 8006f22:	6263      	str	r3, [r4, #36]	; 0x24
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <std+0x5c>)
 8006f26:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <std+0x60>)
 8006f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <std+0x64>)
 8006f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <std+0x68>)
 8006f32:	429c      	cmp	r4, r3
 8006f34:	d006      	beq.n	8006f44 <std+0x48>
 8006f36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f3a:	4294      	cmp	r4, r2
 8006f3c:	d002      	beq.n	8006f44 <std+0x48>
 8006f3e:	33d0      	adds	r3, #208	; 0xd0
 8006f40:	429c      	cmp	r4, r3
 8006f42:	d105      	bne.n	8006f50 <std+0x54>
 8006f44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4c:	f000 ba3c 	b.w	80073c8 <__retarget_lock_init_recursive>
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop
 8006f54:	08007211 	.word	0x08007211
 8006f58:	08007233 	.word	0x08007233
 8006f5c:	0800726b 	.word	0x0800726b
 8006f60:	0800728f 	.word	0x0800728f
 8006f64:	200003b0 	.word	0x200003b0

08006f68 <stdio_exit_handler>:
 8006f68:	4a02      	ldr	r2, [pc, #8]	; (8006f74 <stdio_exit_handler+0xc>)
 8006f6a:	4903      	ldr	r1, [pc, #12]	; (8006f78 <stdio_exit_handler+0x10>)
 8006f6c:	4803      	ldr	r0, [pc, #12]	; (8006f7c <stdio_exit_handler+0x14>)
 8006f6e:	f000 b869 	b.w	8007044 <_fwalk_sglue>
 8006f72:	bf00      	nop
 8006f74:	20000030 	.word	0x20000030
 8006f78:	08007b1d 	.word	0x08007b1d
 8006f7c:	2000003c 	.word	0x2000003c

08006f80 <cleanup_stdio>:
 8006f80:	6841      	ldr	r1, [r0, #4]
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <cleanup_stdio+0x34>)
 8006f84:	4299      	cmp	r1, r3
 8006f86:	b510      	push	{r4, lr}
 8006f88:	4604      	mov	r4, r0
 8006f8a:	d001      	beq.n	8006f90 <cleanup_stdio+0x10>
 8006f8c:	f000 fdc6 	bl	8007b1c <_fflush_r>
 8006f90:	68a1      	ldr	r1, [r4, #8]
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <cleanup_stdio+0x38>)
 8006f94:	4299      	cmp	r1, r3
 8006f96:	d002      	beq.n	8006f9e <cleanup_stdio+0x1e>
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 fdbf 	bl	8007b1c <_fflush_r>
 8006f9e:	68e1      	ldr	r1, [r4, #12]
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <cleanup_stdio+0x3c>)
 8006fa2:	4299      	cmp	r1, r3
 8006fa4:	d004      	beq.n	8006fb0 <cleanup_stdio+0x30>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f000 bdb6 	b.w	8007b1c <_fflush_r>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200003b0 	.word	0x200003b0
 8006fb8:	20000418 	.word	0x20000418
 8006fbc:	20000480 	.word	0x20000480

08006fc0 <global_stdio_init.part.0>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <global_stdio_init.part.0+0x30>)
 8006fc4:	2104      	movs	r1, #4
 8006fc6:	4c0b      	ldr	r4, [pc, #44]	; (8006ff4 <global_stdio_init.part.0+0x34>)
 8006fc8:	4a0b      	ldr	r2, [pc, #44]	; (8006ff8 <global_stdio_init.part.0+0x38>)
 8006fca:	4620      	mov	r0, r4
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f7ff ff94 	bl	8006efc <std>
 8006fd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006fd8:	2201      	movs	r2, #1
 8006fda:	2109      	movs	r1, #9
 8006fdc:	f7ff ff8e 	bl	8006efc <std>
 8006fe0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	2112      	movs	r1, #18
 8006fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fec:	f7ff bf86 	b.w	8006efc <std>
 8006ff0:	200004e8 	.word	0x200004e8
 8006ff4:	200003b0 	.word	0x200003b0
 8006ff8:	08006f69 	.word	0x08006f69

08006ffc <__sfp_lock_acquire>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__sfp_lock_acquire+0x8>)
 8006ffe:	f000 b9e4 	b.w	80073ca <__retarget_lock_acquire_recursive>
 8007002:	bf00      	nop
 8007004:	200004f1 	.word	0x200004f1

08007008 <__sfp_lock_release>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sfp_lock_release+0x8>)
 800700a:	f000 b9df 	b.w	80073cc <__retarget_lock_release_recursive>
 800700e:	bf00      	nop
 8007010:	200004f1 	.word	0x200004f1

08007014 <__sinit>:
 8007014:	b510      	push	{r4, lr}
 8007016:	4604      	mov	r4, r0
 8007018:	f7ff fff0 	bl	8006ffc <__sfp_lock_acquire>
 800701c:	6a23      	ldr	r3, [r4, #32]
 800701e:	b11b      	cbz	r3, 8007028 <__sinit+0x14>
 8007020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007024:	f7ff bff0 	b.w	8007008 <__sfp_lock_release>
 8007028:	4b04      	ldr	r3, [pc, #16]	; (800703c <__sinit+0x28>)
 800702a:	6223      	str	r3, [r4, #32]
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <__sinit+0x2c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f5      	bne.n	8007020 <__sinit+0xc>
 8007034:	f7ff ffc4 	bl	8006fc0 <global_stdio_init.part.0>
 8007038:	e7f2      	b.n	8007020 <__sinit+0xc>
 800703a:	bf00      	nop
 800703c:	08006f81 	.word	0x08006f81
 8007040:	200004e8 	.word	0x200004e8

08007044 <_fwalk_sglue>:
 8007044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007048:	4607      	mov	r7, r0
 800704a:	4688      	mov	r8, r1
 800704c:	4614      	mov	r4, r2
 800704e:	2600      	movs	r6, #0
 8007050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007054:	f1b9 0901 	subs.w	r9, r9, #1
 8007058:	d505      	bpl.n	8007066 <_fwalk_sglue+0x22>
 800705a:	6824      	ldr	r4, [r4, #0]
 800705c:	2c00      	cmp	r4, #0
 800705e:	d1f7      	bne.n	8007050 <_fwalk_sglue+0xc>
 8007060:	4630      	mov	r0, r6
 8007062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d907      	bls.n	800707c <_fwalk_sglue+0x38>
 800706c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007070:	3301      	adds	r3, #1
 8007072:	d003      	beq.n	800707c <_fwalk_sglue+0x38>
 8007074:	4629      	mov	r1, r5
 8007076:	4638      	mov	r0, r7
 8007078:	47c0      	blx	r8
 800707a:	4306      	orrs	r6, r0
 800707c:	3568      	adds	r5, #104	; 0x68
 800707e:	e7e9      	b.n	8007054 <_fwalk_sglue+0x10>

08007080 <iprintf>:
 8007080:	b40f      	push	{r0, r1, r2, r3}
 8007082:	b507      	push	{r0, r1, r2, lr}
 8007084:	4906      	ldr	r1, [pc, #24]	; (80070a0 <iprintf+0x20>)
 8007086:	ab04      	add	r3, sp, #16
 8007088:	6808      	ldr	r0, [r1, #0]
 800708a:	f853 2b04 	ldr.w	r2, [r3], #4
 800708e:	6881      	ldr	r1, [r0, #8]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	f000 fa13 	bl	80074bc <_vfiprintf_r>
 8007096:	b003      	add	sp, #12
 8007098:	f85d eb04 	ldr.w	lr, [sp], #4
 800709c:	b004      	add	sp, #16
 800709e:	4770      	bx	lr
 80070a0:	20000088 	.word	0x20000088

080070a4 <setbuf>:
 80070a4:	fab1 f281 	clz	r2, r1
 80070a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ac:	0952      	lsrs	r2, r2, #5
 80070ae:	0052      	lsls	r2, r2, #1
 80070b0:	f000 b800 	b.w	80070b4 <setvbuf>

080070b4 <setvbuf>:
 80070b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	461d      	mov	r5, r3
 80070ba:	4b54      	ldr	r3, [pc, #336]	; (800720c <setvbuf+0x158>)
 80070bc:	4604      	mov	r4, r0
 80070be:	460e      	mov	r6, r1
 80070c0:	681f      	ldr	r7, [r3, #0]
 80070c2:	4690      	mov	r8, r2
 80070c4:	b127      	cbz	r7, 80070d0 <setvbuf+0x1c>
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	b913      	cbnz	r3, 80070d0 <setvbuf+0x1c>
 80070ca:	4638      	mov	r0, r7
 80070cc:	f7ff ffa2 	bl	8007014 <__sinit>
 80070d0:	f1b8 0f02 	cmp.w	r8, #2
 80070d4:	d006      	beq.n	80070e4 <setvbuf+0x30>
 80070d6:	f1b8 0f01 	cmp.w	r8, #1
 80070da:	f200 8093 	bhi.w	8007204 <setvbuf+0x150>
 80070de:	2d00      	cmp	r5, #0
 80070e0:	f2c0 8090 	blt.w	8007204 <setvbuf+0x150>
 80070e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070e6:	07da      	lsls	r2, r3, #31
 80070e8:	d405      	bmi.n	80070f6 <setvbuf+0x42>
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	059b      	lsls	r3, r3, #22
 80070ee:	d402      	bmi.n	80070f6 <setvbuf+0x42>
 80070f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070f2:	f000 f96a 	bl	80073ca <__retarget_lock_acquire_recursive>
 80070f6:	4621      	mov	r1, r4
 80070f8:	4638      	mov	r0, r7
 80070fa:	f000 fd0f 	bl	8007b1c <_fflush_r>
 80070fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007100:	b141      	cbz	r1, 8007114 <setvbuf+0x60>
 8007102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007106:	4299      	cmp	r1, r3
 8007108:	d002      	beq.n	8007110 <setvbuf+0x5c>
 800710a:	4638      	mov	r0, r7
 800710c:	f000 f960 	bl	80073d0 <_free_r>
 8007110:	2300      	movs	r3, #0
 8007112:	6363      	str	r3, [r4, #52]	; 0x34
 8007114:	2300      	movs	r3, #0
 8007116:	61a3      	str	r3, [r4, #24]
 8007118:	6063      	str	r3, [r4, #4]
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	0618      	lsls	r0, r3, #24
 800711e:	d503      	bpl.n	8007128 <setvbuf+0x74>
 8007120:	6921      	ldr	r1, [r4, #16]
 8007122:	4638      	mov	r0, r7
 8007124:	f000 f954 	bl	80073d0 <_free_r>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f1b8 0f02 	cmp.w	r8, #2
 800712e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	d05e      	beq.n	80071f8 <setvbuf+0x144>
 800713a:	ab01      	add	r3, sp, #4
 800713c:	466a      	mov	r2, sp
 800713e:	4621      	mov	r1, r4
 8007140:	4638      	mov	r0, r7
 8007142:	f000 fd13 	bl	8007b6c <__swhatbuf_r>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	4318      	orrs	r0, r3
 800714a:	81a0      	strh	r0, [r4, #12]
 800714c:	bb2d      	cbnz	r5, 800719a <setvbuf+0xe6>
 800714e:	9d00      	ldr	r5, [sp, #0]
 8007150:	4628      	mov	r0, r5
 8007152:	f7ff fe17 	bl	8006d84 <malloc>
 8007156:	4606      	mov	r6, r0
 8007158:	2800      	cmp	r0, #0
 800715a:	d14f      	bne.n	80071fc <setvbuf+0x148>
 800715c:	f8dd 9000 	ldr.w	r9, [sp]
 8007160:	45a9      	cmp	r9, r5
 8007162:	d13d      	bne.n	80071e0 <setvbuf+0x12c>
 8007164:	f04f 35ff 	mov.w	r5, #4294967295
 8007168:	2200      	movs	r2, #0
 800716a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716e:	60a2      	str	r2, [r4, #8]
 8007170:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007174:	f043 0302 	orr.w	r3, r3, #2
 8007178:	6022      	str	r2, [r4, #0]
 800717a:	6122      	str	r2, [r4, #16]
 800717c:	2201      	movs	r2, #1
 800717e:	81a3      	strh	r3, [r4, #12]
 8007180:	6162      	str	r2, [r4, #20]
 8007182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007184:	07d1      	lsls	r1, r2, #31
 8007186:	d404      	bmi.n	8007192 <setvbuf+0xde>
 8007188:	059b      	lsls	r3, r3, #22
 800718a:	d402      	bmi.n	8007192 <setvbuf+0xde>
 800718c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718e:	f000 f91d 	bl	80073cc <__retarget_lock_release_recursive>
 8007192:	4628      	mov	r0, r5
 8007194:	b003      	add	sp, #12
 8007196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800719a:	2e00      	cmp	r6, #0
 800719c:	d0d8      	beq.n	8007150 <setvbuf+0x9c>
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	b913      	cbnz	r3, 80071a8 <setvbuf+0xf4>
 80071a2:	4638      	mov	r0, r7
 80071a4:	f7ff ff36 	bl	8007014 <__sinit>
 80071a8:	f1b8 0f01 	cmp.w	r8, #1
 80071ac:	6026      	str	r6, [r4, #0]
 80071ae:	bf02      	ittt	eq
 80071b0:	89a3      	ldrheq	r3, [r4, #12]
 80071b2:	f043 0301 	orreq.w	r3, r3, #1
 80071b6:	81a3      	strheq	r3, [r4, #12]
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f013 0208 	ands.w	r2, r3, #8
 80071be:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80071c2:	d01d      	beq.n	8007200 <setvbuf+0x14c>
 80071c4:	07da      	lsls	r2, r3, #31
 80071c6:	bf45      	ittet	mi
 80071c8:	2200      	movmi	r2, #0
 80071ca:	426d      	negmi	r5, r5
 80071cc:	60a5      	strpl	r5, [r4, #8]
 80071ce:	60a2      	strmi	r2, [r4, #8]
 80071d0:	bf48      	it	mi
 80071d2:	61a5      	strmi	r5, [r4, #24]
 80071d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80071d6:	f015 0501 	ands.w	r5, r5, #1
 80071da:	d0d5      	beq.n	8007188 <setvbuf+0xd4>
 80071dc:	2500      	movs	r5, #0
 80071de:	e7d8      	b.n	8007192 <setvbuf+0xde>
 80071e0:	4648      	mov	r0, r9
 80071e2:	f7ff fdcf 	bl	8006d84 <malloc>
 80071e6:	4606      	mov	r6, r0
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d0bb      	beq.n	8007164 <setvbuf+0xb0>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	464d      	mov	r5, r9
 80071f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f4:	81a3      	strh	r3, [r4, #12]
 80071f6:	e7d2      	b.n	800719e <setvbuf+0xea>
 80071f8:	2500      	movs	r5, #0
 80071fa:	e7b5      	b.n	8007168 <setvbuf+0xb4>
 80071fc:	46a9      	mov	r9, r5
 80071fe:	e7f5      	b.n	80071ec <setvbuf+0x138>
 8007200:	60a2      	str	r2, [r4, #8]
 8007202:	e7e7      	b.n	80071d4 <setvbuf+0x120>
 8007204:	f04f 35ff 	mov.w	r5, #4294967295
 8007208:	e7c3      	b.n	8007192 <setvbuf+0xde>
 800720a:	bf00      	nop
 800720c:	20000088 	.word	0x20000088

08007210 <__sread>:
 8007210:	b510      	push	{r4, lr}
 8007212:	460c      	mov	r4, r1
 8007214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007218:	f000 f878 	bl	800730c <_read_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	bfab      	itete	ge
 8007220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007222:	89a3      	ldrhlt	r3, [r4, #12]
 8007224:	181b      	addge	r3, r3, r0
 8007226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800722a:	bfac      	ite	ge
 800722c:	6563      	strge	r3, [r4, #84]	; 0x54
 800722e:	81a3      	strhlt	r3, [r4, #12]
 8007230:	bd10      	pop	{r4, pc}

08007232 <__swrite>:
 8007232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007236:	461f      	mov	r7, r3
 8007238:	898b      	ldrh	r3, [r1, #12]
 800723a:	4605      	mov	r5, r0
 800723c:	460c      	mov	r4, r1
 800723e:	05db      	lsls	r3, r3, #23
 8007240:	4616      	mov	r6, r2
 8007242:	d505      	bpl.n	8007250 <__swrite+0x1e>
 8007244:	2302      	movs	r3, #2
 8007246:	2200      	movs	r2, #0
 8007248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724c:	f000 f84c 	bl	80072e8 <_lseek_r>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	4632      	mov	r2, r6
 8007254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007258:	4628      	mov	r0, r5
 800725a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	463b      	mov	r3, r7
 8007262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	f000 b873 	b.w	8007350 <_write_r>

0800726a <__sseek>:
 800726a:	b510      	push	{r4, lr}
 800726c:	460c      	mov	r4, r1
 800726e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007272:	f000 f839 	bl	80072e8 <_lseek_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	bf15      	itete	ne
 800727c:	6560      	strne	r0, [r4, #84]	; 0x54
 800727e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007286:	81a3      	strheq	r3, [r4, #12]
 8007288:	bf18      	it	ne
 800728a:	81a3      	strhne	r3, [r4, #12]
 800728c:	bd10      	pop	{r4, pc}

0800728e <__sclose>:
 800728e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007292:	f000 b819 	b.w	80072c8 <_close_r>

08007296 <memcmp>:
 8007296:	3901      	subs	r1, #1
 8007298:	4402      	add	r2, r0
 800729a:	b510      	push	{r4, lr}
 800729c:	4290      	cmp	r0, r2
 800729e:	d101      	bne.n	80072a4 <memcmp+0xe>
 80072a0:	2000      	movs	r0, #0
 80072a2:	e005      	b.n	80072b0 <memcmp+0x1a>
 80072a4:	7803      	ldrb	r3, [r0, #0]
 80072a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072aa:	42a3      	cmp	r3, r4
 80072ac:	d001      	beq.n	80072b2 <memcmp+0x1c>
 80072ae:	1b18      	subs	r0, r3, r4
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	3001      	adds	r0, #1
 80072b4:	e7f2      	b.n	800729c <memcmp+0x6>

080072b6 <memset>:
 80072b6:	4402      	add	r2, r0
 80072b8:	4603      	mov	r3, r0
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d100      	bne.n	80072c0 <memset+0xa>
 80072be:	4770      	bx	lr
 80072c0:	f803 1b01 	strb.w	r1, [r3], #1
 80072c4:	e7f9      	b.n	80072ba <memset+0x4>
	...

080072c8 <_close_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	2300      	movs	r3, #0
 80072cc:	4d05      	ldr	r5, [pc, #20]	; (80072e4 <_close_r+0x1c>)
 80072ce:	4604      	mov	r4, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	602b      	str	r3, [r5, #0]
 80072d4:	f7fa ff19 	bl	800210a <_close>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_close_r+0x1a>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_close_r+0x1a>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	200004ec 	.word	0x200004ec

080072e8 <_lseek_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4604      	mov	r4, r0
 80072ec:	4d06      	ldr	r5, [pc, #24]	; (8007308 <_lseek_r+0x20>)
 80072ee:	4608      	mov	r0, r1
 80072f0:	4611      	mov	r1, r2
 80072f2:	2200      	movs	r2, #0
 80072f4:	602a      	str	r2, [r5, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	f7fa ff2e 	bl	8002158 <_lseek>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d102      	bne.n	8007306 <_lseek_r+0x1e>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	b103      	cbz	r3, 8007306 <_lseek_r+0x1e>
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	200004ec 	.word	0x200004ec

0800730c <_read_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4604      	mov	r4, r0
 8007310:	4d06      	ldr	r5, [pc, #24]	; (800732c <_read_r+0x20>)
 8007312:	4608      	mov	r0, r1
 8007314:	4611      	mov	r1, r2
 8007316:	2200      	movs	r2, #0
 8007318:	602a      	str	r2, [r5, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	f7fa fed8 	bl	80020d0 <_read>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_read_r+0x1e>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_read_r+0x1e>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	200004ec 	.word	0x200004ec

08007330 <_sbrk_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	2300      	movs	r3, #0
 8007334:	4d05      	ldr	r5, [pc, #20]	; (800734c <_sbrk_r+0x1c>)
 8007336:	4604      	mov	r4, r0
 8007338:	4608      	mov	r0, r1
 800733a:	602b      	str	r3, [r5, #0]
 800733c:	f7fa ff1a 	bl	8002174 <_sbrk>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_sbrk_r+0x1a>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_sbrk_r+0x1a>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	200004ec 	.word	0x200004ec

08007350 <_write_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4604      	mov	r4, r0
 8007354:	4d06      	ldr	r5, [pc, #24]	; (8007370 <_write_r+0x20>)
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7fa f88a 	bl	8001478 <_write>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_write_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_write_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	200004ec 	.word	0x200004ec

08007374 <__errno>:
 8007374:	4b01      	ldr	r3, [pc, #4]	; (800737c <__errno+0x8>)
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000088 	.word	0x20000088

08007380 <__libc_init_array>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	4d0d      	ldr	r5, [pc, #52]	; (80073b8 <__libc_init_array+0x38>)
 8007384:	2600      	movs	r6, #0
 8007386:	4c0d      	ldr	r4, [pc, #52]	; (80073bc <__libc_init_array+0x3c>)
 8007388:	1b64      	subs	r4, r4, r5
 800738a:	10a4      	asrs	r4, r4, #2
 800738c:	42a6      	cmp	r6, r4
 800738e:	d109      	bne.n	80073a4 <__libc_init_array+0x24>
 8007390:	4d0b      	ldr	r5, [pc, #44]	; (80073c0 <__libc_init_array+0x40>)
 8007392:	2600      	movs	r6, #0
 8007394:	4c0b      	ldr	r4, [pc, #44]	; (80073c4 <__libc_init_array+0x44>)
 8007396:	f000 fd0f 	bl	8007db8 <_init>
 800739a:	1b64      	subs	r4, r4, r5
 800739c:	10a4      	asrs	r4, r4, #2
 800739e:	42a6      	cmp	r6, r4
 80073a0:	d105      	bne.n	80073ae <__libc_init_array+0x2e>
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a8:	3601      	adds	r6, #1
 80073aa:	4798      	blx	r3
 80073ac:	e7ee      	b.n	800738c <__libc_init_array+0xc>
 80073ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b2:	3601      	adds	r6, #1
 80073b4:	4798      	blx	r3
 80073b6:	e7f2      	b.n	800739e <__libc_init_array+0x1e>
 80073b8:	08009290 	.word	0x08009290
 80073bc:	08009290 	.word	0x08009290
 80073c0:	08009290 	.word	0x08009290
 80073c4:	08009294 	.word	0x08009294

080073c8 <__retarget_lock_init_recursive>:
 80073c8:	4770      	bx	lr

080073ca <__retarget_lock_acquire_recursive>:
 80073ca:	4770      	bx	lr

080073cc <__retarget_lock_release_recursive>:
 80073cc:	4770      	bx	lr
	...

080073d0 <_free_r>:
 80073d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073d2:	2900      	cmp	r1, #0
 80073d4:	d043      	beq.n	800745e <_free_r+0x8e>
 80073d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073da:	1f0c      	subs	r4, r1, #4
 80073dc:	9001      	str	r0, [sp, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfb8      	it	lt
 80073e2:	18e4      	addlt	r4, r4, r3
 80073e4:	f7ff fd7e 	bl	8006ee4 <__malloc_lock>
 80073e8:	4a1e      	ldr	r2, [pc, #120]	; (8007464 <_free_r+0x94>)
 80073ea:	9801      	ldr	r0, [sp, #4]
 80073ec:	6813      	ldr	r3, [r2, #0]
 80073ee:	b933      	cbnz	r3, 80073fe <_free_r+0x2e>
 80073f0:	6063      	str	r3, [r4, #4]
 80073f2:	6014      	str	r4, [r2, #0]
 80073f4:	b003      	add	sp, #12
 80073f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073fa:	f7ff bd79 	b.w	8006ef0 <__malloc_unlock>
 80073fe:	42a3      	cmp	r3, r4
 8007400:	d908      	bls.n	8007414 <_free_r+0x44>
 8007402:	6825      	ldr	r5, [r4, #0]
 8007404:	1961      	adds	r1, r4, r5
 8007406:	428b      	cmp	r3, r1
 8007408:	bf01      	itttt	eq
 800740a:	6819      	ldreq	r1, [r3, #0]
 800740c:	685b      	ldreq	r3, [r3, #4]
 800740e:	1949      	addeq	r1, r1, r5
 8007410:	6021      	streq	r1, [r4, #0]
 8007412:	e7ed      	b.n	80073f0 <_free_r+0x20>
 8007414:	461a      	mov	r2, r3
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	b10b      	cbz	r3, 800741e <_free_r+0x4e>
 800741a:	42a3      	cmp	r3, r4
 800741c:	d9fa      	bls.n	8007414 <_free_r+0x44>
 800741e:	6811      	ldr	r1, [r2, #0]
 8007420:	1855      	adds	r5, r2, r1
 8007422:	42a5      	cmp	r5, r4
 8007424:	d10b      	bne.n	800743e <_free_r+0x6e>
 8007426:	6824      	ldr	r4, [r4, #0]
 8007428:	4421      	add	r1, r4
 800742a:	1854      	adds	r4, r2, r1
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	42a3      	cmp	r3, r4
 8007430:	d1e0      	bne.n	80073f4 <_free_r+0x24>
 8007432:	681c      	ldr	r4, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	440c      	add	r4, r1
 8007438:	6053      	str	r3, [r2, #4]
 800743a:	6014      	str	r4, [r2, #0]
 800743c:	e7da      	b.n	80073f4 <_free_r+0x24>
 800743e:	d902      	bls.n	8007446 <_free_r+0x76>
 8007440:	230c      	movs	r3, #12
 8007442:	6003      	str	r3, [r0, #0]
 8007444:	e7d6      	b.n	80073f4 <_free_r+0x24>
 8007446:	6825      	ldr	r5, [r4, #0]
 8007448:	1961      	adds	r1, r4, r5
 800744a:	428b      	cmp	r3, r1
 800744c:	bf02      	ittt	eq
 800744e:	6819      	ldreq	r1, [r3, #0]
 8007450:	685b      	ldreq	r3, [r3, #4]
 8007452:	1949      	addeq	r1, r1, r5
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	bf08      	it	eq
 8007458:	6021      	streq	r1, [r4, #0]
 800745a:	6054      	str	r4, [r2, #4]
 800745c:	e7ca      	b.n	80073f4 <_free_r+0x24>
 800745e:	b003      	add	sp, #12
 8007460:	bd30      	pop	{r4, r5, pc}
 8007462:	bf00      	nop
 8007464:	200003a8 	.word	0x200003a8

08007468 <__sfputc_r>:
 8007468:	6893      	ldr	r3, [r2, #8]
 800746a:	3b01      	subs	r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	6093      	str	r3, [r2, #8]
 8007470:	b410      	push	{r4}
 8007472:	da08      	bge.n	8007486 <__sfputc_r+0x1e>
 8007474:	6994      	ldr	r4, [r2, #24]
 8007476:	42a3      	cmp	r3, r4
 8007478:	db01      	blt.n	800747e <__sfputc_r+0x16>
 800747a:	290a      	cmp	r1, #10
 800747c:	d103      	bne.n	8007486 <__sfputc_r+0x1e>
 800747e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007482:	f000 bbd4 	b.w	8007c2e <__swbuf_r>
 8007486:	6813      	ldr	r3, [r2, #0]
 8007488:	1c58      	adds	r0, r3, #1
 800748a:	6010      	str	r0, [r2, #0]
 800748c:	4608      	mov	r0, r1
 800748e:	7019      	strb	r1, [r3, #0]
 8007490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007494:	4770      	bx	lr

08007496 <__sfputs_r>:
 8007496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007498:	4606      	mov	r6, r0
 800749a:	460f      	mov	r7, r1
 800749c:	4614      	mov	r4, r2
 800749e:	18d5      	adds	r5, r2, r3
 80074a0:	42ac      	cmp	r4, r5
 80074a2:	d101      	bne.n	80074a8 <__sfputs_r+0x12>
 80074a4:	2000      	movs	r0, #0
 80074a6:	e007      	b.n	80074b8 <__sfputs_r+0x22>
 80074a8:	463a      	mov	r2, r7
 80074aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff ffda 	bl	8007468 <__sfputc_r>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d1f3      	bne.n	80074a0 <__sfputs_r+0xa>
 80074b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074bc <_vfiprintf_r>:
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	460d      	mov	r5, r1
 80074c2:	b09d      	sub	sp, #116	; 0x74
 80074c4:	4614      	mov	r4, r2
 80074c6:	4698      	mov	r8, r3
 80074c8:	4606      	mov	r6, r0
 80074ca:	b118      	cbz	r0, 80074d4 <_vfiprintf_r+0x18>
 80074cc:	6a03      	ldr	r3, [r0, #32]
 80074ce:	b90b      	cbnz	r3, 80074d4 <_vfiprintf_r+0x18>
 80074d0:	f7ff fda0 	bl	8007014 <__sinit>
 80074d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074d6:	07d9      	lsls	r1, r3, #31
 80074d8:	d405      	bmi.n	80074e6 <_vfiprintf_r+0x2a>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	059a      	lsls	r2, r3, #22
 80074de:	d402      	bmi.n	80074e6 <_vfiprintf_r+0x2a>
 80074e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074e2:	f7ff ff72 	bl	80073ca <__retarget_lock_acquire_recursive>
 80074e6:	89ab      	ldrh	r3, [r5, #12]
 80074e8:	071b      	lsls	r3, r3, #28
 80074ea:	d501      	bpl.n	80074f0 <_vfiprintf_r+0x34>
 80074ec:	692b      	ldr	r3, [r5, #16]
 80074ee:	b99b      	cbnz	r3, 8007518 <_vfiprintf_r+0x5c>
 80074f0:	4629      	mov	r1, r5
 80074f2:	4630      	mov	r0, r6
 80074f4:	f000 fbd8 	bl	8007ca8 <__swsetup_r>
 80074f8:	b170      	cbz	r0, 8007518 <_vfiprintf_r+0x5c>
 80074fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074fc:	07dc      	lsls	r4, r3, #31
 80074fe:	d504      	bpl.n	800750a <_vfiprintf_r+0x4e>
 8007500:	f04f 30ff 	mov.w	r0, #4294967295
 8007504:	b01d      	add	sp, #116	; 0x74
 8007506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750a:	89ab      	ldrh	r3, [r5, #12]
 800750c:	0598      	lsls	r0, r3, #22
 800750e:	d4f7      	bmi.n	8007500 <_vfiprintf_r+0x44>
 8007510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007512:	f7ff ff5b 	bl	80073cc <__retarget_lock_release_recursive>
 8007516:	e7f3      	b.n	8007500 <_vfiprintf_r+0x44>
 8007518:	2300      	movs	r3, #0
 800751a:	f8cd 800c 	str.w	r8, [sp, #12]
 800751e:	f04f 0901 	mov.w	r9, #1
 8007522:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80076dc <_vfiprintf_r+0x220>
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	2320      	movs	r3, #32
 800752a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752e:	2330      	movs	r3, #48	; 0x30
 8007530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007534:	4623      	mov	r3, r4
 8007536:	469a      	mov	sl, r3
 8007538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753c:	b10a      	cbz	r2, 8007542 <_vfiprintf_r+0x86>
 800753e:	2a25      	cmp	r2, #37	; 0x25
 8007540:	d1f9      	bne.n	8007536 <_vfiprintf_r+0x7a>
 8007542:	ebba 0b04 	subs.w	fp, sl, r4
 8007546:	d00b      	beq.n	8007560 <_vfiprintf_r+0xa4>
 8007548:	465b      	mov	r3, fp
 800754a:	4622      	mov	r2, r4
 800754c:	4629      	mov	r1, r5
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ffa1 	bl	8007496 <__sfputs_r>
 8007554:	3001      	adds	r0, #1
 8007556:	f000 80a9 	beq.w	80076ac <_vfiprintf_r+0x1f0>
 800755a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800755c:	445a      	add	r2, fp
 800755e:	9209      	str	r2, [sp, #36]	; 0x24
 8007560:	f89a 3000 	ldrb.w	r3, [sl]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80a1 	beq.w	80076ac <_vfiprintf_r+0x1f0>
 800756a:	2300      	movs	r3, #0
 800756c:	f04f 32ff 	mov.w	r2, #4294967295
 8007570:	f10a 0a01 	add.w	sl, sl, #1
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	9307      	str	r3, [sp, #28]
 8007578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800757c:	931a      	str	r3, [sp, #104]	; 0x68
 800757e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007582:	4654      	mov	r4, sl
 8007584:	2205      	movs	r2, #5
 8007586:	4855      	ldr	r0, [pc, #340]	; (80076dc <_vfiprintf_r+0x220>)
 8007588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800758c:	f000 fc06 	bl	8007d9c <memchr>
 8007590:	9a04      	ldr	r2, [sp, #16]
 8007592:	b9d8      	cbnz	r0, 80075cc <_vfiprintf_r+0x110>
 8007594:	06d1      	lsls	r1, r2, #27
 8007596:	bf44      	itt	mi
 8007598:	2320      	movmi	r3, #32
 800759a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800759e:	0713      	lsls	r3, r2, #28
 80075a0:	bf44      	itt	mi
 80075a2:	232b      	movmi	r3, #43	; 0x2b
 80075a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a8:	f89a 3000 	ldrb.w	r3, [sl]
 80075ac:	2b2a      	cmp	r3, #42	; 0x2a
 80075ae:	d015      	beq.n	80075dc <_vfiprintf_r+0x120>
 80075b0:	9a07      	ldr	r2, [sp, #28]
 80075b2:	4654      	mov	r4, sl
 80075b4:	2000      	movs	r0, #0
 80075b6:	f04f 0c0a 	mov.w	ip, #10
 80075ba:	4621      	mov	r1, r4
 80075bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075c0:	3b30      	subs	r3, #48	; 0x30
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d94d      	bls.n	8007662 <_vfiprintf_r+0x1a6>
 80075c6:	b1b0      	cbz	r0, 80075f6 <_vfiprintf_r+0x13a>
 80075c8:	9207      	str	r2, [sp, #28]
 80075ca:	e014      	b.n	80075f6 <_vfiprintf_r+0x13a>
 80075cc:	eba0 0308 	sub.w	r3, r0, r8
 80075d0:	46a2      	mov	sl, r4
 80075d2:	fa09 f303 	lsl.w	r3, r9, r3
 80075d6:	4313      	orrs	r3, r2
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	e7d2      	b.n	8007582 <_vfiprintf_r+0xc6>
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	1d19      	adds	r1, r3, #4
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	9103      	str	r1, [sp, #12]
 80075e6:	bfbb      	ittet	lt
 80075e8:	425b      	neglt	r3, r3
 80075ea:	f042 0202 	orrlt.w	r2, r2, #2
 80075ee:	9307      	strge	r3, [sp, #28]
 80075f0:	9307      	strlt	r3, [sp, #28]
 80075f2:	bfb8      	it	lt
 80075f4:	9204      	strlt	r2, [sp, #16]
 80075f6:	7823      	ldrb	r3, [r4, #0]
 80075f8:	2b2e      	cmp	r3, #46	; 0x2e
 80075fa:	d10c      	bne.n	8007616 <_vfiprintf_r+0x15a>
 80075fc:	7863      	ldrb	r3, [r4, #1]
 80075fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007600:	d134      	bne.n	800766c <_vfiprintf_r+0x1b0>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	3402      	adds	r4, #2
 8007606:	1d1a      	adds	r2, r3, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	9203      	str	r2, [sp, #12]
 800760e:	bfb8      	it	lt
 8007610:	f04f 33ff 	movlt.w	r3, #4294967295
 8007614:	9305      	str	r3, [sp, #20]
 8007616:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80076ec <_vfiprintf_r+0x230>
 800761a:	2203      	movs	r2, #3
 800761c:	7821      	ldrb	r1, [r4, #0]
 800761e:	4650      	mov	r0, sl
 8007620:	f000 fbbc 	bl	8007d9c <memchr>
 8007624:	b138      	cbz	r0, 8007636 <_vfiprintf_r+0x17a>
 8007626:	eba0 000a 	sub.w	r0, r0, sl
 800762a:	2240      	movs	r2, #64	; 0x40
 800762c:	9b04      	ldr	r3, [sp, #16]
 800762e:	3401      	adds	r4, #1
 8007630:	4082      	lsls	r2, r0
 8007632:	4313      	orrs	r3, r2
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	2206      	movs	r2, #6
 800763c:	4828      	ldr	r0, [pc, #160]	; (80076e0 <_vfiprintf_r+0x224>)
 800763e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007642:	f000 fbab 	bl	8007d9c <memchr>
 8007646:	2800      	cmp	r0, #0
 8007648:	d03f      	beq.n	80076ca <_vfiprintf_r+0x20e>
 800764a:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <_vfiprintf_r+0x228>)
 800764c:	bb1b      	cbnz	r3, 8007696 <_vfiprintf_r+0x1da>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	3307      	adds	r3, #7
 8007652:	f023 0307 	bic.w	r3, r3, #7
 8007656:	3308      	adds	r3, #8
 8007658:	9303      	str	r3, [sp, #12]
 800765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765c:	443b      	add	r3, r7
 800765e:	9309      	str	r3, [sp, #36]	; 0x24
 8007660:	e768      	b.n	8007534 <_vfiprintf_r+0x78>
 8007662:	fb0c 3202 	mla	r2, ip, r2, r3
 8007666:	460c      	mov	r4, r1
 8007668:	2001      	movs	r0, #1
 800766a:	e7a6      	b.n	80075ba <_vfiprintf_r+0xfe>
 800766c:	2300      	movs	r3, #0
 800766e:	3401      	adds	r4, #1
 8007670:	f04f 0c0a 	mov.w	ip, #10
 8007674:	4619      	mov	r1, r3
 8007676:	9305      	str	r3, [sp, #20]
 8007678:	4620      	mov	r0, r4
 800767a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800767e:	3a30      	subs	r2, #48	; 0x30
 8007680:	2a09      	cmp	r2, #9
 8007682:	d903      	bls.n	800768c <_vfiprintf_r+0x1d0>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0c6      	beq.n	8007616 <_vfiprintf_r+0x15a>
 8007688:	9105      	str	r1, [sp, #20]
 800768a:	e7c4      	b.n	8007616 <_vfiprintf_r+0x15a>
 800768c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007690:	4604      	mov	r4, r0
 8007692:	2301      	movs	r3, #1
 8007694:	e7f0      	b.n	8007678 <_vfiprintf_r+0x1bc>
 8007696:	ab03      	add	r3, sp, #12
 8007698:	462a      	mov	r2, r5
 800769a:	a904      	add	r1, sp, #16
 800769c:	4630      	mov	r0, r6
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <_vfiprintf_r+0x22c>)
 80076a2:	f3af 8000 	nop.w
 80076a6:	4607      	mov	r7, r0
 80076a8:	1c78      	adds	r0, r7, #1
 80076aa:	d1d6      	bne.n	800765a <_vfiprintf_r+0x19e>
 80076ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ae:	07d9      	lsls	r1, r3, #31
 80076b0:	d405      	bmi.n	80076be <_vfiprintf_r+0x202>
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	059a      	lsls	r2, r3, #22
 80076b6:	d402      	bmi.n	80076be <_vfiprintf_r+0x202>
 80076b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ba:	f7ff fe87 	bl	80073cc <__retarget_lock_release_recursive>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	065b      	lsls	r3, r3, #25
 80076c2:	f53f af1d 	bmi.w	8007500 <_vfiprintf_r+0x44>
 80076c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c8:	e71c      	b.n	8007504 <_vfiprintf_r+0x48>
 80076ca:	ab03      	add	r3, sp, #12
 80076cc:	462a      	mov	r2, r5
 80076ce:	a904      	add	r1, sp, #16
 80076d0:	4630      	mov	r0, r6
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <_vfiprintf_r+0x22c>)
 80076d6:	f000 f87d 	bl	80077d4 <_printf_i>
 80076da:	e7e4      	b.n	80076a6 <_vfiprintf_r+0x1ea>
 80076dc:	0800925c 	.word	0x0800925c
 80076e0:	08009266 	.word	0x08009266
 80076e4:	00000000 	.word	0x00000000
 80076e8:	08007497 	.word	0x08007497
 80076ec:	08009262 	.word	0x08009262

080076f0 <_printf_common>:
 80076f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f4:	4616      	mov	r6, r2
 80076f6:	4699      	mov	r9, r3
 80076f8:	688a      	ldr	r2, [r1, #8]
 80076fa:	4607      	mov	r7, r0
 80076fc:	690b      	ldr	r3, [r1, #16]
 80076fe:	460c      	mov	r4, r1
 8007700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007704:	4293      	cmp	r3, r2
 8007706:	bfb8      	it	lt
 8007708:	4613      	movlt	r3, r2
 800770a:	6033      	str	r3, [r6, #0]
 800770c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007710:	b10a      	cbz	r2, 8007716 <_printf_common+0x26>
 8007712:	3301      	adds	r3, #1
 8007714:	6033      	str	r3, [r6, #0]
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	0699      	lsls	r1, r3, #26
 800771a:	bf42      	ittt	mi
 800771c:	6833      	ldrmi	r3, [r6, #0]
 800771e:	3302      	addmi	r3, #2
 8007720:	6033      	strmi	r3, [r6, #0]
 8007722:	6825      	ldr	r5, [r4, #0]
 8007724:	f015 0506 	ands.w	r5, r5, #6
 8007728:	d106      	bne.n	8007738 <_printf_common+0x48>
 800772a:	f104 0a19 	add.w	sl, r4, #25
 800772e:	68e3      	ldr	r3, [r4, #12]
 8007730:	6832      	ldr	r2, [r6, #0]
 8007732:	1a9b      	subs	r3, r3, r2
 8007734:	42ab      	cmp	r3, r5
 8007736:	dc2b      	bgt.n	8007790 <_printf_common+0xa0>
 8007738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800773c:	1e13      	subs	r3, r2, #0
 800773e:	6822      	ldr	r2, [r4, #0]
 8007740:	bf18      	it	ne
 8007742:	2301      	movne	r3, #1
 8007744:	0692      	lsls	r2, r2, #26
 8007746:	d430      	bmi.n	80077aa <_printf_common+0xba>
 8007748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800774c:	4649      	mov	r1, r9
 800774e:	4638      	mov	r0, r7
 8007750:	47c0      	blx	r8
 8007752:	3001      	adds	r0, #1
 8007754:	d023      	beq.n	800779e <_printf_common+0xae>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	341a      	adds	r4, #26
 800775a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800775e:	f003 0306 	and.w	r3, r3, #6
 8007762:	2b04      	cmp	r3, #4
 8007764:	bf0a      	itet	eq
 8007766:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800776a:	2500      	movne	r5, #0
 800776c:	6833      	ldreq	r3, [r6, #0]
 800776e:	f04f 0600 	mov.w	r6, #0
 8007772:	bf08      	it	eq
 8007774:	1aed      	subeq	r5, r5, r3
 8007776:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800777a:	bf08      	it	eq
 800777c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007780:	4293      	cmp	r3, r2
 8007782:	bfc4      	itt	gt
 8007784:	1a9b      	subgt	r3, r3, r2
 8007786:	18ed      	addgt	r5, r5, r3
 8007788:	42b5      	cmp	r5, r6
 800778a:	d11a      	bne.n	80077c2 <_printf_common+0xd2>
 800778c:	2000      	movs	r0, #0
 800778e:	e008      	b.n	80077a2 <_printf_common+0xb2>
 8007790:	2301      	movs	r3, #1
 8007792:	4652      	mov	r2, sl
 8007794:	4649      	mov	r1, r9
 8007796:	4638      	mov	r0, r7
 8007798:	47c0      	blx	r8
 800779a:	3001      	adds	r0, #1
 800779c:	d103      	bne.n	80077a6 <_printf_common+0xb6>
 800779e:	f04f 30ff 	mov.w	r0, #4294967295
 80077a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a6:	3501      	adds	r5, #1
 80077a8:	e7c1      	b.n	800772e <_printf_common+0x3e>
 80077aa:	18e1      	adds	r1, r4, r3
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	2030      	movs	r0, #48	; 0x30
 80077b0:	3302      	adds	r3, #2
 80077b2:	4422      	add	r2, r4
 80077b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077c0:	e7c2      	b.n	8007748 <_printf_common+0x58>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4622      	mov	r2, r4
 80077c6:	4649      	mov	r1, r9
 80077c8:	4638      	mov	r0, r7
 80077ca:	47c0      	blx	r8
 80077cc:	3001      	adds	r0, #1
 80077ce:	d0e6      	beq.n	800779e <_printf_common+0xae>
 80077d0:	3601      	adds	r6, #1
 80077d2:	e7d9      	b.n	8007788 <_printf_common+0x98>

080077d4 <_printf_i>:
 80077d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	7e0f      	ldrb	r7, [r1, #24]
 80077da:	4691      	mov	r9, r2
 80077dc:	4680      	mov	r8, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	2f78      	cmp	r7, #120	; 0x78
 80077e2:	469a      	mov	sl, r3
 80077e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077ea:	d807      	bhi.n	80077fc <_printf_i+0x28>
 80077ec:	2f62      	cmp	r7, #98	; 0x62
 80077ee:	d80a      	bhi.n	8007806 <_printf_i+0x32>
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	f000 80d3 	beq.w	800799c <_printf_i+0x1c8>
 80077f6:	2f58      	cmp	r7, #88	; 0x58
 80077f8:	f000 80bf 	beq.w	800797a <_printf_i+0x1a6>
 80077fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007804:	e03a      	b.n	800787c <_printf_i+0xa8>
 8007806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800780a:	2b15      	cmp	r3, #21
 800780c:	d8f6      	bhi.n	80077fc <_printf_i+0x28>
 800780e:	a101      	add	r1, pc, #4	; (adr r1, 8007814 <_printf_i+0x40>)
 8007810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007814:	0800786d 	.word	0x0800786d
 8007818:	08007881 	.word	0x08007881
 800781c:	080077fd 	.word	0x080077fd
 8007820:	080077fd 	.word	0x080077fd
 8007824:	080077fd 	.word	0x080077fd
 8007828:	080077fd 	.word	0x080077fd
 800782c:	08007881 	.word	0x08007881
 8007830:	080077fd 	.word	0x080077fd
 8007834:	080077fd 	.word	0x080077fd
 8007838:	080077fd 	.word	0x080077fd
 800783c:	080077fd 	.word	0x080077fd
 8007840:	08007983 	.word	0x08007983
 8007844:	080078ad 	.word	0x080078ad
 8007848:	0800793f 	.word	0x0800793f
 800784c:	080077fd 	.word	0x080077fd
 8007850:	080077fd 	.word	0x080077fd
 8007854:	080079a5 	.word	0x080079a5
 8007858:	080077fd 	.word	0x080077fd
 800785c:	080078ad 	.word	0x080078ad
 8007860:	080077fd 	.word	0x080077fd
 8007864:	080077fd 	.word	0x080077fd
 8007868:	08007947 	.word	0x08007947
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	1d1a      	adds	r2, r3, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	602a      	str	r2, [r5, #0]
 8007874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800787c:	2301      	movs	r3, #1
 800787e:	e09e      	b.n	80079be <_printf_i+0x1ea>
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	682b      	ldr	r3, [r5, #0]
 8007884:	0607      	lsls	r7, r0, #24
 8007886:	f103 0104 	add.w	r1, r3, #4
 800788a:	6029      	str	r1, [r5, #0]
 800788c:	d501      	bpl.n	8007892 <_printf_i+0xbe>
 800788e:	681e      	ldr	r6, [r3, #0]
 8007890:	e003      	b.n	800789a <_printf_i+0xc6>
 8007892:	0646      	lsls	r6, r0, #25
 8007894:	d5fb      	bpl.n	800788e <_printf_i+0xba>
 8007896:	f9b3 6000 	ldrsh.w	r6, [r3]
 800789a:	2e00      	cmp	r6, #0
 800789c:	da03      	bge.n	80078a6 <_printf_i+0xd2>
 800789e:	232d      	movs	r3, #45	; 0x2d
 80078a0:	4276      	negs	r6, r6
 80078a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078a6:	4859      	ldr	r0, [pc, #356]	; (8007a0c <_printf_i+0x238>)
 80078a8:	230a      	movs	r3, #10
 80078aa:	e012      	b.n	80078d2 <_printf_i+0xfe>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	1d19      	adds	r1, r3, #4
 80078b2:	6029      	str	r1, [r5, #0]
 80078b4:	0605      	lsls	r5, r0, #24
 80078b6:	d501      	bpl.n	80078bc <_printf_i+0xe8>
 80078b8:	681e      	ldr	r6, [r3, #0]
 80078ba:	e002      	b.n	80078c2 <_printf_i+0xee>
 80078bc:	0641      	lsls	r1, r0, #25
 80078be:	d5fb      	bpl.n	80078b8 <_printf_i+0xe4>
 80078c0:	881e      	ldrh	r6, [r3, #0]
 80078c2:	2f6f      	cmp	r7, #111	; 0x6f
 80078c4:	4851      	ldr	r0, [pc, #324]	; (8007a0c <_printf_i+0x238>)
 80078c6:	bf0c      	ite	eq
 80078c8:	2308      	moveq	r3, #8
 80078ca:	230a      	movne	r3, #10
 80078cc:	2100      	movs	r1, #0
 80078ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078d2:	6865      	ldr	r5, [r4, #4]
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	60a5      	str	r5, [r4, #8]
 80078d8:	bfa2      	ittt	ge
 80078da:	6821      	ldrge	r1, [r4, #0]
 80078dc:	f021 0104 	bicge.w	r1, r1, #4
 80078e0:	6021      	strge	r1, [r4, #0]
 80078e2:	b90e      	cbnz	r6, 80078e8 <_printf_i+0x114>
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	d04a      	beq.n	800797e <_printf_i+0x1aa>
 80078e8:	4615      	mov	r5, r2
 80078ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80078ee:	fb03 6711 	mls	r7, r3, r1, r6
 80078f2:	5dc7      	ldrb	r7, [r0, r7]
 80078f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078f8:	4637      	mov	r7, r6
 80078fa:	460e      	mov	r6, r1
 80078fc:	42bb      	cmp	r3, r7
 80078fe:	d9f4      	bls.n	80078ea <_printf_i+0x116>
 8007900:	2b08      	cmp	r3, #8
 8007902:	d10b      	bne.n	800791c <_printf_i+0x148>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	07de      	lsls	r6, r3, #31
 8007908:	d508      	bpl.n	800791c <_printf_i+0x148>
 800790a:	6923      	ldr	r3, [r4, #16]
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	4299      	cmp	r1, r3
 8007910:	bfde      	ittt	le
 8007912:	2330      	movle	r3, #48	; 0x30
 8007914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007918:	f105 35ff 	addle.w	r5, r5, #4294967295
 800791c:	1b52      	subs	r2, r2, r5
 800791e:	6122      	str	r2, [r4, #16]
 8007920:	464b      	mov	r3, r9
 8007922:	aa03      	add	r2, sp, #12
 8007924:	4621      	mov	r1, r4
 8007926:	4640      	mov	r0, r8
 8007928:	f8cd a000 	str.w	sl, [sp]
 800792c:	f7ff fee0 	bl	80076f0 <_printf_common>
 8007930:	3001      	adds	r0, #1
 8007932:	d149      	bne.n	80079c8 <_printf_i+0x1f4>
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	b004      	add	sp, #16
 800793a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	f043 0320 	orr.w	r3, r3, #32
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	2778      	movs	r7, #120	; 0x78
 8007948:	4831      	ldr	r0, [pc, #196]	; (8007a10 <_printf_i+0x23c>)
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007950:	061f      	lsls	r7, r3, #24
 8007952:	6829      	ldr	r1, [r5, #0]
 8007954:	f851 6b04 	ldr.w	r6, [r1], #4
 8007958:	d402      	bmi.n	8007960 <_printf_i+0x18c>
 800795a:	065f      	lsls	r7, r3, #25
 800795c:	bf48      	it	mi
 800795e:	b2b6      	uxthmi	r6, r6
 8007960:	07df      	lsls	r7, r3, #31
 8007962:	6029      	str	r1, [r5, #0]
 8007964:	bf44      	itt	mi
 8007966:	f043 0320 	orrmi.w	r3, r3, #32
 800796a:	6023      	strmi	r3, [r4, #0]
 800796c:	b91e      	cbnz	r6, 8007976 <_printf_i+0x1a2>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	f023 0320 	bic.w	r3, r3, #32
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	2310      	movs	r3, #16
 8007978:	e7a8      	b.n	80078cc <_printf_i+0xf8>
 800797a:	4824      	ldr	r0, [pc, #144]	; (8007a0c <_printf_i+0x238>)
 800797c:	e7e5      	b.n	800794a <_printf_i+0x176>
 800797e:	4615      	mov	r5, r2
 8007980:	e7be      	b.n	8007900 <_printf_i+0x12c>
 8007982:	682b      	ldr	r3, [r5, #0]
 8007984:	6826      	ldr	r6, [r4, #0]
 8007986:	1d18      	adds	r0, r3, #4
 8007988:	6961      	ldr	r1, [r4, #20]
 800798a:	6028      	str	r0, [r5, #0]
 800798c:	0635      	lsls	r5, r6, #24
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	d501      	bpl.n	8007996 <_printf_i+0x1c2>
 8007992:	6019      	str	r1, [r3, #0]
 8007994:	e002      	b.n	800799c <_printf_i+0x1c8>
 8007996:	0670      	lsls	r0, r6, #25
 8007998:	d5fb      	bpl.n	8007992 <_printf_i+0x1be>
 800799a:	8019      	strh	r1, [r3, #0]
 800799c:	2300      	movs	r3, #0
 800799e:	4615      	mov	r5, r2
 80079a0:	6123      	str	r3, [r4, #16]
 80079a2:	e7bd      	b.n	8007920 <_printf_i+0x14c>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	2100      	movs	r1, #0
 80079a8:	1d1a      	adds	r2, r3, #4
 80079aa:	602a      	str	r2, [r5, #0]
 80079ac:	681d      	ldr	r5, [r3, #0]
 80079ae:	6862      	ldr	r2, [r4, #4]
 80079b0:	4628      	mov	r0, r5
 80079b2:	f000 f9f3 	bl	8007d9c <memchr>
 80079b6:	b108      	cbz	r0, 80079bc <_printf_i+0x1e8>
 80079b8:	1b40      	subs	r0, r0, r5
 80079ba:	6060      	str	r0, [r4, #4]
 80079bc:	6863      	ldr	r3, [r4, #4]
 80079be:	6123      	str	r3, [r4, #16]
 80079c0:	2300      	movs	r3, #0
 80079c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c6:	e7ab      	b.n	8007920 <_printf_i+0x14c>
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	462a      	mov	r2, r5
 80079cc:	4649      	mov	r1, r9
 80079ce:	4640      	mov	r0, r8
 80079d0:	47d0      	blx	sl
 80079d2:	3001      	adds	r0, #1
 80079d4:	d0ae      	beq.n	8007934 <_printf_i+0x160>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	079b      	lsls	r3, r3, #30
 80079da:	d413      	bmi.n	8007a04 <_printf_i+0x230>
 80079dc:	68e0      	ldr	r0, [r4, #12]
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	4298      	cmp	r0, r3
 80079e2:	bfb8      	it	lt
 80079e4:	4618      	movlt	r0, r3
 80079e6:	e7a7      	b.n	8007938 <_printf_i+0x164>
 80079e8:	2301      	movs	r3, #1
 80079ea:	4632      	mov	r2, r6
 80079ec:	4649      	mov	r1, r9
 80079ee:	4640      	mov	r0, r8
 80079f0:	47d0      	blx	sl
 80079f2:	3001      	adds	r0, #1
 80079f4:	d09e      	beq.n	8007934 <_printf_i+0x160>
 80079f6:	3501      	adds	r5, #1
 80079f8:	68e3      	ldr	r3, [r4, #12]
 80079fa:	9903      	ldr	r1, [sp, #12]
 80079fc:	1a5b      	subs	r3, r3, r1
 80079fe:	42ab      	cmp	r3, r5
 8007a00:	dcf2      	bgt.n	80079e8 <_printf_i+0x214>
 8007a02:	e7eb      	b.n	80079dc <_printf_i+0x208>
 8007a04:	2500      	movs	r5, #0
 8007a06:	f104 0619 	add.w	r6, r4, #25
 8007a0a:	e7f5      	b.n	80079f8 <_printf_i+0x224>
 8007a0c:	0800926d 	.word	0x0800926d
 8007a10:	0800927e 	.word	0x0800927e

08007a14 <__sflush_r>:
 8007a14:	898a      	ldrh	r2, [r1, #12]
 8007a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	0710      	lsls	r0, r2, #28
 8007a1e:	460c      	mov	r4, r1
 8007a20:	d458      	bmi.n	8007ad4 <__sflush_r+0xc0>
 8007a22:	684b      	ldr	r3, [r1, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dc05      	bgt.n	8007a34 <__sflush_r+0x20>
 8007a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	dc02      	bgt.n	8007a34 <__sflush_r+0x20>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	d0f9      	beq.n	8007a2e <__sflush_r+0x1a>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a40:	682f      	ldr	r7, [r5, #0]
 8007a42:	6a21      	ldr	r1, [r4, #32]
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	d032      	beq.n	8007aae <__sflush_r+0x9a>
 8007a48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	075a      	lsls	r2, r3, #29
 8007a4e:	d505      	bpl.n	8007a5c <__sflush_r+0x48>
 8007a50:	6863      	ldr	r3, [r4, #4]
 8007a52:	1ac0      	subs	r0, r0, r3
 8007a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a56:	b10b      	cbz	r3, 8007a5c <__sflush_r+0x48>
 8007a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a5a:	1ac0      	subs	r0, r0, r3
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a62:	4628      	mov	r0, r5
 8007a64:	6a21      	ldr	r1, [r4, #32]
 8007a66:	47b0      	blx	r6
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	d106      	bne.n	8007a7c <__sflush_r+0x68>
 8007a6e:	6829      	ldr	r1, [r5, #0]
 8007a70:	291d      	cmp	r1, #29
 8007a72:	d82b      	bhi.n	8007acc <__sflush_r+0xb8>
 8007a74:	4a28      	ldr	r2, [pc, #160]	; (8007b18 <__sflush_r+0x104>)
 8007a76:	410a      	asrs	r2, r1
 8007a78:	07d6      	lsls	r6, r2, #31
 8007a7a:	d427      	bmi.n	8007acc <__sflush_r+0xb8>
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	04d9      	lsls	r1, r3, #19
 8007a80:	6062      	str	r2, [r4, #4]
 8007a82:	6922      	ldr	r2, [r4, #16]
 8007a84:	6022      	str	r2, [r4, #0]
 8007a86:	d504      	bpl.n	8007a92 <__sflush_r+0x7e>
 8007a88:	1c42      	adds	r2, r0, #1
 8007a8a:	d101      	bne.n	8007a90 <__sflush_r+0x7c>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b903      	cbnz	r3, 8007a92 <__sflush_r+0x7e>
 8007a90:	6560      	str	r0, [r4, #84]	; 0x54
 8007a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a94:	602f      	str	r7, [r5, #0]
 8007a96:	2900      	cmp	r1, #0
 8007a98:	d0c9      	beq.n	8007a2e <__sflush_r+0x1a>
 8007a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	d002      	beq.n	8007aa8 <__sflush_r+0x94>
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7ff fc94 	bl	80073d0 <_free_r>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	6360      	str	r0, [r4, #52]	; 0x34
 8007aac:	e7c0      	b.n	8007a30 <__sflush_r+0x1c>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b0      	blx	r6
 8007ab4:	1c41      	adds	r1, r0, #1
 8007ab6:	d1c8      	bne.n	8007a4a <__sflush_r+0x36>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0c5      	beq.n	8007a4a <__sflush_r+0x36>
 8007abe:	2b1d      	cmp	r3, #29
 8007ac0:	d001      	beq.n	8007ac6 <__sflush_r+0xb2>
 8007ac2:	2b16      	cmp	r3, #22
 8007ac4:	d101      	bne.n	8007aca <__sflush_r+0xb6>
 8007ac6:	602f      	str	r7, [r5, #0]
 8007ac8:	e7b1      	b.n	8007a2e <__sflush_r+0x1a>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	e7ad      	b.n	8007a30 <__sflush_r+0x1c>
 8007ad4:	690f      	ldr	r7, [r1, #16]
 8007ad6:	2f00      	cmp	r7, #0
 8007ad8:	d0a9      	beq.n	8007a2e <__sflush_r+0x1a>
 8007ada:	0793      	lsls	r3, r2, #30
 8007adc:	680e      	ldr	r6, [r1, #0]
 8007ade:	600f      	str	r7, [r1, #0]
 8007ae0:	bf0c      	ite	eq
 8007ae2:	694b      	ldreq	r3, [r1, #20]
 8007ae4:	2300      	movne	r3, #0
 8007ae6:	eba6 0807 	sub.w	r8, r6, r7
 8007aea:	608b      	str	r3, [r1, #8]
 8007aec:	f1b8 0f00 	cmp.w	r8, #0
 8007af0:	dd9d      	ble.n	8007a2e <__sflush_r+0x1a>
 8007af2:	4643      	mov	r3, r8
 8007af4:	463a      	mov	r2, r7
 8007af6:	6a21      	ldr	r1, [r4, #32]
 8007af8:	4628      	mov	r0, r5
 8007afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007afc:	47b0      	blx	r6
 8007afe:	2800      	cmp	r0, #0
 8007b00:	dc06      	bgt.n	8007b10 <__sflush_r+0xfc>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b0c:	81a3      	strh	r3, [r4, #12]
 8007b0e:	e78f      	b.n	8007a30 <__sflush_r+0x1c>
 8007b10:	4407      	add	r7, r0
 8007b12:	eba8 0800 	sub.w	r8, r8, r0
 8007b16:	e7e9      	b.n	8007aec <__sflush_r+0xd8>
 8007b18:	dfbffffe 	.word	0xdfbffffe

08007b1c <_fflush_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	690b      	ldr	r3, [r1, #16]
 8007b20:	4605      	mov	r5, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	b913      	cbnz	r3, 8007b2c <_fflush_r+0x10>
 8007b26:	2500      	movs	r5, #0
 8007b28:	4628      	mov	r0, r5
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	b118      	cbz	r0, 8007b36 <_fflush_r+0x1a>
 8007b2e:	6a03      	ldr	r3, [r0, #32]
 8007b30:	b90b      	cbnz	r3, 8007b36 <_fflush_r+0x1a>
 8007b32:	f7ff fa6f 	bl	8007014 <__sinit>
 8007b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0f3      	beq.n	8007b26 <_fflush_r+0xa>
 8007b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b40:	07d0      	lsls	r0, r2, #31
 8007b42:	d404      	bmi.n	8007b4e <_fflush_r+0x32>
 8007b44:	0599      	lsls	r1, r3, #22
 8007b46:	d402      	bmi.n	8007b4e <_fflush_r+0x32>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f7ff fc3e 	bl	80073ca <__retarget_lock_acquire_recursive>
 8007b4e:	4628      	mov	r0, r5
 8007b50:	4621      	mov	r1, r4
 8007b52:	f7ff ff5f 	bl	8007a14 <__sflush_r>
 8007b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b58:	4605      	mov	r5, r0
 8007b5a:	07da      	lsls	r2, r3, #31
 8007b5c:	d4e4      	bmi.n	8007b28 <_fflush_r+0xc>
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	059b      	lsls	r3, r3, #22
 8007b62:	d4e1      	bmi.n	8007b28 <_fflush_r+0xc>
 8007b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b66:	f7ff fc31 	bl	80073cc <__retarget_lock_release_recursive>
 8007b6a:	e7dd      	b.n	8007b28 <_fflush_r+0xc>

08007b6c <__swhatbuf_r>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	460c      	mov	r4, r1
 8007b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b74:	b096      	sub	sp, #88	; 0x58
 8007b76:	4615      	mov	r5, r2
 8007b78:	2900      	cmp	r1, #0
 8007b7a:	461e      	mov	r6, r3
 8007b7c:	da0c      	bge.n	8007b98 <__swhatbuf_r+0x2c>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	2100      	movs	r1, #0
 8007b82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b86:	bf0c      	ite	eq
 8007b88:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b8c:	2340      	movne	r3, #64	; 0x40
 8007b8e:	2000      	movs	r0, #0
 8007b90:	6031      	str	r1, [r6, #0]
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	b016      	add	sp, #88	; 0x58
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	466a      	mov	r2, sp
 8007b9a:	f000 f8dd 	bl	8007d58 <_fstat_r>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	dbed      	blt.n	8007b7e <__swhatbuf_r+0x12>
 8007ba2:	9901      	ldr	r1, [sp, #4]
 8007ba4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ba8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007bac:	4259      	negs	r1, r3
 8007bae:	4159      	adcs	r1, r3
 8007bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb4:	e7eb      	b.n	8007b8e <__swhatbuf_r+0x22>

08007bb6 <__smakebuf_r>:
 8007bb6:	898b      	ldrh	r3, [r1, #12]
 8007bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bba:	079d      	lsls	r5, r3, #30
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	d507      	bpl.n	8007bd2 <__smakebuf_r+0x1c>
 8007bc2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	2301      	movs	r3, #1
 8007bcc:	6163      	str	r3, [r4, #20]
 8007bce:	b002      	add	sp, #8
 8007bd0:	bd70      	pop	{r4, r5, r6, pc}
 8007bd2:	ab01      	add	r3, sp, #4
 8007bd4:	466a      	mov	r2, sp
 8007bd6:	f7ff ffc9 	bl	8007b6c <__swhatbuf_r>
 8007bda:	9900      	ldr	r1, [sp, #0]
 8007bdc:	4605      	mov	r5, r0
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7ff f900 	bl	8006de4 <_malloc_r>
 8007be4:	b948      	cbnz	r0, 8007bfa <__smakebuf_r+0x44>
 8007be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bea:	059a      	lsls	r2, r3, #22
 8007bec:	d4ef      	bmi.n	8007bce <__smakebuf_r+0x18>
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	f043 0302 	orr.w	r3, r3, #2
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	e7e3      	b.n	8007bc2 <__smakebuf_r+0xc>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	6020      	str	r0, [r4, #0]
 8007bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c02:	6120      	str	r0, [r4, #16]
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	6163      	str	r3, [r4, #20]
 8007c0a:	9b01      	ldr	r3, [sp, #4]
 8007c0c:	b15b      	cbz	r3, 8007c26 <__smakebuf_r+0x70>
 8007c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c12:	4630      	mov	r0, r6
 8007c14:	f000 f8b2 	bl	8007d7c <_isatty_r>
 8007c18:	b128      	cbz	r0, 8007c26 <__smakebuf_r+0x70>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f023 0303 	bic.w	r3, r3, #3
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	431d      	orrs	r5, r3
 8007c2a:	81a5      	strh	r5, [r4, #12]
 8007c2c:	e7cf      	b.n	8007bce <__smakebuf_r+0x18>

08007c2e <__swbuf_r>:
 8007c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c30:	460e      	mov	r6, r1
 8007c32:	4614      	mov	r4, r2
 8007c34:	4605      	mov	r5, r0
 8007c36:	b118      	cbz	r0, 8007c40 <__swbuf_r+0x12>
 8007c38:	6a03      	ldr	r3, [r0, #32]
 8007c3a:	b90b      	cbnz	r3, 8007c40 <__swbuf_r+0x12>
 8007c3c:	f7ff f9ea 	bl	8007014 <__sinit>
 8007c40:	69a3      	ldr	r3, [r4, #24]
 8007c42:	60a3      	str	r3, [r4, #8]
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	071a      	lsls	r2, r3, #28
 8007c48:	d525      	bpl.n	8007c96 <__swbuf_r+0x68>
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	b31b      	cbz	r3, 8007c96 <__swbuf_r+0x68>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	b2f6      	uxtb	r6, r6
 8007c52:	6922      	ldr	r2, [r4, #16]
 8007c54:	4637      	mov	r7, r6
 8007c56:	1a98      	subs	r0, r3, r2
 8007c58:	6963      	ldr	r3, [r4, #20]
 8007c5a:	4283      	cmp	r3, r0
 8007c5c:	dc04      	bgt.n	8007c68 <__swbuf_r+0x3a>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7ff ff5b 	bl	8007b1c <_fflush_r>
 8007c66:	b9e0      	cbnz	r0, 8007ca2 <__swbuf_r+0x74>
 8007c68:	68a3      	ldr	r3, [r4, #8]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	60a3      	str	r3, [r4, #8]
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	6022      	str	r2, [r4, #0]
 8007c74:	701e      	strb	r6, [r3, #0]
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	6962      	ldr	r2, [r4, #20]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d004      	beq.n	8007c88 <__swbuf_r+0x5a>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	07db      	lsls	r3, r3, #31
 8007c82:	d506      	bpl.n	8007c92 <__swbuf_r+0x64>
 8007c84:	2e0a      	cmp	r6, #10
 8007c86:	d104      	bne.n	8007c92 <__swbuf_r+0x64>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f7ff ff46 	bl	8007b1c <_fflush_r>
 8007c90:	b938      	cbnz	r0, 8007ca2 <__swbuf_r+0x74>
 8007c92:	4638      	mov	r0, r7
 8007c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c96:	4621      	mov	r1, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f000 f805 	bl	8007ca8 <__swsetup_r>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0d5      	beq.n	8007c4e <__swbuf_r+0x20>
 8007ca2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ca6:	e7f4      	b.n	8007c92 <__swbuf_r+0x64>

08007ca8 <__swsetup_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4b2a      	ldr	r3, [pc, #168]	; (8007d54 <__swsetup_r+0xac>)
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	b118      	cbz	r0, 8007cbc <__swsetup_r+0x14>
 8007cb4:	6a03      	ldr	r3, [r0, #32]
 8007cb6:	b90b      	cbnz	r3, 8007cbc <__swsetup_r+0x14>
 8007cb8:	f7ff f9ac 	bl	8007014 <__sinit>
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc2:	0718      	lsls	r0, r3, #28
 8007cc4:	d422      	bmi.n	8007d0c <__swsetup_r+0x64>
 8007cc6:	06d9      	lsls	r1, r3, #27
 8007cc8:	d407      	bmi.n	8007cda <__swsetup_r+0x32>
 8007cca:	2309      	movs	r3, #9
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	e034      	b.n	8007d44 <__swsetup_r+0x9c>
 8007cda:	0758      	lsls	r0, r3, #29
 8007cdc:	d512      	bpl.n	8007d04 <__swsetup_r+0x5c>
 8007cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ce0:	b141      	cbz	r1, 8007cf4 <__swsetup_r+0x4c>
 8007ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce6:	4299      	cmp	r1, r3
 8007ce8:	d002      	beq.n	8007cf0 <__swsetup_r+0x48>
 8007cea:	4628      	mov	r0, r5
 8007cec:	f7ff fb70 	bl	80073d0 <_free_r>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f043 0308 	orr.w	r3, r3, #8
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	b94b      	cbnz	r3, 8007d24 <__swsetup_r+0x7c>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1a:	d003      	beq.n	8007d24 <__swsetup_r+0x7c>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7ff ff49 	bl	8007bb6 <__smakebuf_r>
 8007d24:	89a0      	ldrh	r0, [r4, #12]
 8007d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d2a:	f010 0301 	ands.w	r3, r0, #1
 8007d2e:	d00a      	beq.n	8007d46 <__swsetup_r+0x9e>
 8007d30:	2300      	movs	r3, #0
 8007d32:	60a3      	str	r3, [r4, #8]
 8007d34:	6963      	ldr	r3, [r4, #20]
 8007d36:	425b      	negs	r3, r3
 8007d38:	61a3      	str	r3, [r4, #24]
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	b943      	cbnz	r3, 8007d50 <__swsetup_r+0xa8>
 8007d3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d42:	d1c4      	bne.n	8007cce <__swsetup_r+0x26>
 8007d44:	bd38      	pop	{r3, r4, r5, pc}
 8007d46:	0781      	lsls	r1, r0, #30
 8007d48:	bf58      	it	pl
 8007d4a:	6963      	ldrpl	r3, [r4, #20]
 8007d4c:	60a3      	str	r3, [r4, #8]
 8007d4e:	e7f4      	b.n	8007d3a <__swsetup_r+0x92>
 8007d50:	2000      	movs	r0, #0
 8007d52:	e7f7      	b.n	8007d44 <__swsetup_r+0x9c>
 8007d54:	20000088 	.word	0x20000088

08007d58 <_fstat_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_fstat_r+0x20>)
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	602b      	str	r3, [r5, #0]
 8007d66:	f7fa f9dc 	bl	8002122 <_fstat>
 8007d6a:	1c43      	adds	r3, r0, #1
 8007d6c:	d102      	bne.n	8007d74 <_fstat_r+0x1c>
 8007d6e:	682b      	ldr	r3, [r5, #0]
 8007d70:	b103      	cbz	r3, 8007d74 <_fstat_r+0x1c>
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	bf00      	nop
 8007d78:	200004ec 	.word	0x200004ec

08007d7c <_isatty_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4d05      	ldr	r5, [pc, #20]	; (8007d98 <_isatty_r+0x1c>)
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	f7fa f9db 	bl	8002142 <_isatty>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_isatty_r+0x1a>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_isatty_r+0x1a>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	200004ec 	.word	0x200004ec

08007d9c <memchr>:
 8007d9c:	b2c9      	uxtb	r1, r1
 8007d9e:	4402      	add	r2, r0
 8007da0:	b510      	push	{r4, lr}
 8007da2:	4290      	cmp	r0, r2
 8007da4:	4603      	mov	r3, r0
 8007da6:	d101      	bne.n	8007dac <memchr+0x10>
 8007da8:	2300      	movs	r3, #0
 8007daa:	e003      	b.n	8007db4 <memchr+0x18>
 8007dac:	781c      	ldrb	r4, [r3, #0]
 8007dae:	3001      	adds	r0, #1
 8007db0:	428c      	cmp	r4, r1
 8007db2:	d1f6      	bne.n	8007da2 <memchr+0x6>
 8007db4:	4618      	mov	r0, r3
 8007db6:	bd10      	pop	{r4, pc}

08007db8 <_init>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr

08007dc4 <_fini>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	bf00      	nop
 8007dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dca:	bc08      	pop	{r3}
 8007dcc:	469e      	mov	lr, r3
 8007dce:	4770      	bx	lr
